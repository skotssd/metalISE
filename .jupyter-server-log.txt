[I 19:29:10.710 NotebookApp] Writing notebook server cookie secret to /home/jovyan/.local/share/jupyter/runtime/notebook_cookie_secret
[I 19:29:10.711 NotebookApp] Authentication of /metrics is OFF, since other authentication is disabled.
[W 19:29:11.146 NotebookApp] All authentication is disabled.  Anyone who can connect to this server will be able to run code.
[W 2023-08-02 19:29:12.150 LabApp] 'ip' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-08-02 19:29:12.151 LabApp] 'token' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-08-02 19:29:12.151 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-08-02 19:29:12.151 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[I 2023-08-02 19:29:12.164 LabApp] JupyterLab extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/jupyterlab
[I 2023-08-02 19:29:12.165 LabApp] JupyterLab application directory is /srv/conda/envs/notebook/share/jupyter/lab
[I 19:29:12.176 NotebookApp] nteract extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/nteract_on_jupyter
[I 19:29:12.180 NotebookApp] Serving notebooks from local directory: /home/jovyan
[I 19:29:12.180 NotebookApp] Jupyter Notebook 6.4.12 is running at:
[I 19:29:12.180 NotebookApp] http://ec43c0bfdd1c:8888/
[I 19:29:12.180 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[W 19:29:12.195 NotebookApp] No web browser found: could not locate runnable browser.
[I 19:30:21.999 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 0.670000ms
[I 2023-08-02 19:30:25.686 LabApp] Build is up to date
[W 19:30:52.983 NotebookApp] Collisions detected in /home/jovyan/.jupyter/jupyter_notebook_config.py and /home/jovyan/.jupyter/jupyter_notebook_config.json config files. /home/jovyan/.jupyter/jupyter_notebook_config.json has higher priority: {
      "NotebookApp": {
        "password": "'' ignored, using 'argon2:$argon2id$v=19$m=10240,t=10,p=8$ZmkKwBPY7SHyhu/M4lUPdg$tdk6jy8Z9Fj2eCjHXTJCGDWY8OT4vNNruv21gO7uNc8'"
      }
    }
[W 2023-08-02 19:30:54.136 LabApp] 'ip' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-08-02 19:30:54.137 LabApp] 'token' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-08-02 19:30:54.137 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-08-02 19:30:54.137 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[I 2023-08-02 19:30:54.151 LabApp] JupyterLab extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/jupyterlab
[I 2023-08-02 19:30:54.151 LabApp] JupyterLab application directory is /srv/conda/envs/notebook/share/jupyter/lab
[I 19:30:54.161 NotebookApp] nteract extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/nteract_on_jupyter
[I 19:30:54.165 NotebookApp] Serving notebooks from local directory: /home/jovyan
[I 19:30:54.165 NotebookApp] Jupyter Notebook 6.4.12 is running at:
[I 19:30:54.165 NotebookApp] http://ec43c0bfdd1c:8888/
[I 19:30:54.165 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[W 19:30:54.180 NotebookApp] No web browser found: could not locate runnable browser.
[W 19:30:55.116 NotebookApp] wrote error: 'Forbidden'
[W 19:30:55.117 NotebookApp] 403 GET /api/metrics/v1?1691004655115 (172.24.0.1) 1.980000ms referer=https://jupyter6.clearnasdss.synology.me/lab
[I 19:30:56.841 NotebookApp] 302 GET /lab (172.24.0.1) 1.170000ms
[W 19:30:56.963 NotebookApp] Forbidden
[W 19:30:56.963 NotebookApp] 403 GET /api/contents?content=1&1691004656961 (172.24.0.1) 1.520000ms referer=https://jupyter6.clearnasdss.synology.me/lab
[I 19:31:02.258 NotebookApp] 302 POST /login?next=%2Flab (172.24.0.1) 156.290000ms
[I 2023-08-02 19:31:05.757 LabApp] Build is up to date
[I 19:31:08.805 NotebookApp] Writing notebook-signing key to /home/jovyan/.local/share/jupyter/notebook_secret
[W 19:31:08.808 NotebookApp] Notebook KNO3_pH9pt5_1uMCuT.ipynb is not trusted
[I 19:31:09.057 NotebookApp] Kernel started: 796ba640-abe1-49e7-a4ab-c2536ef9ec41, name: xoctave
Serving notebooks from local directory: /home/jovyan
1 active kernel
Jupyter Notebook 6.4.12 is running at:
http://ec43c0bfdd1c:8888/
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 19:31:09.862 NotebookApp] 301 GET /static/favicons/favicon-busy-1.ico (172.24.0.1) 3.750000ms
[W 19:31:09.868 NotebookApp] Got events for closed stream <zmq.eventloop.zmqstream.ZMQStream object at 0x7f38a9903690>
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
%2	47	167	50	2	91	-0.08
%2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[I 19:33:08.965 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
[W 19:44:59.699 NotebookApp] 404 GET /api/contents/KNO3_pH8_0pt1uMCuT.ipynb?1691005499700 (172.24.0.1): file or directory does not exist: 'KNO3_pH8_0pt1uMCuT.ipynb'
[W 19:44:59.699 NotebookApp] file or directory does not exist: 'KNO3_pH8_0pt1uMCuT.ipynb'
[W 19:44:59.700 NotebookApp] 404 GET /api/contents/KNO3_pH8_0pt1uMCuT.ipynb?1691005499700 (172.24.0.1) 1.880000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/KNO3_pH9pt5_1uMCuT.ipynb
[W 19:44:59.719 NotebookApp] 404 GET /api/contents/KNO3_pH8_0pt1uMCuT.ipynb?content=0&1691005499721 (172.24.0.1): file or directory does not exist: 'KNO3_pH8_0pt1uMCuT.ipynb'
[W 19:44:59.719 NotebookApp] file or directory does not exist: 'KNO3_pH8_0pt1uMCuT.ipynb'
[W 19:44:59.720 NotebookApp] 404 GET /api/contents/KNO3_pH8_0pt1uMCuT.ipynb?content=0&1691005499721 (172.24.0.1) 1.590000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/KNO3_pH9pt5_1uMCuT.ipynb
[I 19:44:59.832 NotebookApp] Uploading file to /KNO3_pH8_0pt1uMCuT.ipynb
[I 19:46:59.885 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

list
string: -25
list
string: -20
list
string: -15
list
string: -10
list
string: -5
list
string: 0
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.2085 50 0.633641 35.7873

list
string: Total Cu
 -7.08802 40 0.576037 26.2927

[I 19:48:59.929 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
%4	35	275	0	2.001	115.1	0.2
%4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.0438 50 0.304147 35.7873

list
string: Total Cu
 -6.93825 40 0.276498 26.2927

[I 19:50:59.977 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
%4	35	275	0	2.001	115.1	0.2
%4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.0438 50 0.304147 35.7873

list
string: Total Cu
 -6.93825 40 0.276498 26.2927

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 0 150])

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 20
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.0185 50 0.253456 21.4724

list
string: Total Cu
 -6.91521 40 0.230415 15.7756

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.0185 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 40 0.230415 11.5688

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,20,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.0185 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 20 0.230415 11.5688

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.0185 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

[I 19:52:49.879 NotebookApp] Kernel started: 501c1611-0792-428b-aec5-598ef5cf05cd, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 19:53:00.028 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
%2	15	135	0	2.002	74.8	0.04
%2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
%2	47	167	50	2	91	-0.08
%2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
%2	15	135	0	2.002	74.8	0.04
%2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
2	47	167	50	2	91	-0.08
2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -150
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 42.9448

list
string: Total Cu
 -5.91521 40 0.230415 31.5513

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
%2	47	167	50	2	91	-0.08
%2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[I 19:54:49.772 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
[I 19:56:49.816 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
%2	47	167	50	2	91	-0.08
%2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[I 19:57:13.352 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
[W 19:57:26.789 NotebookApp] 404 GET /api/contents/KNO3_pH10_0pt1uMCuT.ipynb?1691006246792 (172.24.0.1): file or directory does not exist: 'KNO3_pH10_0pt1uMCuT.ipynb'
[W 19:57:26.790 NotebookApp] file or directory does not exist: 'KNO3_pH10_0pt1uMCuT.ipynb'
[W 19:57:26.791 NotebookApp] 404 GET /api/contents/KNO3_pH10_0pt1uMCuT.ipynb?1691006246792 (172.24.0.1) 2.950000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/KNO3_pH8_0pt1uMCuT.ipynb
[W 19:57:26.811 NotebookApp] 404 GET /api/contents/KNO3_pH10_0pt1uMCuT.ipynb?content=0&1691006246814 (172.24.0.1): file or directory does not exist: 'KNO3_pH10_0pt1uMCuT.ipynb'
[W 19:57:26.812 NotebookApp] file or directory does not exist: 'KNO3_pH10_0pt1uMCuT.ipynb'
[W 19:57:26.813 NotebookApp] 404 GET /api/contents/KNO3_pH10_0pt1uMCuT.ipynb?content=0&1691006246814 (172.24.0.1) 2.940000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/KNO3_pH8_0pt1uMCuT.ipynb
[I 19:57:26.821 NotebookApp] Uploading file to /KNO3_pH10_0pt1uMCuT.ipynb
[I 19:58:08.451 NotebookApp] Kernel started: 7c3981ad-5a7c-4d29-a312-81b6a13e5d7a, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
%4	35	275	0	2.001	115.1	0.2
%4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

[I 19:59:26.874 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
[I 20:00:08.339 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
%4	35	275	0	2.001	115.1	0.2
%4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
%5	45	345	50	1.995	119.6	0.1
%5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
%5	45	345	50	1.995	119.6	0.1
%5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

[I 20:20:08.458 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
%4	35	275	0	2.001	115.1	0.2
%4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

Executing: % try one point, assume Nernst slope

Eo=115-(59.2/2)*log10(CuTmeas)
[I 20:22:08.498 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
[I 20:24:08.546 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(E-Eo)/m
Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
[I 20:26:08.586 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; %m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

plot(logCuonept,Eorig,'ko','markerfillcolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
%4	35	275	0	2.001	115.1	0.2
%4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; %m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

plot(logCuonept,Eorig,'ko','markerfillcolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

[I 20:28:08.632 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

plot(logCuonept,Eorig,'ko','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; %m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

[I 20:30:08.674 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
[I 20:39:27.080 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
%1	5	65	0	9.697	-17	0.14
%1	10	70	0	9.709	-17.3	-0.0600000000000001
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.0185 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.0185 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.7030; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8513 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.7030; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 40 150])

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.7030; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 20:41:27.127 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
%2	53	173	0	2.002	95.6	0.0399999999999977
%2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.7030; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.7030; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 20:43:18.546 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=79.3; Eorig=-26.4; %m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
[I 20:43:27.170 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[I 20:45:18.592 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[I 20:47:18.635 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

[I 20:48:09.003 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; %m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; %m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

[I 20:50:09.043 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
%2	47	167	50	2	91	-0.08
%2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=79.3; Eorig=-26.4; %m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
%2	47	167	50	2	91	-0.08
%2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=79.3; Eorig=-26.4; %m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[I 20:51:18.692 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.7030; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.7030; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

%plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 20:53:27.249 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 20:55:27.295 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; %m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; %m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; %m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
%2	47	167	50	2	91	-0.08
%2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=79.3; Eorig=-26.4; %m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[I 20:57:18.751 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
[I 20:57:27.341 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
%2	47	167	50	2	91	-0.08
%2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=79.3; Eorig=-26.4; m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 20:58:09.106 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
[I 20:59:18.796 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
[I 20:59:27.379 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 21:01:27.419 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-1.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -16.8769 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-11.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -9.25022 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-13.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -9.25022 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 21:03:27.464 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; m=21.5;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; m=21.5; m=24.254;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 21:05:19.712 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; m=21.5; m=24.254; m=param(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; m=21.5; m=24.254; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5;  m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

axis([-13 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

[I 21:07:19.760 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5;  m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-13 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.12544 50 0.253456 15.7464

list
string: Total Cu
 -6.91521 60 0.230415 11.5688

[I 21:08:09.175 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; m=21.5; m=24.254; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 21:09:19.799 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5;  m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5;  m=paramlinear(1); m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 21:10:09.224 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5;  
%m=paramlinear(1); m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; %m=paramlinear(1); m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
paramlinear=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 21:12:09.267 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
%2	47	167	50	2	91	-0.08
%2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=79.3; Eorig=-26.4; m=21.5; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[I 21:13:18.880 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
2	47	167	50	2	91	-0.08
2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=79.3; Eorig=-26.4; m=21.5; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
2	47	167	50	2	91	-0.08
2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
paramlinear=polyfit(log10(CuTplus(5:end)),Emeas(5:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=79.3; Eorig=-26.4; m=21.5; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
2	47	167	50	2	91	-0.08
2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
paramlinear=polyfit(log10(CuTplus(5:end)),Emeas(5:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=79.3; Eorig=-26.4; m=21.5; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[I 21:15:18.923 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
paramlinear=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 21:17:18.968 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -7.16346 50 0.329493 15.7464

list
string: Total Cu
 -5.94977 60 0.299539 11.5688

[I 21:18:09.315 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cuall)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cuall)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 21:20:09.356 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
2	47	167	50	2	91	-0.08
2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus),Emeas,1)
paramlinear=polyfit(log10(CuTplus(5:end)),Emeas(5:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=79.3; Eorig=-26.4; m=21.5; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; m=21.5; m=24.254; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 21:35:44.970 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
[I 21:35:44.999 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(4:end)),Emeas(4:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 21:38:09.969 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
2	47	167	50	2	91	-0.08
2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
paramlinear=polyfit(log10(CuTplus(5:end)),Emeas(5:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=79.3; Eorig=-26.4; m=21.5; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -150
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 42.9448

list
string: Total Cu
 -5.91521 40 0.230415 31.5513

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
2	47	167	50	2	91	-0.08
2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(5:end)),Emeas(5:end),1)
paramlinear=polyfit(log10(CuTplus(5:end)),Emeas(5:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=79.3; Eorig=-26.4; m=21.5; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[I 21:39:45.041 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
[W 22:49:49.735 NotebookApp] 404 GET /api/contents/KNO3_pH6_0pt1uMCuT.ipynb?1691016589738 (172.24.0.1): file or directory does not exist: 'KNO3_pH6_0pt1uMCuT.ipynb'
[W 22:49:49.735 NotebookApp] file or directory does not exist: 'KNO3_pH6_0pt1uMCuT.ipynb'
[W 22:49:49.735 NotebookApp] 404 GET /api/contents/KNO3_pH6_0pt1uMCuT.ipynb?1691016589738 (172.24.0.1) 1.790000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/KNO3_pH10_0pt1uMCuT.ipynb
[W 22:49:49.758 NotebookApp] 404 GET /api/contents/KNO3_pH6_0pt1uMCuT.ipynb?content=0&1691016589763 (172.24.0.1): file or directory does not exist: 'KNO3_pH6_0pt1uMCuT.ipynb'
[W 22:49:49.759 NotebookApp] file or directory does not exist: 'KNO3_pH6_0pt1uMCuT.ipynb'
[W 22:49:49.760 NotebookApp] 404 GET /api/contents/KNO3_pH6_0pt1uMCuT.ipynb?content=0&1691016589763 (172.24.0.1) 2.140000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/KNO3_pH10_0pt1uMCuT.ipynb
[I 22:49:49.769 NotebookApp] Uploading file to /KNO3_pH6_0pt1uMCuT.ipynb
Executing: % put in data
data=[...
time hr	time min	time total	cumulative  vol added	pH	mvA	delta
0	0	0	0	5.992	49.4	
0	5	5	0	6.002	55.7	1.26
0	10	10	0	6.018	59.4	0.739999999999999
0	15	15	0	6.033	62.5	0.62
0	20	20	0	6.046	62.6	0.0200000000000003
0	25	25	0	6.064	65.4	0.560000000000001
0	30	30	0	6.054	73	1.52
1	0	60	0	6.077	70.1	-0.0966666666666669
1	5	65	0	6.042	67.4	-0.539999999999998
1	10	70	0	6.064	69.9	0.5
1	15	75	0	6.077	69.9	0
1	20	80	0	6.091	68.8	-0.220000000000002
1	25	85	0	6.019	67.3	-0.3
1	30	90	0	6.033	67.7	0.0800000000000011
1	35	95	0	6.05	68	0.0599999999999994
1	40	100	0	6.073	67.4	-0.119999999999999
1	45	105	0	2.086	75.5	1.62
1	50	110	0	2.045	76.3	0.159999999999999
1	55	115	0	2.04	79	0.540000000000001
2	0	120	0	2.041	79.2	0.0400000000000006
2	5	125	0	2.039	80.4	0.240000000000001
2	10	130	0	2.04	82.2	0.359999999999999
2	15	135	0	2.04	81.7	-0.1
2	20	140	0	2.038	84	0.459999999999999
2	25	145	0	2.037	82.9	-0.219999999999999
2	30	150	0	2.037	83.5	0.119999999999999
2	35	155	0	2.038	84.8	0.259999999999999
2	40	160	0	2.035	86.1	0.259999999999999
3	0	180	0	2.037	84.6	-0.075
3	5	185	50	2.037	87.3	0.540000000000001
3	8	188	50	2.036	91.2	1.3
3	13	193	50	2.037	92.3	0.219999999999999
3	18	198	50	2.032	92.8	0.1
3	23	203	50	2.036	93.7	0.180000000000001
3	28	208	50	2.035	93.3	-0.0800000000000011
3	33	213	50	2.036	93.9	0.120000000000002
3	38	218	50	2.037	95.4	0.3
3	43	223	50	2.035	95.3	-0.0200000000000017
3	48	228	50	2.035	96.3	0.2
3	53	233	50	2.033	98.2	0.380000000000001
3	58	238	50	2.036	98.2	0
4	3	243	50	2.032	98.2	0
4	8	248	50	2.034	98.6	0.0799999999999983
4	10	250	150	2.036	100.5	0.950000000000003
4	15	255	150	2.034	105.2	0.940000000000001
4	20	260	150	2.036	105.6	0.0799999999999983
4	25	265	150	2.034	107	0.280000000000001
4	30	270	150	2.034	108	0.2
4	35	275	150	2.032	108	0
4	40	280	150	2.032	107.8	-0.0400000000000006
4	45	285	150	2.031	107.7	-0.0199999999999989
4	50	290	400	2.031	115	1.46
4	55	295	400	2.031	115.9	0.180000000000001
5	0	300	400	2.029	116.1	0.0399999999999977
5	5	305	400	2.032	116.5	0.0800000000000011
5	10	310	400	2.029	116	-0.1
5	15	315	900	2.034	124.8	1.76
5	20	320	900	2.037	125.3	0.1
5	25	325	900	2.034	125.4	0.0200000000000017
5	30	330	900	2.037	125.5	0.0199999999999989
5	35	335	900	2.041	132.2	1.34
5	40	340	1900	2.042	134	0.360000000000002
5	45	345	1900	2.042	133.5	-0.1
5	55	355	1900	2.041	134.2	0.0699999999999989
6	0	360	3400	2.05	140.8	1.32
6	5	365	3400	2.051	142.2	0.279999999999996
6	10	370	3400	2.05	140.8	-0.279999999999996
6	15	375	3400	2.054	142.2	0.279999999999996
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
time hr	time min	time total	cumulative  vol added	pH	mvA	delta
0	0	0	0	5.992	49.4	
0	5	5	0	6.002	55.7	1.26
0	10	10	0	6.018	59.4	0.739999999999999
0	15	15	0	6.033	62.5	0.62
0	20	20	0	6.046	62.6	0.0200000000000003
0	25	25	0	6.064	65.4	0.560000000000001
0	30	30	0	6.054	73	1.52
1	0	60	0	6.077	70.1	-0.0966666666666669
1	5	65	0	6.042	67.4	-0.539999999999998
1	10	70	0	6.064	69.9	0.5
1	15	75	0	6.077	69.9	0
1	20	80	0	6.091	68.8	-0.220000000000002
%1	25	85	0	6.019	67.3	-0.3
%1	30	90	0	6.033	67.7	0.0800000000000011
1	35	95	0	6.05	68	0.0599999999999994
1	40	100	0	6.073	67.4	-0.119999999999999
];
[I 22:51:49.826 NotebookApp] Saving file at /KNO3_pH6_0pt1uMCuT.ipynb
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
1	45	105	0	2.086	75.5	1.62
1	50	110	0	2.045	76.3	0.159999999999999
1	55	115	0	2.04	79	0.540000000000001
2	0	120	0	2.041	79.2	0.0400000000000006
2	5	125	0	2.039	80.4	0.240000000000001
2	10	130	0	2.04	82.2	0.359999999999999
2	15	135	0	2.04	81.7	-0.1
2	20	140	0	2.038	84	0.459999999999999
2	25	145	0	2.037	82.9	-0.219999999999999
%2	30	150	0	2.037	83.5	0.119999999999999
%2	35	155	0	2.038	84.8	0.259999999999999
2	40	160	0	2.035	86.1	0.259999999999999
3	0	180	0	2.037	84.6	-0.075
3	5	185	50	2.037	87.3	0.540000000000001
3	8	188	50	2.036	91.2	1.3
3	13	193	50	2.037	92.3	0.219999999999999
3	18	198	50	2.032	92.8	0.1
3	23	203	50	2.036	93.7	0.180000000000001
3	28	208	50	2.035	93.3	-0.0800000000000011
3	33	213	50	2.036	93.9	0.120000000000002
3	38	218	50	2.037	95.4	0.3
3	43	223	50	2.035	95.3	-0.0200000000000017
3	48	228	50	2.035	96.3	0.2
3	53	233	50	2.033	98.2	0.380000000000001
3	58	238	50	2.036	98.2	0
4	3	243	50	2.032	98.2	0
4	8	248	50	2.034	98.6	0.0799999999999983
4	10	250	150	2.036	100.5	0.950000000000003
4	15	255	150	2.034	105.2	0.940000000000001
4	20	260	150	2.036	105.6	0.0799999999999983
4	25	265	150	2.034	107	0.280000000000001
4	30	270	150	2.034	108	0.2
4	35	275	150	2.032	108	0
4	40	280	150	2.032	107.8	-0.0400000000000006
4	45	285	150	2.031	107.7	-0.0199999999999989
4	50	290	400	2.031	115	1.46
4	55	295	400	2.031	115.9	0.180000000000001
5	0	300	400	2.029	116.1	0.0399999999999977
5	5	305	400	2.032	116.5	0.0800000000000011
5	10	310	400	2.029	116	-0.1
5	15	315	900	2.034	124.8	1.76
5	20	320	900	2.037	125.3	0.1
5	25	325	900	2.034	125.4	0.0200000000000017
5	30	330	900	2.037	125.5	0.0199999999999989
5	35	335	900	2.041	132.2	1.34
5	40	340	1900	2.042	134	0.360000000000002
5	45	345	1900	2.042	133.5	-0.1
5	55	355	1900	2.041	134.2	0.0699999999999989
6	0	360	3400	2.05	140.8	1.32
6	5	365	3400	2.051	142.2	0.279999999999996
6	10	370	3400	2.05	140.8	-0.279999999999996
6	15	375	3400	2.054	142.2	0.279999999999996
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	5.992	49.4	
%0	5	5	0	6.002	55.7	1.26
%0	10	10	0	6.018	59.4	0.739999999999999
%0	15	15	0	6.033	62.5	0.62
%0	20	20	0	6.046	62.6	0.0200000000000003
%0	25	25	0	6.064	65.4	0.560000000000001
%0	30	30	0	6.054	73	1.52
%1	0	60	0	6.077	70.1	-0.0966666666666669
%1	5	65	0	6.042	67.4	-0.539999999999998
%1	10	70	0	6.064	69.9	0.5
%1	15	75	0	6.077	69.9	0
%1	20	80	0	6.091	68.8	-0.220000000000002
%1	25	85	0	6.019	67.3	-0.3
%1	30	90	0	6.033	67.7	0.0800000000000011
1	35	95	0	6.05	68	0.0599999999999994
1	40	100	0	6.073	67.4	-0.119999999999999
];
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	45	105	0	2.086	75.5	1.62
%1	50	110	0	2.045	76.3	0.159999999999999
%1	55	115	0	2.04	79	0.540000000000001
%2	0	120	0	2.041	79.2	0.0400000000000006
%2	5	125	0	2.039	80.4	0.240000000000001
%2	10	130	0	2.04	82.2	0.359999999999999
%2	15	135	0	2.04	81.7	-0.1
%2	20	140	0	2.038	84	0.459999999999999
%2	25	145	0	2.037	82.9	-0.219999999999999
%2	30	150	0	2.037	83.5	0.119999999999999
%2	35	155	0	2.038	84.8	0.259999999999999
2	40	160	0	2.035	86.1	0.259999999999999
3	0	180	0	2.037	84.6	-0.075
%3	5	185	50	2.037	87.3	0.540000000000001
%3	8	188	50	2.036	91.2	1.3
%3	13	193	50	2.037	92.3	0.219999999999999
%3	18	198	50	2.032	92.8	0.1
%3	23	203	50	2.036	93.7	0.180000000000001
%3	28	208	50	2.035	93.3	-0.0800000000000011
%3	33	213	50	2.036	93.9	0.120000000000002
%3	38	218	50	2.037	95.4	0.3
%3	43	223	50	2.035	95.3	-0.0200000000000017
%3	48	228	50	2.035	96.3	0.2
%3	53	233	50	2.033	98.2	0.380000000000001
%3	58	238	50	2.036	98.2	0
4	3	243	50	2.032	98.2	0
4	8	248	50	2.034	98.6	0.0799999999999983
%4	10	250	150	2.036	100.5	0.950000000000003
%4	15	255	150	2.034	105.2	0.940000000000001
%4	20	260	150	2.036	105.6	0.0799999999999983
%4	25	265	150	2.034	107	0.280000000000001
%4	30	270	150	2.034	108	0.2
%4	35	275	150	2.032	108	0
4	40	280	150	2.032	107.8	-0.0400000000000006
4	45	285	150	2.031	107.7	-0.0199999999999989
%4	50	290	400	2.031	115	1.46
%4	55	295	400	2.031	115.9	0.180000000000001
%5	0	300	400	2.029	116.1	0.0399999999999977
5	5	305	400	2.032	116.5	0.0800000000000011
5	10	310	400	2.029	116	-0.1
%5	15	315	900	2.034	124.8	1.76
%5	20	320	900	2.037	125.3	0.1
%5	25	325	900	2.034	125.4	0.0200000000000017
5	30	330	900	2.037	125.5	0.0199999999999989
5	35	335	900	2.041	132.2	1.34
%5	40	340	1900	2.042	134	0.360000000000002
5	45	345	1900	2.042	133.5	-0.1
5	55	355	1900	2.041	134.2	0.0699999999999989
%6	0	360	3400	2.05	140.8	1.32
%6	5	365	3400	2.051	142.2	0.279999999999996
6	10	370	3400	2.05	140.8	-0.279999999999996
6	15	375	3400	2.054	142.2	0.279999999999996
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	5.992	49.4	
%0	5	5	0	6.002	55.7	1.26
%0	10	10	0	6.018	59.4	0.739999999999999
%0	15	15	0	6.033	62.5	0.62
%0	20	20	0	6.046	62.6	0.0200000000000003
%0	25	25	0	6.064	65.4	0.560000000000001
%0	30	30	0	6.054	73	1.52
%1	0	60	0	6.077	70.1	-0.0966666666666669
%1	5	65	0	6.042	67.4	-0.539999999999998
%1	10	70	0	6.064	69.9	0.5
%1	15	75	0	6.077	69.9	0
%1	20	80	0	6.091	68.8	-0.220000000000002
%1	25	85	0	6.019	67.3	-0.3
%1	30	90	0	6.033	67.7	0.0800000000000011
1	35	95	0	6.05	68	0.0599999999999994
1	40	100	0	6.073	67.4	-0.119999999999999
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; m=21.5; m=24.254; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -7.08003 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 22:53:49.870 NotebookApp] Saving file at /KNO3_pH6_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	45	105	0	2.086	75.5	1.62
%1	50	110	0	2.045	76.3	0.159999999999999
%1	55	115	0	2.04	79	0.540000000000001
%2	0	120	0	2.041	79.2	0.0400000000000006
%2	5	125	0	2.039	80.4	0.240000000000001
%2	10	130	0	2.04	82.2	0.359999999999999
%2	15	135	0	2.04	81.7	-0.1
%2	20	140	0	2.038	84	0.459999999999999
%2	25	145	0	2.037	82.9	-0.219999999999999
%2	30	150	0	2.037	83.5	0.119999999999999
%2	35	155	0	2.038	84.8	0.259999999999999
2	40	160	0	2.035	86.1	0.259999999999999
3	0	180	0	2.037	84.6	-0.075
%3	5	185	50	2.037	87.3	0.540000000000001
%3	8	188	50	2.036	91.2	1.3
%3	13	193	50	2.037	92.3	0.219999999999999
%3	18	198	50	2.032	92.8	0.1
%3	23	203	50	2.036	93.7	0.180000000000001
%3	28	208	50	2.035	93.3	-0.0800000000000011
%3	33	213	50	2.036	93.9	0.120000000000002
%3	38	218	50	2.037	95.4	0.3
%3	43	223	50	2.035	95.3	-0.0200000000000017
%3	48	228	50	2.035	96.3	0.2
%3	53	233	50	2.033	98.2	0.380000000000001
%3	58	238	50	2.036	98.2	0
4	3	243	50	2.032	98.2	0
4	8	248	50	2.034	98.6	0.0799999999999983
%4	10	250	150	2.036	100.5	0.950000000000003
%4	15	255	150	2.034	105.2	0.940000000000001
%4	20	260	150	2.036	105.6	0.0799999999999983
%4	25	265	150	2.034	107	0.280000000000001
%4	30	270	150	2.034	108	0.2
%4	35	275	150	2.032	108	0
4	40	280	150	2.032	107.8	-0.0400000000000006
4	45	285	150	2.031	107.7	-0.0199999999999989
%4	50	290	400	2.031	115	1.46
%4	55	295	400	2.031	115.9	0.180000000000001
%5	0	300	400	2.029	116.1	0.0399999999999977
5	5	305	400	2.032	116.5	0.0800000000000011
5	10	310	400	2.029	116	-0.1
%5	15	315	900	2.034	124.8	1.76
%5	20	320	900	2.037	125.3	0.1
%5	25	325	900	2.034	125.4	0.0200000000000017
5	30	330	900	2.037	125.5	0.0199999999999989
5	35	335	900	2.041	132.2	1.34
%5	40	340	1900	2.042	134	0.360000000000002
5	45	345	1900	2.042	133.5	-0.1
5	55	355	1900	2.041	134.2	0.0699999999999989
%6	0	360	3400	2.05	140.8	1.32
%6	5	365	3400	2.051	142.2	0.279999999999996
6	10	370	3400	2.05	140.8	-0.279999999999996
6	15	375	3400	2.054	142.2	0.279999999999996
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	5.992	49.4	
%0	5	5	0	6.002	55.7	1.26
%0	10	10	0	6.018	59.4	0.739999999999999
%0	15	15	0	6.033	62.5	0.62
%0	20	20	0	6.046	62.6	0.0200000000000003
%0	25	25	0	6.064	65.4	0.560000000000001
%0	30	30	0	6.054	73	1.52
%1	0	60	0	6.077	70.1	-0.0966666666666669
%1	5	65	0	6.042	67.4	-0.539999999999998
%1	10	70	0	6.064	69.9	0.5
%1	15	75	0	6.077	69.9	0
%1	20	80	0	6.091	68.8	-0.220000000000002
%1	25	85	0	6.019	67.3	-0.3
%1	30	90	0	6.033	67.7	0.0800000000000011
1	35	95	0	6.05	68	0.0599999999999994
1	40	100	0	6.073	67.4	-0.119999999999999
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=Emeas(1:2); Eorig=mVAoriginal; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -7.08003 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 22:55:49.917 NotebookApp] Saving file at /KNO3_pH6_0pt1uMCuT.ipynb
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -7.08003 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	45	105	0	2.086	75.5	1.62
%1	50	110	0	2.045	76.3	0.159999999999999
%1	55	115	0	2.04	79	0.540000000000001
%2	0	120	0	2.041	79.2	0.0400000000000006
%2	5	125	0	2.039	80.4	0.240000000000001
%2	10	130	0	2.04	82.2	0.359999999999999
%2	15	135	0	2.04	81.7	-0.1
%2	20	140	0	2.038	84	0.459999999999999
%2	25	145	0	2.037	82.9	-0.219999999999999
%2	30	150	0	2.037	83.5	0.119999999999999
%2	35	155	0	2.038	84.8	0.259999999999999
2	40	160	0	2.035	86.1	0.259999999999999
3	0	180	0	2.037	84.6	-0.075
%3	5	185	50	2.037	87.3	0.540000000000001
%3	8	188	50	2.036	91.2	1.3
%3	13	193	50	2.037	92.3	0.219999999999999
%3	18	198	50	2.032	92.8	0.1
%3	23	203	50	2.036	93.7	0.180000000000001
%3	28	208	50	2.035	93.3	-0.0800000000000011
%3	33	213	50	2.036	93.9	0.120000000000002
%3	38	218	50	2.037	95.4	0.3
%3	43	223	50	2.035	95.3	-0.0200000000000017
%3	48	228	50	2.035	96.3	0.2
%3	53	233	50	2.033	98.2	0.380000000000001
%3	58	238	50	2.036	98.2	0
4	3	243	50	2.032	98.2	0
4	8	248	50	2.034	98.6	0.0799999999999983
%4	10	250	150	2.036	100.5	0.950000000000003
%4	15	255	150	2.034	105.2	0.940000000000001
%4	20	260	150	2.036	105.6	0.0799999999999983
%4	25	265	150	2.034	107	0.280000000000001
%4	30	270	150	2.034	108	0.2
%4	35	275	150	2.032	108	0
4	40	280	150	2.032	107.8	-0.0400000000000006
4	45	285	150	2.031	107.7	-0.0199999999999989
%4	50	290	400	2.031	115	1.46
%4	55	295	400	2.031	115.9	0.180000000000001
%5	0	300	400	2.029	116.1	0.0399999999999977
5	5	305	400	2.032	116.5	0.0800000000000011
5	10	310	400	2.029	116	-0.1
%5	15	315	900	2.034	124.8	1.76
%5	20	320	900	2.037	125.3	0.1
%5	25	325	900	2.034	125.4	0.0200000000000017
5	30	330	900	2.037	125.5	0.0199999999999989
5	35	335	900	2.041	132.2	1.34
%5	40	340	1900	2.042	134	0.360000000000002
5	45	345	1900	2.042	133.5	-0.1
5	55	355	1900	2.041	134.2	0.0699999999999989
%6	0	360	3400	2.05	140.8	1.32
%6	5	365	3400	2.051	142.2	0.279999999999996
6	10	370	3400	2.05	140.8	-0.279999999999996
6	15	375	3400	2.054	142.2	0.279999999999996
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	5.992	49.4	
%0	5	5	0	6.002	55.7	1.26
%0	10	10	0	6.018	59.4	0.739999999999999
%0	15	15	0	6.033	62.5	0.62
%0	20	20	0	6.046	62.6	0.0200000000000003
%0	25	25	0	6.064	65.4	0.560000000000001
%0	30	30	0	6.054	73	1.52
%1	0	60	0	6.077	70.1	-0.0966666666666669
%1	5	65	0	6.042	67.4	-0.539999999999998
%1	10	70	0	6.064	69.9	0.5
%1	15	75	0	6.077	69.9	0
%1	20	80	0	6.091	68.8	-0.220000000000002
%1	25	85	0	6.019	67.3	-0.3
%1	30	90	0	6.033	67.7	0.0800000000000011
1	35	95	0	6.05	68	0.0599999999999994
1	40	100	0	6.073	67.4	-0.119999999999999
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mVAoriginal; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -7.08003 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	45	105	0	2.086	75.5	1.62
%1	50	110	0	2.045	76.3	0.159999999999999
%1	55	115	0	2.04	79	0.540000000000001
%2	0	120	0	2.041	79.2	0.0400000000000006
%2	5	125	0	2.039	80.4	0.240000000000001
%2	10	130	0	2.04	82.2	0.359999999999999
%2	15	135	0	2.04	81.7	-0.1
%2	20	140	0	2.038	84	0.459999999999999
%2	25	145	0	2.037	82.9	-0.219999999999999
%2	30	150	0	2.037	83.5	0.119999999999999
%2	35	155	0	2.038	84.8	0.259999999999999
2	40	160	0	2.035	86.1	0.259999999999999
3	0	180	0	2.037	84.6	-0.075
%3	5	185	50	2.037	87.3	0.540000000000001
%3	8	188	50	2.036	91.2	1.3
%3	13	193	50	2.037	92.3	0.219999999999999
%3	18	198	50	2.032	92.8	0.1
%3	23	203	50	2.036	93.7	0.180000000000001
%3	28	208	50	2.035	93.3	-0.0800000000000011
%3	33	213	50	2.036	93.9	0.120000000000002
%3	38	218	50	2.037	95.4	0.3
%3	43	223	50	2.035	95.3	-0.0200000000000017
%3	48	228	50	2.035	96.3	0.2
%3	53	233	50	2.033	98.2	0.380000000000001
%3	58	238	50	2.036	98.2	0
4	3	243	50	2.032	98.2	0
4	8	248	50	2.034	98.6	0.0799999999999983
%4	10	250	150	2.036	100.5	0.950000000000003
%4	15	255	150	2.034	105.2	0.940000000000001
%4	20	260	150	2.036	105.6	0.0799999999999983
%4	25	265	150	2.034	107	0.280000000000001
%4	30	270	150	2.034	108	0.2
%4	35	275	150	2.032	108	0
4	40	280	150	2.032	107.8	-0.0400000000000006
4	45	285	150	2.031	107.7	-0.0199999999999989
%4	50	290	400	2.031	115	1.46
%4	55	295	400	2.031	115.9	0.180000000000001
%5	0	300	400	2.029	116.1	0.0399999999999977
5	5	305	400	2.032	116.5	0.0800000000000011
5	10	310	400	2.029	116	-0.1
%5	15	315	900	2.034	124.8	1.76
%5	20	320	900	2.037	125.3	0.1
%5	25	325	900	2.034	125.4	0.0200000000000017
5	30	330	900	2.037	125.5	0.0199999999999989
5	35	335	900	2.041	132.2	1.34
%5	40	340	1900	2.042	134	0.360000000000002
5	45	345	1900	2.042	133.5	-0.1
5	55	355	1900	2.041	134.2	0.0699999999999989
%6	0	360	3400	2.05	140.8	1.32
%6	5	365	3400	2.051	142.2	0.279999999999996
6	10	370	3400	2.05	140.8	-0.279999999999996
6	15	375	3400	2.054	142.2	0.279999999999996
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	5.992	49.4	
%0	5	5	0	6.002	55.7	1.26
%0	10	10	0	6.018	59.4	0.739999999999999
%0	15	15	0	6.033	62.5	0.62
%0	20	20	0	6.046	62.6	0.0200000000000003
%0	25	25	0	6.064	65.4	0.560000000000001
%0	30	30	0	6.054	73	1.52
%1	0	60	0	6.077	70.1	-0.0966666666666669
%1	5	65	0	6.042	67.4	-0.539999999999998
%1	10	70	0	6.064	69.9	0.5
%1	15	75	0	6.077	69.9	0
%1	20	80	0	6.091	68.8	-0.220000000000002
%1	25	85	0	6.019	67.3	-0.3
%1	30	90	0	6.033	67.7	0.0800000000000011
1	35	95	0	6.05	68	0.0599999999999994
1	40	100	0	6.073	67.4	-0.119999999999999
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mean(mVAoriginal); m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -7.08003 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 22:57:49.966 NotebookApp] Saving file at /KNO3_pH6_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	45	105	0	2.086	75.5	1.62
%1	50	110	0	2.045	76.3	0.159999999999999
%1	55	115	0	2.04	79	0.540000000000001
%2	0	120	0	2.041	79.2	0.0400000000000006
%2	5	125	0	2.039	80.4	0.240000000000001
%2	10	130	0	2.04	82.2	0.359999999999999
%2	15	135	0	2.04	81.7	-0.1
%2	20	140	0	2.038	84	0.459999999999999
%2	25	145	0	2.037	82.9	-0.219999999999999
%2	30	150	0	2.037	83.5	0.119999999999999
%2	35	155	0	2.038	84.8	0.259999999999999
2	40	160	0	2.035	86.1	0.259999999999999
3	0	180	0	2.037	84.6	-0.075
%3	5	185	50	2.037	87.3	0.540000000000001
%3	8	188	50	2.036	91.2	1.3
%3	13	193	50	2.037	92.3	0.219999999999999
%3	18	198	50	2.032	92.8	0.1
%3	23	203	50	2.036	93.7	0.180000000000001
%3	28	208	50	2.035	93.3	-0.0800000000000011
%3	33	213	50	2.036	93.9	0.120000000000002
%3	38	218	50	2.037	95.4	0.3
%3	43	223	50	2.035	95.3	-0.0200000000000017
%3	48	228	50	2.035	96.3	0.2
%3	53	233	50	2.033	98.2	0.380000000000001
%3	58	238	50	2.036	98.2	0
4	3	243	50	2.032	98.2	0
4	8	248	50	2.034	98.6	0.0799999999999983
%4	10	250	150	2.036	100.5	0.950000000000003
%4	15	255	150	2.034	105.2	0.940000000000001
%4	20	260	150	2.036	105.6	0.0799999999999983
%4	25	265	150	2.034	107	0.280000000000001
%4	30	270	150	2.034	108	0.2
%4	35	275	150	2.032	108	0
4	40	280	150	2.032	107.8	-0.0400000000000006
4	45	285	150	2.031	107.7	-0.0199999999999989
%4	50	290	400	2.031	115	1.46
%4	55	295	400	2.031	115.9	0.180000000000001
%5	0	300	400	2.029	116.1	0.0399999999999977
5	5	305	400	2.032	116.5	0.0800000000000011
5	10	310	400	2.029	116	-0.1
%5	15	315	900	2.034	124.8	1.76
%5	20	320	900	2.037	125.3	0.1
%5	25	325	900	2.034	125.4	0.0200000000000017
5	30	330	900	2.037	125.5	0.0199999999999989
5	35	335	900	2.041	132.2	1.34
%5	40	340	1900	2.042	134	0.360000000000002
5	45	345	1900	2.042	133.5	-0.1
5	55	355	1900	2.041	134.2	0.0699999999999989
%6	0	360	3400	2.05	140.8	1.32
%6	5	365	3400	2.051	142.2	0.279999999999996
6	10	370	3400	2.05	140.8	-0.279999999999996
6	15	375	3400	2.054	142.2	0.279999999999996
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	5.992	49.4	
%0	5	5	0	6.002	55.7	1.26
%0	10	10	0	6.018	59.4	0.739999999999999
%0	15	15	0	6.033	62.5	0.62
%0	20	20	0	6.046	62.6	0.0200000000000003
%0	25	25	0	6.064	65.4	0.560000000000001
%0	30	30	0	6.054	73	1.52
%1	0	60	0	6.077	70.1	-0.0966666666666669
%1	5	65	0	6.042	67.4	-0.539999999999998
%1	10	70	0	6.064	69.9	0.5
%1	15	75	0	6.077	69.9	0
%1	20	80	0	6.091	68.8	-0.220000000000002
%1	25	85	0	6.019	67.3	-0.3
%1	30	90	0	6.033	67.7	0.0800000000000011
1	35	95	0	6.05	68	0.0599999999999994
1	40	100	0	6.073	67.4	-0.119999999999999
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mean(mVAoriginal); m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -7.08003 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 22:59:50.020 NotebookApp] Saving file at /KNO3_pH6_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	45	105	0	2.086	75.5	1.62
%1	50	110	0	2.045	76.3	0.159999999999999
%1	55	115	0	2.04	79	0.540000000000001
%2	0	120	0	2.041	79.2	0.0400000000000006
%2	5	125	0	2.039	80.4	0.240000000000001
%2	10	130	0	2.04	82.2	0.359999999999999
%2	15	135	0	2.04	81.7	-0.1
%2	20	140	0	2.038	84	0.459999999999999
%2	25	145	0	2.037	82.9	-0.219999999999999
%2	30	150	0	2.037	83.5	0.119999999999999
%2	35	155	0	2.038	84.8	0.259999999999999
2	40	160	0	2.035	86.1	0.259999999999999
3	0	180	0	2.037	84.6	-0.075
%3	5	185	50	2.037	87.3	0.540000000000001
%3	8	188	50	2.036	91.2	1.3
%3	13	193	50	2.037	92.3	0.219999999999999
%3	18	198	50	2.032	92.8	0.1
%3	23	203	50	2.036	93.7	0.180000000000001
%3	28	208	50	2.035	93.3	-0.0800000000000011
%3	33	213	50	2.036	93.9	0.120000000000002
%3	38	218	50	2.037	95.4	0.3
%3	43	223	50	2.035	95.3	-0.0200000000000017
%3	48	228	50	2.035	96.3	0.2
%3	53	233	50	2.033	98.2	0.380000000000001
%3	58	238	50	2.036	98.2	0
4	3	243	50	2.032	98.2	0
4	8	248	50	2.034	98.6	0.0799999999999983
%4	10	250	150	2.036	100.5	0.950000000000003
%4	15	255	150	2.034	105.2	0.940000000000001
%4	20	260	150	2.036	105.6	0.0799999999999983
%4	25	265	150	2.034	107	0.280000000000001
%4	30	270	150	2.034	108	0.2
%4	35	275	150	2.032	108	0
4	40	280	150	2.032	107.8	-0.0400000000000006
4	45	285	150	2.031	107.7	-0.0199999999999989
%4	50	290	400	2.031	115	1.46
%4	55	295	400	2.031	115.9	0.180000000000001
%5	0	300	400	2.029	116.1	0.0399999999999977
5	5	305	400	2.032	116.5	0.0800000000000011
5	10	310	400	2.029	116	-0.1
%5	15	315	900	2.034	124.8	1.76
%5	20	320	900	2.037	125.3	0.1
%5	25	325	900	2.034	125.4	0.0200000000000017
5	30	330	900	2.037	125.5	0.0199999999999989
5	35	335	900	2.041	132.2	1.34
%5	40	340	1900	2.042	134	0.360000000000002
5	45	345	1900	2.042	133.5	-0.1
5	55	355	1900	2.041	134.2	0.0699999999999989
%6	0	360	3400	2.05	140.8	1.32
%6	5	365	3400	2.051	142.2	0.279999999999996
6	10	370	3400	2.05	140.8	-0.279999999999996
6	15	375	3400	2.054	142.2	0.279999999999996
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	5.992	49.4	
%0	5	5	0	6.002	55.7	1.26
%0	10	10	0	6.018	59.4	0.739999999999999
%0	15	15	0	6.033	62.5	0.62
%0	20	20	0	6.046	62.6	0.0200000000000003
%0	25	25	0	6.064	65.4	0.560000000000001
%0	30	30	0	6.054	73	1.52
%1	0	60	0	6.077	70.1	-0.0966666666666669
%1	5	65	0	6.042	67.4	-0.539999999999998
%1	10	70	0	6.064	69.9	0.5
%1	15	75	0	6.077	69.9	0
%1	20	80	0	6.091	68.8	-0.220000000000002
%1	25	85	0	6.019	67.3	-0.3
%1	30	90	0	6.033	67.7	0.0800000000000011
1	35	95	0	6.05	68	0.0599999999999994
1	40	100	0	6.073	67.4	-0.119999999999999
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mean(mVAoriginal); m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -7.08003 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 23:01:50.067 NotebookApp] Saving file at /KNO3_pH6_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
2	47	167	50	2	91	-0.08
2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(5:end)),Emeas(5:end),1)
paramlinear=polyfit(log10(CuTplus(5:end)),Emeas(5:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=79.3; Eorig=-26.4; m=21.5; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[I 23:03:45.400 NotebookApp] Saving file at /KNO3_pH9pt5_1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	"cumulative vol added"	pH	mvA	delta
% 1	30	90	0	2.029	73.3	9.97
% 1	35	95	0	2.023	73.4	0.02
% 1	40	100	0	2.022	76.8	0.68
% 1	45	105	0	2.002	77.8	0.2
% 1	55	115	0	2.004	74.9	-0.29
% 2	5	125	0	2.002	74.5	-0.04
%2	10	130	0	2.002	74.6	0.02
2	15	135	0	2.002	74.8	0.04
2	17	137	0	2.002	79.3	2.25
% 2	22	142	50	2.002	90	2.14
% 2	27	147	50	2.001	93.5	0.7
% 2	32	152	50	2.002	96.3	0.56
% 2	37	157	50	2.001	95.8	-0.1
%2	42	162	50	2.002	91.4	-0.88
2	47	167	50	2	91	-0.08
2	52	172	50	2.001	90.6	-0.08
% 2	57	177	150	2.000	90.6	0
% 2	58	178	150	2.001	94.4	3.8
% 3	3	183	150	2.002	100	1.12
% 3	8	188	150	2	101.3	0.26
% 3	13	193	150	2.001	107.5	1.24
% 3	18	198	150	2	108.7	0.24
% 3	23	203	150	2.002	108.6	-0.02
%3	28	208	150	2.001	109	0.08
%3	33	213	150	2	108.8	-0.04
3	38	218	150	2.001	108.4	-0.08
% 3	43	223	400	1.999	108.4	0
% 3	44	224	400	2.001	114.1	5.7
% 3	49	229	400	2.003	118.4	0.86
% 3	54	234	400	2.001	118.2	-0.04
%3	59	239	400	2.002	118	-0.04
4	4	244	400	2.002	118.4	0.08
% 4	5	245	900	2.005	122.1	3.7
% 4	10	250	900	2.005	126.6	0.9
% 4	15	255	900	2.005	128	0.28
%4	20	260	900	2.005	128.5	0.1
%4	25	265	900	2.006	128.2	-0.06
4	30	270	900	2.004	127.8	-0.08
% 4	31	271	1900	2.011	133	5.2
% 4	36	276	1900	2.012	136.5	0.7
% 4	41	281	1900	2.011	137.2	0.14
% 4	46	286	1900	2.011	137.4	0.04
%4	51	291	1900	2.01	136.8	-0.12
4	56	296	1900	2.011	137.2	0.08
% 5	1	301	3400	2.011	136.8	-0.08
% 5	3	303	3400	2.02	142.5	2.85
% 5	8	308	3400	2.022	143.2	0.14
% 5	13	313	3400	2.021	143.4	0.04
% 5	18	318	3400	2.022	143.1	-0.06
% 5	23	323	3400	2.021	142	-0.22
% 5	28	328	3400	2.021	142.4	0.08
% 5	33	333	3400	2.021	142	-0.08
%5	38	338	3400	2.019	141.1	-0.18
5	43	343	3400	2.019	142.2	0.22
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative vol added	pH	mvA	delta	mVB	deltaB	comments
% 0	0	0	0	9.625	60.9	
% 0	5	5	0	9.657	47.3	-2.72
% 0	15	15	0	9.574	-34.7	-8.2
% 0	20	20	0	9.643	-33	0.34
% 0	25	25	0	9.256	-19	2.8
% 0	30	30	0	9.54	-29.6	-2.12
% 0	35	35	0	9.537	-28.8	0.16
% 0	40	40	0	9.54	-28.4	0.08
% 0	45	45	0	9.532	-27	0.28
% 0	50	50	0	9.527	-27.6	-0.12
% 0	55	55	0	9.517	-27.7	-0.02
% 1	0	60	0	9.512	-27.7	0
% 1	5	65	0	9.502	-26.2	0.3
%1	10	70	0	9.501	-26.3	-0.02
%1	15	75	0	9.486	-26.5	-0.04
1	20	80	0	9.482	-26.4	0.02
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(5:end)),Emeas(5:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=79.3; Eorig=-26.4; m=21.5; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[W 23:05:01.706 NotebookApp] 404 GET /api/contents/KNO3_pH6_1uMCuT.ipynb?1691017501700 (172.24.0.1): file or directory does not exist: 'KNO3_pH6_1uMCuT.ipynb'
[W 23:05:01.706 NotebookApp] file or directory does not exist: 'KNO3_pH6_1uMCuT.ipynb'
[W 23:05:01.707 NotebookApp] 404 GET /api/contents/KNO3_pH6_1uMCuT.ipynb?1691017501700 (172.24.0.1) 2.070000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/KNO3_pH9pt5_1uMCuT.ipynb
[W 23:05:01.731 NotebookApp] 404 GET /api/contents/KNO3_pH6_1uMCuT.ipynb?content=0&1691017501726 (172.24.0.1): file or directory does not exist: 'KNO3_pH6_1uMCuT.ipynb'
[W 23:05:01.731 NotebookApp] file or directory does not exist: 'KNO3_pH6_1uMCuT.ipynb'
[W 23:05:01.732 NotebookApp] 404 GET /api/contents/KNO3_pH6_1uMCuT.ipynb?content=0&1691017501726 (172.24.0.1) 2.350000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/KNO3_pH9pt5_1uMCuT.ipynb
[I 23:05:01.744 NotebookApp] Uploading file to /KNO3_pH6_1uMCuT.ipynb
[W 23:05:01.774 NotebookApp] 409 PATCH /api/contents/KNO3_pH6_1uMCuT.ipynb?1691017501768 (172.24.0.1): File already exists: KNO3_pH9pt5_1uMCuT.ipynb
[W 23:05:01.775 NotebookApp] File already exists: KNO3_pH9pt5_1uMCuT.ipynb
[W 23:05:01.775 NotebookApp] 409 PATCH /api/contents/KNO3_pH6_1uMCuT.ipynb?1691017501768 (172.24.0.1) 2.560000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/KNO3_pH9pt5_1uMCuT.ipynb
[I 23:07:01.790 NotebookApp] Saving file at /KNO3_pH6_1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	35	35	0	2.06	88.3	0.159999999999999
%0	40	40	0	2.053	88.3	0
%0	45	45	0	2.056	89.2	0.180000000000001
%0	50	50	0	2.055	88.9	-0.0599999999999994
%0	55	55	0	2.056	89.2	0.0599999999999994
1	0	60	0	2.056	91	0.359999999999999
1	18	78	0	2.056	87.5	-0.194444444444444
%1	19	79	50	2.058	87.4	-0.0999999999999943
%1	25	85	50	2.054	93.1	0.949999999999998
%1	30	90	50	2.057	96.3	0.640000000000001
%1	35	95	50	2.054	94.7	-0.319999999999999
%1	40	100	50	2.056	97	0.459999999999999
%1	45	105	50	2.052	97.6	0.119999999999999
%1	55	115	50	2.049	97.4	-0.0199999999999989
%2	0	120	50	2.053	98	0.119999999999999
%2	5	125	50	2.053	99.4	0.280000000000001
%2	10	130	50	2.044	98.4	-0.2
%2	15	135	50	2.045	97.6	-0.160000000000002
2	20	140	50	2.042	97.4	-0.0399999999999977
2	25	145	50	2.018	97.7	0.0599999999999994
%2	30	147	150	2.019	98.2	0.25
%2	32	152	150	2.016	103	0.959999999999999
%2	37	157	150	2.018	104	0.2
%2	42	162	150	2.015	105.1	0.219999999999999
%2	47	167	150	2.014	104.5	-0.119999999999999
%2	52	172	150	2.014	103.5	-0.2
%2	57	177	150	2.011	104	0.1
%3	2	182	150	2.011	106.3	0.459999999999999
%3	7	187	150	2.009	105.5	-0.159999999999999
%3	12	192	150	2.01	107	0.3
%3	17	197	150	2.009	106.5	-0.1
3	22	202	150	2.009	106.4	-0.0199999999999989
3	27	207	150	2.011	106.6	0.0399999999999977
%3	30	210	400	2.011	111	1.46666666666667
%3	35	215	400	2.011	114.9	0.780000000000001
%3	40	220	400	2.012	115.2	0.0599999999999994
%3	50	230	400	2.01	117.8	0.259999999999999
%3	55	235	400	2.01	118.3	0.1
%4	0	240	400	2.009	118.5	0.0400000000000006
%4	5	245	400	2.009	118.7	0.0400000000000006
%4	10	250	400	2.008	117.1	-0.320000000000002
%4	15	255	400	2.008	118	0.180000000000001
4	20	260	400	2.008	116.7	-0.259999999999999
4	25	265	400	2.007	116.6	-0.0200000000000017
%4	27	267	900	2.011	119	1.2
%4	32	272	900	2.011	123.7	0.940000000000001
%4	37	277	900	2.01	124.7	0.2
%4	42	282	900	2.011	126.2	0.3
%4	47	287	900	2.011	126.1	-0.0200000000000017
4	52	292	900	2.01	126.3	0.0400000000000006
4	57	297	900	2.011	126.2	-0.0199999999999989
%5	0	300	1900	2.018	131.8	1.86666666666667
%5	5	305	1900	2.017	134.3	0.5
%5	10	310	1900	2.018	135.6	0.259999999999997
%5	15	315	1900	2.018	134.7	-0.180000000000001
%5	20	320	1900	2.018	135.4	0.140000000000003
%5	25	325	1900	2.019	135	-0.0800000000000011
%5	30	330	1900	2.018	136.4	0.280000000000001
5	35	335	1900	2.018	136.5	0.0199999999999989
5	40	340	1900	2.018	135.5	-0.2
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	6.097	57.3	
%0	5	5	0	6.051	80.8	4.7
%0	10	10	0	6.071	83.8	0.6
%0	15	15	0	6.093	87.7	0.780000000000001
%0	20	20	0	6.101	87.7	0
0	25	25	0	6.079	87.8	0.0199999999999989
0	30	30	0	6.095	87.5	-0.0599999999999994
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(5:end)),Emeas(5:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=79.3; Eorig=-26.4; m=21.5; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	35	35	0	2.06	88.3	0.159999999999999
%0	40	40	0	2.053	88.3	0
%0	45	45	0	2.056	89.2	0.180000000000001
%0	50	50	0	2.055	88.9	-0.0599999999999994
%0	55	55	0	2.056	89.2	0.0599999999999994
1	0	60	0	2.056	91	0.359999999999999
1	18	78	0	2.056	87.5	-0.194444444444444
%1	19	79	50	2.058	87.4	-0.0999999999999943
%1	25	85	50	2.054	93.1	0.949999999999998
%1	30	90	50	2.057	96.3	0.640000000000001
%1	35	95	50	2.054	94.7	-0.319999999999999
%1	40	100	50	2.056	97	0.459999999999999
%1	45	105	50	2.052	97.6	0.119999999999999
%1	55	115	50	2.049	97.4	-0.0199999999999989
%2	0	120	50	2.053	98	0.119999999999999
%2	5	125	50	2.053	99.4	0.280000000000001
%2	10	130	50	2.044	98.4	-0.2
%2	15	135	50	2.045	97.6	-0.160000000000002
2	20	140	50	2.042	97.4	-0.0399999999999977
2	25	145	50	2.018	97.7	0.0599999999999994
%2	30	147	150	2.019	98.2	0.25
%2	32	152	150	2.016	103	0.959999999999999
%2	37	157	150	2.018	104	0.2
%2	42	162	150	2.015	105.1	0.219999999999999
%2	47	167	150	2.014	104.5	-0.119999999999999
%2	52	172	150	2.014	103.5	-0.2
%2	57	177	150	2.011	104	0.1
%3	2	182	150	2.011	106.3	0.459999999999999
%3	7	187	150	2.009	105.5	-0.159999999999999
%3	12	192	150	2.01	107	0.3
%3	17	197	150	2.009	106.5	-0.1
3	22	202	150	2.009	106.4	-0.0199999999999989
3	27	207	150	2.011	106.6	0.0399999999999977
%3	30	210	400	2.011	111	1.46666666666667
%3	35	215	400	2.011	114.9	0.780000000000001
%3	40	220	400	2.012	115.2	0.0599999999999994
%3	50	230	400	2.01	117.8	0.259999999999999
%3	55	235	400	2.01	118.3	0.1
%4	0	240	400	2.009	118.5	0.0400000000000006
%4	5	245	400	2.009	118.7	0.0400000000000006
%4	10	250	400	2.008	117.1	-0.320000000000002
%4	15	255	400	2.008	118	0.180000000000001
4	20	260	400	2.008	116.7	-0.259999999999999
4	25	265	400	2.007	116.6	-0.0200000000000017
%4	27	267	900	2.011	119	1.2
%4	32	272	900	2.011	123.7	0.940000000000001
%4	37	277	900	2.01	124.7	0.2
%4	42	282	900	2.011	126.2	0.3
%4	47	287	900	2.011	126.1	-0.0200000000000017
4	52	292	900	2.01	126.3	0.0400000000000006
4	57	297	900	2.011	126.2	-0.0199999999999989
%5	0	300	1900	2.018	131.8	1.86666666666667
%5	5	305	1900	2.017	134.3	0.5
%5	10	310	1900	2.018	135.6	0.259999999999997
%5	15	315	1900	2.018	134.7	-0.180000000000001
%5	20	320	1900	2.018	135.4	0.140000000000003
%5	25	325	1900	2.019	135	-0.0800000000000011
%5	30	330	1900	2.018	136.4	0.280000000000001
5	35	335	1900	2.018	136.5	0.0199999999999989
5	40	340	1900	2.018	135.5	-0.2
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	6.097	57.3	
%0	5	5	0	6.051	80.8	4.7
%0	10	10	0	6.071	83.8	0.6
%0	15	15	0	6.093	87.7	0.780000000000001
%0	20	20	0	6.101	87.7	0
0	25	25	0	6.079	87.8	0.0199999999999989
0	30	30	0	6.095	87.5	-0.0599999999999994
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(5:end)),Emeas(5:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mean(mVAoriginal); m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	35	35	0	2.06	88.3	0.159999999999999
%0	40	40	0	2.053	88.3	0
%0	45	45	0	2.056	89.2	0.180000000000001
%0	50	50	0	2.055	88.9	-0.0599999999999994
%0	55	55	0	2.056	89.2	0.0599999999999994
1	0	60	0	2.056	91	0.359999999999999
1	18	78	0	2.056	87.5	-0.194444444444444
%1	19	79	50	2.058	87.4	-0.0999999999999943
%1	25	85	50	2.054	93.1	0.949999999999998
%1	30	90	50	2.057	96.3	0.640000000000001
%1	35	95	50	2.054	94.7	-0.319999999999999
%1	40	100	50	2.056	97	0.459999999999999
%1	45	105	50	2.052	97.6	0.119999999999999
%1	55	115	50	2.049	97.4	-0.0199999999999989
%2	0	120	50	2.053	98	0.119999999999999
%2	5	125	50	2.053	99.4	0.280000000000001
%2	10	130	50	2.044	98.4	-0.2
%2	15	135	50	2.045	97.6	-0.160000000000002
2	20	140	50	2.042	97.4	-0.0399999999999977
2	25	145	50	2.018	97.7	0.0599999999999994
%2	30	147	150	2.019	98.2	0.25
%2	32	152	150	2.016	103	0.959999999999999
%2	37	157	150	2.018	104	0.2
%2	42	162	150	2.015	105.1	0.219999999999999
%2	47	167	150	2.014	104.5	-0.119999999999999
%2	52	172	150	2.014	103.5	-0.2
%2	57	177	150	2.011	104	0.1
%3	2	182	150	2.011	106.3	0.459999999999999
%3	7	187	150	2.009	105.5	-0.159999999999999
%3	12	192	150	2.01	107	0.3
%3	17	197	150	2.009	106.5	-0.1
3	22	202	150	2.009	106.4	-0.0199999999999989
3	27	207	150	2.011	106.6	0.0399999999999977
%3	30	210	400	2.011	111	1.46666666666667
%3	35	215	400	2.011	114.9	0.780000000000001
%3	40	220	400	2.012	115.2	0.0599999999999994
%3	50	230	400	2.01	117.8	0.259999999999999
%3	55	235	400	2.01	118.3	0.1
%4	0	240	400	2.009	118.5	0.0400000000000006
%4	5	245	400	2.009	118.7	0.0400000000000006
%4	10	250	400	2.008	117.1	-0.320000000000002
%4	15	255	400	2.008	118	0.180000000000001
4	20	260	400	2.008	116.7	-0.259999999999999
4	25	265	400	2.007	116.6	-0.0200000000000017
%4	27	267	900	2.011	119	1.2
%4	32	272	900	2.011	123.7	0.940000000000001
%4	37	277	900	2.01	124.7	0.2
%4	42	282	900	2.011	126.2	0.3
%4	47	287	900	2.011	126.1	-0.0200000000000017
4	52	292	900	2.01	126.3	0.0400000000000006
4	57	297	900	2.011	126.2	-0.0199999999999989
%5	0	300	1900	2.018	131.8	1.86666666666667
%5	5	305	1900	2.017	134.3	0.5
%5	10	310	1900	2.018	135.6	0.259999999999997
%5	15	315	1900	2.018	134.7	-0.180000000000001
%5	20	320	1900	2.018	135.4	0.140000000000003
%5	25	325	1900	2.019	135	-0.0800000000000011
%5	30	330	1900	2.018	136.4	0.280000000000001
5	35	335	1900	2.018	136.5	0.0199999999999989
5	40	340	1900	2.018	135.5	-0.2
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	6.097	57.3	
%0	5	5	0	6.051	80.8	4.7
%0	10	10	0	6.071	83.8	0.6
%0	15	15	0	6.093	87.7	0.780000000000001
%0	20	20	0	6.101	87.7	0
0	25	25	0	6.079	87.8	0.0199999999999989
0	30	30	0	6.095	87.5	-0.0599999999999994
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mean(mVAoriginal); m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=9.4897; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -11.0185 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[I 23:09:01.849 NotebookApp] Saving file at /KNO3_pH6_1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	35	35	0	2.06	88.3	0.159999999999999
%0	40	40	0	2.053	88.3	0
%0	45	45	0	2.056	89.2	0.180000000000001
%0	50	50	0	2.055	88.9	-0.0599999999999994
%0	55	55	0	2.056	89.2	0.0599999999999994
1	0	60	0	2.056	91	0.359999999999999
1	18	78	0	2.056	87.5	-0.194444444444444
%1	19	79	50	2.058	87.4	-0.0999999999999943
%1	25	85	50	2.054	93.1	0.949999999999998
%1	30	90	50	2.057	96.3	0.640000000000001
%1	35	95	50	2.054	94.7	-0.319999999999999
%1	40	100	50	2.056	97	0.459999999999999
%1	45	105	50	2.052	97.6	0.119999999999999
%1	55	115	50	2.049	97.4	-0.0199999999999989
%2	0	120	50	2.053	98	0.119999999999999
%2	5	125	50	2.053	99.4	0.280000000000001
%2	10	130	50	2.044	98.4	-0.2
%2	15	135	50	2.045	97.6	-0.160000000000002
2	20	140	50	2.042	97.4	-0.0399999999999977
2	25	145	50	2.018	97.7	0.0599999999999994
%2	30	147	150	2.019	98.2	0.25
%2	32	152	150	2.016	103	0.959999999999999
%2	37	157	150	2.018	104	0.2
%2	42	162	150	2.015	105.1	0.219999999999999
%2	47	167	150	2.014	104.5	-0.119999999999999
%2	52	172	150	2.014	103.5	-0.2
%2	57	177	150	2.011	104	0.1
%3	2	182	150	2.011	106.3	0.459999999999999
%3	7	187	150	2.009	105.5	-0.159999999999999
%3	12	192	150	2.01	107	0.3
%3	17	197	150	2.009	106.5	-0.1
3	22	202	150	2.009	106.4	-0.0199999999999989
3	27	207	150	2.011	106.6	0.0399999999999977
%3	30	210	400	2.011	111	1.46666666666667
%3	35	215	400	2.011	114.9	0.780000000000001
%3	40	220	400	2.012	115.2	0.0599999999999994
%3	50	230	400	2.01	117.8	0.259999999999999
%3	55	235	400	2.01	118.3	0.1
%4	0	240	400	2.009	118.5	0.0400000000000006
%4	5	245	400	2.009	118.7	0.0400000000000006
%4	10	250	400	2.008	117.1	-0.320000000000002
%4	15	255	400	2.008	118	0.180000000000001
4	20	260	400	2.008	116.7	-0.259999999999999
4	25	265	400	2.007	116.6	-0.0200000000000017
%4	27	267	900	2.011	119	1.2
%4	32	272	900	2.011	123.7	0.940000000000001
%4	37	277	900	2.01	124.7	0.2
%4	42	282	900	2.011	126.2	0.3
%4	47	287	900	2.011	126.1	-0.0200000000000017
4	52	292	900	2.01	126.3	0.0400000000000006
4	57	297	900	2.011	126.2	-0.0199999999999989
%5	0	300	1900	2.018	131.8	1.86666666666667
%5	5	305	1900	2.017	134.3	0.5
%5	10	310	1900	2.018	135.6	0.259999999999997
%5	15	315	1900	2.018	134.7	-0.180000000000001
%5	20	320	1900	2.018	135.4	0.140000000000003
%5	25	325	1900	2.019	135	-0.0800000000000011
%5	30	330	1900	2.018	136.4	0.280000000000001
5	35	335	1900	2.018	136.5	0.0199999999999989
5	40	340	1900	2.018	135.5	-0.2
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	6.097	57.3	
%0	5	5	0	6.051	80.8	4.7
%0	10	10	0	6.071	83.8	0.6
%0	15	15	0	6.093	87.7	0.780000000000001
%0	20	20	0	6.101	87.7	0
0	25	25	0	6.079	87.8	0.0199999999999989
0	30	30	0	6.095	87.5	-0.0599999999999994
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mean(mVAoriginal); m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -6.04294 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	35	35	0	2.06	88.3	0.159999999999999
%0	40	40	0	2.053	88.3	0
%0	45	45	0	2.056	89.2	0.180000000000001
%0	50	50	0	2.055	88.9	-0.0599999999999994
%0	55	55	0	2.056	89.2	0.0599999999999994
%1	0	60	0	2.056	91	0.359999999999999
1	18	78	0	2.056	87.5	-0.194444444444444
%1	19	79	50	2.058	87.4	-0.0999999999999943
%1	25	85	50	2.054	93.1	0.949999999999998
%1	30	90	50	2.057	96.3	0.640000000000001
%1	35	95	50	2.054	94.7	-0.319999999999999
%1	40	100	50	2.056	97	0.459999999999999
%1	45	105	50	2.052	97.6	0.119999999999999
%1	55	115	50	2.049	97.4	-0.0199999999999989
%2	0	120	50	2.053	98	0.119999999999999
%2	5	125	50	2.053	99.4	0.280000000000001
%2	10	130	50	2.044	98.4	-0.2
%2	15	135	50	2.045	97.6	-0.160000000000002
2	20	140	50	2.042	97.4	-0.0399999999999977
2	25	145	50	2.018	97.7	0.0599999999999994
%2	30	147	150	2.019	98.2	0.25
%2	32	152	150	2.016	103	0.959999999999999
%2	37	157	150	2.018	104	0.2
%2	42	162	150	2.015	105.1	0.219999999999999
%2	47	167	150	2.014	104.5	-0.119999999999999
%2	52	172	150	2.014	103.5	-0.2
%2	57	177	150	2.011	104	0.1
%3	2	182	150	2.011	106.3	0.459999999999999
%3	7	187	150	2.009	105.5	-0.159999999999999
%3	12	192	150	2.01	107	0.3
%3	17	197	150	2.009	106.5	-0.1
3	22	202	150	2.009	106.4	-0.0199999999999989
3	27	207	150	2.011	106.6	0.0399999999999977
%3	30	210	400	2.011	111	1.46666666666667
%3	35	215	400	2.011	114.9	0.780000000000001
%3	40	220	400	2.012	115.2	0.0599999999999994
%3	50	230	400	2.01	117.8	0.259999999999999
%3	55	235	400	2.01	118.3	0.1
%4	0	240	400	2.009	118.5	0.0400000000000006
%4	5	245	400	2.009	118.7	0.0400000000000006
%4	10	250	400	2.008	117.1	-0.320000000000002
%4	15	255	400	2.008	118	0.180000000000001
4	20	260	400	2.008	116.7	-0.259999999999999
4	25	265	400	2.007	116.6	-0.0200000000000017
%4	27	267	900	2.011	119	1.2
%4	32	272	900	2.011	123.7	0.940000000000001
%4	37	277	900	2.01	124.7	0.2
%4	42	282	900	2.011	126.2	0.3
%4	47	287	900	2.011	126.1	-0.0200000000000017
4	52	292	900	2.01	126.3	0.0400000000000006
4	57	297	900	2.011	126.2	-0.0199999999999989
%5	0	300	1900	2.018	131.8	1.86666666666667
%5	5	305	1900	2.017	134.3	0.5
%5	10	310	1900	2.018	135.6	0.259999999999997
%5	15	315	1900	2.018	134.7	-0.180000000000001
%5	20	320	1900	2.018	135.4	0.140000000000003
%5	25	325	1900	2.019	135	-0.0800000000000011
%5	30	330	1900	2.018	136.4	0.280000000000001
5	35	335	1900	2.018	136.5	0.0199999999999989
5	40	340	1900	2.018	135.5	-0.2
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	6.097	57.3	
%0	5	5	0	6.051	80.8	4.7
%0	10	10	0	6.071	83.8	0.6
%0	15	15	0	6.093	87.7	0.780000000000001
%0	20	20	0	6.101	87.7	0
0	25	25	0	6.079	87.8	0.0199999999999989
0	30	30	0	6.095	87.5	-0.0599999999999994
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mean(mVAoriginal); m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -6.04294 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	35	35	0	2.06	88.3	0.159999999999999
%0	40	40	0	2.053	88.3	0
%0	45	45	0	2.056	89.2	0.180000000000001
%0	50	50	0	2.055	88.9	-0.0599999999999994
%0	55	55	0	2.056	89.2	0.0599999999999994
%1	0	60	0	2.056	91	0.359999999999999
1	18	78	0	2.056	87.5	-0.194444444444444
%1	19	79	50	2.058	87.4	-0.0999999999999943
%1	25	85	50	2.054	93.1	0.949999999999998
%1	30	90	50	2.057	96.3	0.640000000000001
%1	35	95	50	2.054	94.7	-0.319999999999999
%1	40	100	50	2.056	97	0.459999999999999
%1	45	105	50	2.052	97.6	0.119999999999999
%1	55	115	50	2.049	97.4	-0.0199999999999989
%2	0	120	50	2.053	98	0.119999999999999
%2	5	125	50	2.053	99.4	0.280000000000001
%2	10	130	50	2.044	98.4	-0.2
%2	15	135	50	2.045	97.6	-0.160000000000002
2	20	140	50	2.042	97.4	-0.0399999999999977
2	25	145	50	2.018	97.7	0.0599999999999994
%2	30	147	150	2.019	98.2	0.25
%2	32	152	150	2.016	103	0.959999999999999
%2	37	157	150	2.018	104	0.2
%2	42	162	150	2.015	105.1	0.219999999999999
%2	47	167	150	2.014	104.5	-0.119999999999999
%2	52	172	150	2.014	103.5	-0.2
%2	57	177	150	2.011	104	0.1
%3	2	182	150	2.011	106.3	0.459999999999999
%3	7	187	150	2.009	105.5	-0.159999999999999
%3	12	192	150	2.01	107	0.3
%3	17	197	150	2.009	106.5	-0.1
3	22	202	150	2.009	106.4	-0.0199999999999989
3	27	207	150	2.011	106.6	0.0399999999999977
%3	30	210	400	2.011	111	1.46666666666667
%3	35	215	400	2.011	114.9	0.780000000000001
%3	40	220	400	2.012	115.2	0.0599999999999994
%3	50	230	400	2.01	117.8	0.259999999999999
%3	55	235	400	2.01	118.3	0.1
%4	0	240	400	2.009	118.5	0.0400000000000006
%4	5	245	400	2.009	118.7	0.0400000000000006
%4	10	250	400	2.008	117.1	-0.320000000000002
%4	15	255	400	2.008	118	0.180000000000001
4	20	260	400	2.008	116.7	-0.259999999999999
4	25	265	400	2.007	116.6	-0.0200000000000017
%4	27	267	900	2.011	119	1.2
%4	32	272	900	2.011	123.7	0.940000000000001
%4	37	277	900	2.01	124.7	0.2
%4	42	282	900	2.011	126.2	0.3
%4	47	287	900	2.011	126.1	-0.0200000000000017
4	52	292	900	2.01	126.3	0.0400000000000006
4	57	297	900	2.011	126.2	-0.0199999999999989
%5	0	300	1900	2.018	131.8	1.86666666666667
%5	5	305	1900	2.017	134.3	0.5
%5	10	310	1900	2.018	135.6	0.259999999999997
%5	15	315	1900	2.018	134.7	-0.180000000000001
%5	20	320	1900	2.018	135.4	0.140000000000003
%5	25	325	1900	2.019	135	-0.0800000000000011
%5	30	330	1900	2.018	136.4	0.280000000000001
5	35	335	1900	2.018	136.5	0.0199999999999989
5	40	340	1900	2.018	135.5	-0.2
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	6.097	57.3	
%0	5	5	0	6.051	80.8	4.7
%0	10	10	0	6.071	83.8	0.6
%0	15	15	0	6.093	87.7	0.780000000000001
%0	20	20	0	6.101	87.7	0
0	25	25	0	6.079	87.8	0.0199999999999989
0	30	30	0	6.095	87.5	-0.0599999999999994
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
paramlinear=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mean(mVAoriginal); m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -6.04294 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[I 23:11:01.923 NotebookApp] Saving file at /KNO3_pH6_1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	35	35	0	2.06	88.3	0.159999999999999
%0	40	40	0	2.053	88.3	0
%0	45	45	0	2.056	89.2	0.180000000000001
%0	50	50	0	2.055	88.9	-0.0599999999999994
%0	55	55	0	2.056	89.2	0.0599999999999994
%1	0	60	0	2.056	91	0.359999999999999
1	18	78	0	2.056	87.5	-0.194444444444444
%1	19	79	50	2.058	87.4	-0.0999999999999943
%1	25	85	50	2.054	93.1	0.949999999999998
%1	30	90	50	2.057	96.3	0.640000000000001
%1	35	95	50	2.054	94.7	-0.319999999999999
%1	40	100	50	2.056	97	0.459999999999999
%1	45	105	50	2.052	97.6	0.119999999999999
%1	55	115	50	2.049	97.4	-0.0199999999999989
%2	0	120	50	2.053	98	0.119999999999999
%2	5	125	50	2.053	99.4	0.280000000000001
%2	10	130	50	2.044	98.4	-0.2
%2	15	135	50	2.045	97.6	-0.160000000000002
2	20	140	50	2.042	97.4	-0.0399999999999977
2	25	145	50	2.018	97.7	0.0599999999999994
%2	30	147	150	2.019	98.2	0.25
%2	32	152	150	2.016	103	0.959999999999999
%2	37	157	150	2.018	104	0.2
%2	42	162	150	2.015	105.1	0.219999999999999
%2	47	167	150	2.014	104.5	-0.119999999999999
%2	52	172	150	2.014	103.5	-0.2
%2	57	177	150	2.011	104	0.1
%3	2	182	150	2.011	106.3	0.459999999999999
%3	7	187	150	2.009	105.5	-0.159999999999999
%3	12	192	150	2.01	107	0.3
%3	17	197	150	2.009	106.5	-0.1
3	22	202	150	2.009	106.4	-0.0199999999999989
3	27	207	150	2.011	106.6	0.0399999999999977
%3	30	210	400	2.011	111	1.46666666666667
%3	35	215	400	2.011	114.9	0.780000000000001
%3	40	220	400	2.012	115.2	0.0599999999999994
%3	50	230	400	2.01	117.8	0.259999999999999
%3	55	235	400	2.01	118.3	0.1
%4	0	240	400	2.009	118.5	0.0400000000000006
%4	5	245	400	2.009	118.7	0.0400000000000006
%4	10	250	400	2.008	117.1	-0.320000000000002
%4	15	255	400	2.008	118	0.180000000000001
4	20	260	400	2.008	116.7	-0.259999999999999
4	25	265	400	2.007	116.6	-0.0200000000000017
%4	27	267	900	2.011	119	1.2
%4	32	272	900	2.011	123.7	0.940000000000001
%4	37	277	900	2.01	124.7	0.2
%4	42	282	900	2.011	126.2	0.3
%4	47	287	900	2.011	126.1	-0.0200000000000017
4	52	292	900	2.01	126.3	0.0400000000000006
4	57	297	900	2.011	126.2	-0.0199999999999989
%5	0	300	1900	2.018	131.8	1.86666666666667
%5	5	305	1900	2.017	134.3	0.5
%5	10	310	1900	2.018	135.6	0.259999999999997
%5	15	315	1900	2.018	134.7	-0.180000000000001
%5	20	320	1900	2.018	135.4	0.140000000000003
%5	25	325	1900	2.019	135	-0.0800000000000011
%5	30	330	1900	2.018	136.4	0.280000000000001
5	35	335	1900	2.018	136.5	0.0199999999999989
5	40	340	1900	2.018	135.5	-0.2
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	6.097	57.3	
%0	5	5	0	6.051	80.8	4.7
%0	10	10	0	6.071	83.8	0.6
%0	15	15	0	6.093	87.7	0.780000000000001
%0	20	20	0	6.101	87.7	0
0	25	25	0	6.079	87.8	0.0199999999999989
0	30	30	0	6.095	87.5	-0.0599999999999994
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
paramlinear=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mean(mVAoriginal); m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -7.04294 50 0.253456 35.7873

list
string: Total Cu
 -6.91521 40 0.230415 26.2927

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	35	35	0	2.06	88.3	0.159999999999999
%0	40	40	0	2.053	88.3	0
%0	45	45	0	2.056	89.2	0.180000000000001
%0	50	50	0	2.055	88.9	-0.0599999999999994
%0	55	55	0	2.056	89.2	0.0599999999999994
%1	0	60	0	2.056	91	0.359999999999999
1	18	78	0	2.056	87.5	-0.194444444444444
%1	19	79	50	2.058	87.4	-0.0999999999999943
%1	25	85	50	2.054	93.1	0.949999999999998
%1	30	90	50	2.057	96.3	0.640000000000001
%1	35	95	50	2.054	94.7	-0.319999999999999
%1	40	100	50	2.056	97	0.459999999999999
%1	45	105	50	2.052	97.6	0.119999999999999
%1	55	115	50	2.049	97.4	-0.0199999999999989
%2	0	120	50	2.053	98	0.119999999999999
%2	5	125	50	2.053	99.4	0.280000000000001
%2	10	130	50	2.044	98.4	-0.2
%2	15	135	50	2.045	97.6	-0.160000000000002
2	20	140	50	2.042	97.4	-0.0399999999999977
2	25	145	50	2.018	97.7	0.0599999999999994
%2	30	147	150	2.019	98.2	0.25
%2	32	152	150	2.016	103	0.959999999999999
%2	37	157	150	2.018	104	0.2
%2	42	162	150	2.015	105.1	0.219999999999999
%2	47	167	150	2.014	104.5	-0.119999999999999
%2	52	172	150	2.014	103.5	-0.2
%2	57	177	150	2.011	104	0.1
%3	2	182	150	2.011	106.3	0.459999999999999
%3	7	187	150	2.009	105.5	-0.159999999999999
%3	12	192	150	2.01	107	0.3
%3	17	197	150	2.009	106.5	-0.1
3	22	202	150	2.009	106.4	-0.0199999999999989
3	27	207	150	2.011	106.6	0.0399999999999977
%3	30	210	400	2.011	111	1.46666666666667
%3	35	215	400	2.011	114.9	0.780000000000001
%3	40	220	400	2.012	115.2	0.0599999999999994
%3	50	230	400	2.01	117.8	0.259999999999999
%3	55	235	400	2.01	118.3	0.1
%4	0	240	400	2.009	118.5	0.0400000000000006
%4	5	245	400	2.009	118.7	0.0400000000000006
%4	10	250	400	2.008	117.1	-0.320000000000002
%4	15	255	400	2.008	118	0.180000000000001
4	20	260	400	2.008	116.7	-0.259999999999999
4	25	265	400	2.007	116.6	-0.0200000000000017
%4	27	267	900	2.011	119	1.2
%4	32	272	900	2.011	123.7	0.940000000000001
%4	37	277	900	2.01	124.7	0.2
%4	42	282	900	2.011	126.2	0.3
%4	47	287	900	2.011	126.1	-0.0200000000000017
4	52	292	900	2.01	126.3	0.0400000000000006
4	57	297	900	2.011	126.2	-0.0199999999999989
%5	0	300	1900	2.018	131.8	1.86666666666667
%5	5	305	1900	2.017	134.3	0.5
%5	10	310	1900	2.018	135.6	0.259999999999997
%5	15	315	1900	2.018	134.7	-0.180000000000001
%5	20	320	1900	2.018	135.4	0.140000000000003
%5	25	325	1900	2.019	135	-0.0800000000000011
%5	30	330	1900	2.018	136.4	0.280000000000001
5	35	335	1900	2.018	136.5	0.0199999999999989
5	40	340	1900	2.018	135.5	-0.2
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	6.097	57.3	
%0	5	5	0	6.051	80.8	4.7
%0	10	10	0	6.071	83.8	0.6
%0	15	15	0	6.093	87.7	0.780000000000001
%0	20	20	0	6.101	87.7	0
0	25	25	0	6.079	87.8	0.0199999999999989
0	30	30	0	6.095	87.5	-0.0599999999999994
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-5; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
paramlinear=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mean(mVAoriginal); m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -150
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -5.04294 50 0.253456 42.9448

list
string: Total Cu
 -4.91521 40 0.230415 31.5513

[I 23:18:10.991 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-5; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -6.16346 50 0.329493 15.7464

list
string: Total Cu
 -4.94977 60 0.299539 11.5688

[I 23:18:25.468 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%2	15	135	0	2.013	86.4	6.88
%2	20	140	0	2.014	92.2	1.16
%2	25	145	0	2.011	96.6	0.879999999999998
%2	30	150	0	2.011	101.2	0.920000000000002
%2	40	160	0	2.01	104.2	0.3
%2	50	170	0	2.009	104.4	0.0200000000000003
%2	55	175	0	2.009	106.6	0.439999999999998
%3	0	180	0	2.009	108	0.280000000000001
%3	5	185	0	2.009	108.7	0.140000000000001
%3	10	190	0	2.009	108.6	-0.0200000000000017
%3	15	195	0	2.008	108.8	0.0400000000000006
%3	20	200	0	2.007	109.7	0.180000000000001
%3	25	205	0	2.007	109.9	0.0400000000000006
%3	30	210	0	2.005	107.8	-0.420000000000002
%3	40	220	0	2.004	110.5	0.27
%3	45	225	0	2.004	111.4	0.180000000000001
%3	50	230	0	2.003	111.9	0.1
%3	55	235	0	2.003	112.7	0.159999999999999
%4	0	240	0	2.004	113.9	0.240000000000001
%4	5	245	0	2.004	115.8	0.379999999999998
%4	10	250	0	2.004	114.8	-0.2
%4	15	255	0	2.002	115.6	0.159999999999999
%4	20	260	0	2.002	116.4	0.160000000000002
%4	30	270	0	2.001	114.1	-0.230000000000001
4	35	275	0	2.001	115.1	0.2
4	50	290	0	1.999	115	-0.00666666666666629
%4	55	295	50	1.998	116.1	0.219999999999999
%5	5	305	50	1.998	117.4	0.130000000000001
%5	10	310	50	1.998	117.1	-0.0600000000000023
%5	15	315	50	1.997	116.8	-0.0599999999999994
%5	20	320	50	1.997	117.7	0.180000000000001
%5	25	325	50	1.996	117.2	-0.1
%5	30	330	50	1.996	119	0.359999999999999
%5	35	335	50	1.995	118.8	-0.0400000000000006
%5	40	340	50	1.995	119.1	0.0599999999999994
5	45	345	50	1.995	119.6	0.1
5	50	350	50	1.994	118.6	-0.2
%5	55	355	150	1.995	120.6	0.4
%6	0	360	150	1.995	120.1	-0.1
%6	5	365	150	1.995	121.8	0.340000000000001
%6	10	370	150	1.995	121.4	-0.0799999999999983
%6	15	375	150	1.996	121.9	0.1
%6	20	380	150	1.995	122	0.0199999999999989
%6	25	385	150	1.995	123.1	0.219999999999999
%6	30	390	150	1.994	122.4	-0.139999999999998
6	35	395	150	1.994	122.9	0.1
6	40	400	150	1.994	122.2	-0.140000000000001
%6	45	405	400	1.995	124.7	0.5
%6	50	410	400	1.995	125	0.0599999999999994
%6	55	415	400	1.996	125.1	0.0199999999999989
%7	0	420	400	1.996	125.8	0.140000000000001
%7	5	425	400	1.996	126.5	0.140000000000001
%7	10	430	400	1.996	126.2	-0.0599999999999994
7	15	435	400	1.996	126.2	0
7	20	440	400	1.995	126.4	0.0400000000000006
%7	25	445	900	1.998	130.5	0.819999999999999
7	30	450	900	1.998	129.6	-0.180000000000001
7	35	455	900	1.997	130.8	0.240000000000003
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	8.041	53.6	
%0	5	5	0	8.085	50	-0.72
%0	10	10	0	7.969	53	0.6
%0	15	15	0	8.031	49.8	-0.640000000000001
%0	20	20	0	7.999	51	0.240000000000001
%0	25	25	0	8.004	50.1	-0.18
%0	30	30	0	8.014	50.5	0.0799999999999997
%0	35	35	0	7.992	50.5	0
%0	40	40	0	8	51.4	0.18
%0	45	45	0	8.001	52	0.12
%0	50	50	0	8.008	51.1	-0.18
%0	55	55	0	8.006	51.3	0.0399999999999992
%1	0	60	0	8.001	51.3	0
%1	5	65	0	7.986	52.6	0.260000000000001
%1	10	70	0	7.978	52.3	-0.0600000000000009
%1	15	75	0	7.991	52	-0.0599999999999994
%1	20	80	0	7.984	50.3	-0.340000000000001
%1	25	85	0	7.979	50.7	0.0800000000000011
%1	30	90	0	7.972	53.7	0.6
%1	35	95	0	7.971	52.7	-0.2
%1	40	100	0	7.966	52.3	-0.0800000000000011
%1	45	105	0	7.964	53.2	0.180000000000001
%1	50	110	0	8.058	53.6	0.0799999999999997
1	55	115	0	8.029	53.7	0.0200000000000003
2	10	130	0	8.017	52	-0.113333333333334
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 23:19:01.990 NotebookApp] Saving file at /KNO3_pH6_1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	45	105	0	2.086	75.5	1.62
%1	50	110	0	2.045	76.3	0.159999999999999
%1	55	115	0	2.04	79	0.540000000000001
%2	0	120	0	2.041	79.2	0.0400000000000006
%2	5	125	0	2.039	80.4	0.240000000000001
%2	10	130	0	2.04	82.2	0.359999999999999
%2	15	135	0	2.04	81.7	-0.1
%2	20	140	0	2.038	84	0.459999999999999
%2	25	145	0	2.037	82.9	-0.219999999999999
%2	30	150	0	2.037	83.5	0.119999999999999
%2	35	155	0	2.038	84.8	0.259999999999999
2	40	160	0	2.035	86.1	0.259999999999999
3	0	180	0	2.037	84.6	-0.075
%3	5	185	50	2.037	87.3	0.540000000000001
%3	8	188	50	2.036	91.2	1.3
%3	13	193	50	2.037	92.3	0.219999999999999
%3	18	198	50	2.032	92.8	0.1
%3	23	203	50	2.036	93.7	0.180000000000001
%3	28	208	50	2.035	93.3	-0.0800000000000011
%3	33	213	50	2.036	93.9	0.120000000000002
%3	38	218	50	2.037	95.4	0.3
%3	43	223	50	2.035	95.3	-0.0200000000000017
%3	48	228	50	2.035	96.3	0.2
%3	53	233	50	2.033	98.2	0.380000000000001
%3	58	238	50	2.036	98.2	0
4	3	243	50	2.032	98.2	0
4	8	248	50	2.034	98.6	0.0799999999999983
%4	10	250	150	2.036	100.5	0.950000000000003
%4	15	255	150	2.034	105.2	0.940000000000001
%4	20	260	150	2.036	105.6	0.0799999999999983
%4	25	265	150	2.034	107	0.280000000000001
%4	30	270	150	2.034	108	0.2
%4	35	275	150	2.032	108	0
4	40	280	150	2.032	107.8	-0.0400000000000006
4	45	285	150	2.031	107.7	-0.0199999999999989
%4	50	290	400	2.031	115	1.46
%4	55	295	400	2.031	115.9	0.180000000000001
%5	0	300	400	2.029	116.1	0.0399999999999977
5	5	305	400	2.032	116.5	0.0800000000000011
5	10	310	400	2.029	116	-0.1
%5	15	315	900	2.034	124.8	1.76
%5	20	320	900	2.037	125.3	0.1
%5	25	325	900	2.034	125.4	0.0200000000000017
5	30	330	900	2.037	125.5	0.0199999999999989
5	35	335	900	2.041	132.2	1.34
%5	40	340	1900	2.042	134	0.360000000000002
5	45	345	1900	2.042	133.5	-0.1
5	55	355	1900	2.041	134.2	0.0699999999999989
%6	0	360	3400	2.05	140.8	1.32
%6	5	365	3400	2.051	142.2	0.279999999999996
6	10	370	3400	2.05	140.8	-0.279999999999996
6	15	375	3400	2.054	142.2	0.279999999999996
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	5.992	49.4	
%0	5	5	0	6.002	55.7	1.26
%0	10	10	0	6.018	59.4	0.739999999999999
%0	15	15	0	6.033	62.5	0.62
%0	20	20	0	6.046	62.6	0.0200000000000003
%0	25	25	0	6.064	65.4	0.560000000000001
%0	30	30	0	6.054	73	1.52
%1	0	60	0	6.077	70.1	-0.0966666666666669
%1	5	65	0	6.042	67.4	-0.539999999999998
%1	10	70	0	6.064	69.9	0.5
%1	15	75	0	6.077	69.9	0
%1	20	80	0	6.091	68.8	-0.220000000000002
%1	25	85	0	6.019	67.3	-0.3
%1	30	90	0	6.033	67.7	0.0800000000000011
1	35	95	0	6.05	68	0.0599999999999994
1	40	100	0	6.073	67.4	-0.119999999999999
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mean(mVAoriginal); m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -7.08003 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	45	105	0	2.086	75.5	1.62
%1	50	110	0	2.045	76.3	0.159999999999999
%1	55	115	0	2.04	79	0.540000000000001
%2	0	120	0	2.041	79.2	0.0400000000000006
%2	5	125	0	2.039	80.4	0.240000000000001
%2	10	130	0	2.04	82.2	0.359999999999999
%2	15	135	0	2.04	81.7	-0.1
%2	20	140	0	2.038	84	0.459999999999999
%2	25	145	0	2.037	82.9	-0.219999999999999
%2	30	150	0	2.037	83.5	0.119999999999999
%2	35	155	0	2.038	84.8	0.259999999999999
2	40	160	0	2.035	86.1	0.259999999999999
3	0	180	0	2.037	84.6	-0.075
%3	5	185	50	2.037	87.3	0.540000000000001
%3	8	188	50	2.036	91.2	1.3
%3	13	193	50	2.037	92.3	0.219999999999999
%3	18	198	50	2.032	92.8	0.1
%3	23	203	50	2.036	93.7	0.180000000000001
%3	28	208	50	2.035	93.3	-0.0800000000000011
%3	33	213	50	2.036	93.9	0.120000000000002
%3	38	218	50	2.037	95.4	0.3
%3	43	223	50	2.035	95.3	-0.0200000000000017
%3	48	228	50	2.035	96.3	0.2
%3	53	233	50	2.033	98.2	0.380000000000001
%3	58	238	50	2.036	98.2	0
4	3	243	50	2.032	98.2	0
4	8	248	50	2.034	98.6	0.0799999999999983
%4	10	250	150	2.036	100.5	0.950000000000003
%4	15	255	150	2.034	105.2	0.940000000000001
%4	20	260	150	2.036	105.6	0.0799999999999983
%4	25	265	150	2.034	107	0.280000000000001
%4	30	270	150	2.034	108	0.2
%4	35	275	150	2.032	108	0
4	40	280	150	2.032	107.8	-0.0400000000000006
4	45	285	150	2.031	107.7	-0.0199999999999989
%4	50	290	400	2.031	115	1.46
%4	55	295	400	2.031	115.9	0.180000000000001
%5	0	300	400	2.029	116.1	0.0399999999999977
5	5	305	400	2.032	116.5	0.0800000000000011
5	10	310	400	2.029	116	-0.1
%5	15	315	900	2.034	124.8	1.76
%5	20	320	900	2.037	125.3	0.1
%5	25	325	900	2.034	125.4	0.0200000000000017
5	30	330	900	2.037	125.5	0.0199999999999989
5	35	335	900	2.041	132.2	1.34
%5	40	340	1900	2.042	134	0.360000000000002
5	45	345	1900	2.042	133.5	-0.1
5	55	355	1900	2.041	134.2	0.0699999999999989
%6	0	360	3400	2.05	140.8	1.32
%6	5	365	3400	2.051	142.2	0.279999999999996
6	10	370	3400	2.05	140.8	-0.279999999999996
6	15	375	3400	2.054	142.2	0.279999999999996
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	5.992	49.4	
%0	5	5	0	6.002	55.7	1.26
%0	10	10	0	6.018	59.4	0.739999999999999
%0	15	15	0	6.033	62.5	0.62
%0	20	20	0	6.046	62.6	0.0200000000000003
%0	25	25	0	6.064	65.4	0.560000000000001
%0	30	30	0	6.054	73	1.52
%1	0	60	0	6.077	70.1	-0.0966666666666669
%1	5	65	0	6.042	67.4	-0.539999999999998
%1	10	70	0	6.064	69.9	0.5
%1	15	75	0	6.077	69.9	0
%1	20	80	0	6.091	68.8	-0.220000000000002
%1	25	85	0	6.019	67.3	-0.3
%1	30	90	0	6.033	67.7	0.0800000000000011
1	35	95	0	6.05	68	0.0599999999999994
1	40	100	0	6.073	67.4	-0.119999999999999
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mean(mVAoriginal); m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -6.08003 50 0.329493 27.1984

list
string: Total Cu
 -5.94977 60 0.299539 19.9825

[I 23:19:42.907 NotebookApp] Saving file at /KNO3_pH6_0pt1uMCuT.ipynb
[I 23:19:45.134 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT.ipynb
[I 23:20:31.366 NotebookApp] Saving file at /KNO3_pH6_1uMCuT.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	35	35	0	2.06	88.3	0.159999999999999
%0	40	40	0	2.053	88.3	0
%0	45	45	0	2.056	89.2	0.180000000000001
%0	50	50	0	2.055	88.9	-0.0599999999999994
%0	55	55	0	2.056	89.2	0.0599999999999994
%1	0	60	0	2.056	91	0.359999999999999
1	18	78	0	2.056	87.5	-0.194444444444444
%1	19	79	50	2.058	87.4	-0.0999999999999943
%1	25	85	50	2.054	93.1	0.949999999999998
%1	30	90	50	2.057	96.3	0.640000000000001
%1	35	95	50	2.054	94.7	-0.319999999999999
%1	40	100	50	2.056	97	0.459999999999999
%1	45	105	50	2.052	97.6	0.119999999999999
%1	55	115	50	2.049	97.4	-0.0199999999999989
%2	0	120	50	2.053	98	0.119999999999999
%2	5	125	50	2.053	99.4	0.280000000000001
%2	10	130	50	2.044	98.4	-0.2
%2	15	135	50	2.045	97.6	-0.160000000000002
2	20	140	50	2.042	97.4	-0.0399999999999977
2	25	145	50	2.018	97.7	0.0599999999999994
%2	30	147	150	2.019	98.2	0.25
%2	32	152	150	2.016	103	0.959999999999999
%2	37	157	150	2.018	104	0.2
%2	42	162	150	2.015	105.1	0.219999999999999
%2	47	167	150	2.014	104.5	-0.119999999999999
%2	52	172	150	2.014	103.5	-0.2
%2	57	177	150	2.011	104	0.1
%3	2	182	150	2.011	106.3	0.459999999999999
%3	7	187	150	2.009	105.5	-0.159999999999999
%3	12	192	150	2.01	107	0.3
%3	17	197	150	2.009	106.5	-0.1
3	22	202	150	2.009	106.4	-0.0199999999999989
3	27	207	150	2.011	106.6	0.0399999999999977
%3	30	210	400	2.011	111	1.46666666666667
%3	35	215	400	2.011	114.9	0.780000000000001
%3	40	220	400	2.012	115.2	0.0599999999999994
%3	50	230	400	2.01	117.8	0.259999999999999
%3	55	235	400	2.01	118.3	0.1
%4	0	240	400	2.009	118.5	0.0400000000000006
%4	5	245	400	2.009	118.7	0.0400000000000006
%4	10	250	400	2.008	117.1	-0.320000000000002
%4	15	255	400	2.008	118	0.180000000000001
4	20	260	400	2.008	116.7	-0.259999999999999
4	25	265	400	2.007	116.6	-0.0200000000000017
%4	27	267	900	2.011	119	1.2
%4	32	272	900	2.011	123.7	0.940000000000001
%4	37	277	900	2.01	124.7	0.2
%4	42	282	900	2.011	126.2	0.3
%4	47	287	900	2.011	126.1	-0.0200000000000017
4	52	292	900	2.01	126.3	0.0400000000000006
4	57	297	900	2.011	126.2	-0.0199999999999989
%5	0	300	1900	2.018	131.8	1.86666666666667
%5	5	305	1900	2.017	134.3	0.5
%5	10	310	1900	2.018	135.6	0.259999999999997
%5	15	315	1900	2.018	134.7	-0.180000000000001
%5	20	320	1900	2.018	135.4	0.140000000000003
%5	25	325	1900	2.019	135	-0.0800000000000011
%5	30	330	1900	2.018	136.4	0.280000000000001
5	35	335	1900	2.018	136.5	0.0199999999999989
5	40	340	1900	2.018	135.5	-0.2
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	6.097	57.3	
%0	5	5	0	6.051	80.8	4.7
%0	10	10	0	6.071	83.8	0.6
%0	15	15	0	6.093	87.7	0.780000000000001
%0	20	20	0	6.101	87.7	0
0	25	25	0	6.079	87.8	0.0199999999999989
0	30	30	0	6.095	87.5	-0.0599999999999994
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
paramlinear=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mean(mVAoriginal); m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -6.04294 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[I 23:22:31.407 NotebookApp] Saving file at /KNO3_pH6_1uMCuT.ipynb
[I 23:29:36.910 NotebookApp] 302 GET /lab/ (172.24.0.1) 0.990000ms
[I 02:47:59.298 NotebookApp] Starting buffering for 501c1611-0792-428b-aec5-598ef5cf05cd:a56719f6-e501-43ee-8e5b-496834fddb95
[I 02:47:59.299 NotebookApp] Starting buffering for 7c3981ad-5a7c-4d29-a312-81b6a13e5d7a:16e61b19-d320-40b2-84a9-9fcbd1d4c8af
[I 02:47:59.300 NotebookApp] Starting buffering for 796ba640-abe1-49e7-a4ab-c2536ef9ec41:cdc81e5f-8806-4dc5-8abd-6cff60c2d441
[I 15:20:45.286 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 7.200000ms
[I 2023-08-24 15:20:48.502 LabApp] Build is up to date
[I 15:20:49.228 NotebookApp] 301 GET /static/favicons/favicon-busy-1.ico (172.24.0.1) 5.380000ms
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	35	35	0	2.06	88.3	0.159999999999999
%0	40	40	0	2.053	88.3	0
%0	45	45	0	2.056	89.2	0.180000000000001
%0	50	50	0	2.055	88.9	-0.0599999999999994
%0	55	55	0	2.056	89.2	0.0599999999999994
%1	0	60	0	2.056	91	0.359999999999999
1	18	78	0	2.056	87.5	-0.194444444444444
%1	19	79	50	2.058	87.4	-0.0999999999999943
%1	25	85	50	2.054	93.1	0.949999999999998
%1	30	90	50	2.057	96.3	0.640000000000001
%1	35	95	50	2.054	94.7	-0.319999999999999
%1	40	100	50	2.056	97	0.459999999999999
%1	45	105	50	2.052	97.6	0.119999999999999
%1	55	115	50	2.049	97.4	-0.0199999999999989
%2	0	120	50	2.053	98	0.119999999999999
%2	5	125	50	2.053	99.4	0.280000000000001
%2	10	130	50	2.044	98.4	-0.2
%2	15	135	50	2.045	97.6	-0.160000000000002
2	20	140	50	2.042	97.4	-0.0399999999999977
2	25	145	50	2.018	97.7	0.0599999999999994
%2	30	147	150	2.019	98.2	0.25
%2	32	152	150	2.016	103	0.959999999999999
%2	37	157	150	2.018	104	0.2
%2	42	162	150	2.015	105.1	0.219999999999999
%2	47	167	150	2.014	104.5	-0.119999999999999
%2	52	172	150	2.014	103.5	-0.2
%2	57	177	150	2.011	104	0.1
%3	2	182	150	2.011	106.3	0.459999999999999
%3	7	187	150	2.009	105.5	-0.159999999999999
%3	12	192	150	2.01	107	0.3
%3	17	197	150	2.009	106.5	-0.1
3	22	202	150	2.009	106.4	-0.0199999999999989
3	27	207	150	2.011	106.6	0.0399999999999977
%3	30	210	400	2.011	111	1.46666666666667
%3	35	215	400	2.011	114.9	0.780000000000001
%3	40	220	400	2.012	115.2	0.0599999999999994
%3	50	230	400	2.01	117.8	0.259999999999999
%3	55	235	400	2.01	118.3	0.1
%4	0	240	400	2.009	118.5	0.0400000000000006
%4	5	245	400	2.009	118.7	0.0400000000000006
%4	10	250	400	2.008	117.1	-0.320000000000002
%4	15	255	400	2.008	118	0.180000000000001
4	20	260	400	2.008	116.7	-0.259999999999999
4	25	265	400	2.007	116.6	-0.0200000000000017
%4	27	267	900	2.011	119	1.2
%4	32	272	900	2.011	123.7	0.940000000000001
%4	37	277	900	2.01	124.7	0.2
%4	42	282	900	2.011	126.2	0.3
%4	47	287	900	2.011	126.1	-0.0200000000000017
4	52	292	900	2.01	126.3	0.0400000000000006
4	57	297	900	2.011	126.2	-0.0199999999999989
%5	0	300	1900	2.018	131.8	1.86666666666667
%5	5	305	1900	2.017	134.3	0.5
%5	10	310	1900	2.018	135.6	0.259999999999997
%5	15	315	1900	2.018	134.7	-0.180000000000001
%5	20	320	1900	2.018	135.4	0.140000000000003
%5	25	325	1900	2.019	135	-0.0800000000000011
%5	30	330	1900	2.018	136.4	0.280000000000001
5	35	335	1900	2.018	136.5	0.0199999999999989
5	40	340	1900	2.018	135.5	-0.2
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	6.097	57.3	
%0	5	5	0	6.051	80.8	4.7
%0	10	10	0	6.071	83.8	0.6
%0	15	15	0	6.093	87.7	0.780000000000001
%0	20	20	0	6.101	87.7	0
0	25	25	0	6.079	87.8	0.0199999999999989
0	30	30	0	6.095	87.5	-0.0599999999999994
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-6; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
paramlinear=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mean(mVAoriginal); m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-12:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'r--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'m--'); hold on
plot([log10(CuwithCuOs) log10(CuwithCuOs)],[-100 150],'g--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,40,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: -2
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -6.04294 50 0.253456 35.7873

list
string: Total Cu
 -5.91521 40 0.230415 26.2927

[I 15:21:32.754 NotebookApp] Creating new notebook in 
[I 15:21:38.140 NotebookApp] Kernel started: 5ce91f72-d68a-4c5b-bd4d-7094adc4672c, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[W 15:21:38.989 NotebookApp] Got events for closed stream <zmq.eventloop.zmqstream.ZMQStream object at 0x7f38a8f03dd0>
[I 15:21:51.919 NotebookApp] Saving file at /Untitled.ipynb
[I 15:21:55.073 NotebookApp] New terminal with automatic name: 1
[I 15:22:38.959 NotebookApp] Starting buffering for 796ba640-abe1-49e7-a4ab-c2536ef9ec41:70bc9fb4-46c0-4c5d-9273-0e123691caa9
[I 15:22:38.961 NotebookApp] Starting buffering for 7c3981ad-5a7c-4d29-a312-81b6a13e5d7a:67bfd48e-1a8d-4f40-a017-345c809df838
[I 15:22:38.961 NotebookApp] Starting buffering for 501c1611-0792-428b-aec5-598ef5cf05cd:b64a8588-60c5-4902-80c7-57124027d96b
[I 15:22:38.963 NotebookApp] Starting buffering for 5ce91f72-d68a-4c5b-bd4d-7094adc4672c:2e507a0e-3880-4449-89c0-1706473785bb
[I 17:30:23.563 NotebookApp] 302 GET / (172.24.0.1) 6.740000ms
[I 20:56:18.694 NotebookApp] 302 GET /lab (172.24.0.1) 10.720000ms
[W 20:56:29.018 NotebookApp] 401 POST /login?next=%2Flab (172.24.0.1) 257.710000ms referer=https://jupyter6.clearnasdss.synology.me/login?next=%2Flab
[I 20:56:34.684 NotebookApp] 302 POST /login?next=%2Flab (172.24.0.1) 149.580000ms
[I 20:56:34.863 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 13.140000ms
[I 2023-09-12 20:56:38.260 LabApp] Build is up to date
[I 20:56:39.559 NotebookApp] 301 GET /static/favicons/favicon-busy-1.ico (172.24.0.1) 5.480000ms
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	45	105	0	2.086	75.5	1.62
%1	50	110	0	2.045	76.3	0.159999999999999
%1	55	115	0	2.04	79	0.540000000000001
%2	0	120	0	2.041	79.2	0.0400000000000006
%2	5	125	0	2.039	80.4	0.240000000000001
%2	10	130	0	2.04	82.2	0.359999999999999
%2	15	135	0	2.04	81.7	-0.1
%2	20	140	0	2.038	84	0.459999999999999
%2	25	145	0	2.037	82.9	-0.219999999999999
%2	30	150	0	2.037	83.5	0.119999999999999
%2	35	155	0	2.038	84.8	0.259999999999999
2	40	160	0	2.035	86.1	0.259999999999999
3	0	180	0	2.037	84.6	-0.075
%3	5	185	50	2.037	87.3	0.540000000000001
%3	8	188	50	2.036	91.2	1.3
%3	13	193	50	2.037	92.3	0.219999999999999
%3	18	198	50	2.032	92.8	0.1
%3	23	203	50	2.036	93.7	0.180000000000001
%3	28	208	50	2.035	93.3	-0.0800000000000011
%3	33	213	50	2.036	93.9	0.120000000000002
%3	38	218	50	2.037	95.4	0.3
%3	43	223	50	2.035	95.3	-0.0200000000000017
%3	48	228	50	2.035	96.3	0.2
%3	53	233	50	2.033	98.2	0.380000000000001
%3	58	238	50	2.036	98.2	0
4	3	243	50	2.032	98.2	0
4	8	248	50	2.034	98.6	0.0799999999999983
%4	10	250	150	2.036	100.5	0.950000000000003
%4	15	255	150	2.034	105.2	0.940000000000001
%4	20	260	150	2.036	105.6	0.0799999999999983
%4	25	265	150	2.034	107	0.280000000000001
%4	30	270	150	2.034	108	0.2
%4	35	275	150	2.032	108	0
4	40	280	150	2.032	107.8	-0.0400000000000006
4	45	285	150	2.031	107.7	-0.0199999999999989
%4	50	290	400	2.031	115	1.46
%4	55	295	400	2.031	115.9	0.180000000000001
%5	0	300	400	2.029	116.1	0.0399999999999977
5	5	305	400	2.032	116.5	0.0800000000000011
5	10	310	400	2.029	116	-0.1
%5	15	315	900	2.034	124.8	1.76
%5	20	320	900	2.037	125.3	0.1
%5	25	325	900	2.034	125.4	0.0200000000000017
5	30	330	900	2.037	125.5	0.0199999999999989
5	35	335	900	2.041	132.2	1.34
%5	40	340	1900	2.042	134	0.360000000000002
5	45	345	1900	2.042	133.5	-0.1
5	55	355	1900	2.041	134.2	0.0699999999999989
%6	0	360	3400	2.05	140.8	1.32
%6	5	365	3400	2.051	142.2	0.279999999999996
6	10	370	3400	2.05	140.8	-0.279999999999996
6	15	375	3400	2.054	142.2	0.279999999999996
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	5.992	49.4	
%0	5	5	0	6.002	55.7	1.26
%0	10	10	0	6.018	59.4	0.739999999999999
%0	15	15	0	6.033	62.5	0.62
%0	20	20	0	6.046	62.6	0.0200000000000003
%0	25	25	0	6.064	65.4	0.560000000000001
%0	30	30	0	6.054	73	1.52
%1	0	60	0	6.077	70.1	-0.0966666666666669
%1	5	65	0	6.042	67.4	-0.539999999999998
%1	10	70	0	6.064	69.9	0.5
%1	15	75	0	6.077	69.9	0
%1	20	80	0	6.091	68.8	-0.220000000000002
%1	25	85	0	6.019	67.3	-0.3
%1	30	90	0	6.033	67.7	0.0800000000000011
1	35	95	0	6.05	68	0.0599999999999994
1	40	100	0	6.073	67.4	-0.119999999999999
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=mean(Emeas(1:2)); Eorig=mean(mVAoriginal); m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -7.08003 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 20:57:21.982 NotebookApp] Starting buffering for 5ce91f72-d68a-4c5b-bd4d-7094adc4672c:2c5cacf4-8b41-4ad9-8450-329a4624b49c
[I 20:58:39.224 NotebookApp] Saving file at /KNO3_pH6_0pt1uMCuT.ipynb
[W 21:07:26.128 NotebookApp] 404 GET /api/contents/KNO3_pH8_0pt1uMCuT_version2.ipynb?1694552846123 (172.24.0.1): file or directory does not exist: 'KNO3_pH8_0pt1uMCuT_version2.ipynb'
[W 21:07:26.128 NotebookApp] file or directory does not exist: 'KNO3_pH8_0pt1uMCuT_version2.ipynb'
[W 21:07:26.129 NotebookApp] 404 GET /api/contents/KNO3_pH8_0pt1uMCuT_version2.ipynb?1694552846123 (172.24.0.1) 2.100000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/KNO3_pH8_0pt1uMCuT.ipynb
[W 21:07:26.155 NotebookApp] 404 GET /api/contents/KNO3_pH8_0pt1uMCuT_version2.ipynb?content=0&1694552846152 (172.24.0.1): file or directory does not exist: 'KNO3_pH8_0pt1uMCuT_version2.ipynb'
[W 21:07:26.156 NotebookApp] file or directory does not exist: 'KNO3_pH8_0pt1uMCuT_version2.ipynb'
[W 21:07:26.156 NotebookApp] 404 GET /api/contents/KNO3_pH8_0pt1uMCuT_version2.ipynb?content=0&1694552846152 (172.24.0.1) 2.260000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/KNO3_pH8_0pt1uMCuT.ipynb
[I 21:07:26.164 NotebookApp] Uploading file to /KNO3_pH8_0pt1uMCuT_version2.ipynb
[I 21:07:26.266 NotebookApp] Starting buffering for 5ce91f72-d68a-4c5b-bd4d-7094adc4672c:f153952a-d570-46c2-98d7-7a582bb6a998
[I 21:11:01.002 NotebookApp] Starting buffering for 796ba640-abe1-49e7-a4ab-c2536ef9ec41:d445fd50-ad24-48e2-828d-c5599b373ab1
[I 21:11:01.002 NotebookApp] Starting buffering for 501c1611-0792-428b-aec5-598ef5cf05cd:193b57bd-c4e3-4f0b-a1c3-c4be08f82597
[I 21:11:01.130 NotebookApp] Starting buffering for 7c3981ad-5a7c-4d29-a312-81b6a13e5d7a:acffc7b5-99ff-4e29-81da-4c648e25948f
[I 2023-09-12 21:16:32.591 LabApp] Build is up to date
[I 21:18:32.944 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version2.ipynb
[I 21:20:32.989 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version2.ipynb
[I 21:22:33.035 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version2.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 80
50 107
100 115.9
250 125.8
500 136.6
1000 146.7
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
%mVAoriginal=mean(originalsamplemVnpH(:,2));
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 80
50 107
100 115.9
250 125.8
500 136.6
1000 146.7
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
%mVAoriginal=mean(originalsamplemVnpH(:,2));
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=8.023; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.16346 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 80
50 107
100 115.9
250 125.8
500 136.6
1000 146.7
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
%mVAoriginal=mean(originalsamplemVnpH(:,2));
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 21:24:33.085 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version2.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 88
50 107
100 115.9
250 125.8
500 136.6
1000 146.7
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
%mVAoriginal=mean(originalsamplemVnpH(:,2));
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 21:26:33.137 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version2.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 88
50 107
100 115.9
250 125.8
500 136.6
1000 146.7
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 21:28:33.184 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version2.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 88
50 107
100 115.9
250 125.8
500 136.6
1000 146.7
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-paramlinear(2))/paramlinear(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 88
50 107
100 115.9
250 125.8
500 136.6
1000 146.7
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
paramlinear=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-paramlinear(2))/paramlinear(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 21:30:33.240 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version2.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 88
50 107
100 115.9
250 125.8
500 136.6
1000 146.7
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
paramlinear=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-paramlinear(2))/paramlinear(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 21:32:33.295 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version2.ipynb
[I 21:34:33.351 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version2.ipynb
[I 21:36:33.400 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version2.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 88
50 107
100 115.9
250 125.8
500 136.6
1000 146.7
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-paramlinear(2))/paramlinear(1))

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 88
50 107
100 115.9
250 125.8
500 136.6
1000 146.7
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=paramlinear(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 88
50 107
100 115.9
250 125.8
500 136.6
1000 146.7
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=param(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 21:38:33.454 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version2.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 88
50 107
100 115.9
250 125.8
500 136.6
1000 146.7
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1)
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=param(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol)

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1)
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

[I 21:40:33.515 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version2.ipynb
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)
log10(CuTplus)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 21:42:33.574 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version2.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 88
50 107
100 115.9
250 125.8
500 136.6
1000 146.7
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol)

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1)
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=param(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 88
50 107
100 115.9
250 125.8
500 136.6
1000 146.7
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol)

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1)
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=param(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 21:44:12.978 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version2.ipynb
[W 21:44:22.134 NotebookApp] 404 GET /api/contents/KNO3_pH8_0pt1uMCuT_version3.ipynb?1694555062136 (172.24.0.1): file or directory does not exist: 'KNO3_pH8_0pt1uMCuT_version3.ipynb'
[W 21:44:22.134 NotebookApp] file or directory does not exist: 'KNO3_pH8_0pt1uMCuT_version3.ipynb'
[W 21:44:22.135 NotebookApp] 404 GET /api/contents/KNO3_pH8_0pt1uMCuT_version3.ipynb?1694555062136 (172.24.0.1) 2.000000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/KNO3_pH8_0pt1uMCuT_version2.ipynb
[W 21:44:22.160 NotebookApp] 404 GET /api/contents/KNO3_pH8_0pt1uMCuT_version3.ipynb?content=0&1694555062163 (172.24.0.1): file or directory does not exist: 'KNO3_pH8_0pt1uMCuT_version3.ipynb'
[W 21:44:22.161 NotebookApp] file or directory does not exist: 'KNO3_pH8_0pt1uMCuT_version3.ipynb'
[W 21:44:22.162 NotebookApp] 404 GET /api/contents/KNO3_pH8_0pt1uMCuT_version3.ipynb?content=0&1694555062163 (172.24.0.1) 2.490000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/KNO3_pH8_0pt1uMCuT_version2.ipynb
[I 21:44:22.170 NotebookApp] Uploading file to /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 21:44:22.323 NotebookApp] Starting buffering for 5ce91f72-d68a-4c5b-bd4d-7094adc4672c:25e7b8a5-0549-456f-b155-4cbba0a17eac
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol)

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1)
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=param(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 15.7464

list
string: Total Cu
 -6.94977 60 0.299539 11.5688

[I 21:46:22.235 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol)

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1)
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=param(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 20.0409

list
string: Total Cu
 -6.94977 60 0.299539 14.7239

[I 21:48:22.295 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol)

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1)
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=100.7; Eorig=54; m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 20.0409

list
string: Total Cu
 -6.94977 60 0.299539 14.7239

[I 21:50:22.339 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol)

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1)
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=100.7; Eorig=54; m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 20.0409

list
string: Total Cu
 -6.94977 60 0.299539 14.7239

[I 21:52:22.393 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol)

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1)
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=100.7; Eorig=54; %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 50 0.329493 20.0409

list
string: Total Cu
 -6.94977 60 0.299539 14.7239

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol)

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1)
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=100.7; Eorig=54; %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-10 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -10
list
string: -9
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.13445 50 0.177419 20.0409

list
string: Total Cu
 -6.88065 60 0.16129 14.7239

[I 21:54:22.446 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 21:58:20.635 NotebookApp] 302 GET /lab (172.24.0.1) 1.030000ms
[I 10:39:27.165 NotebookApp] Starting buffering for 7c3981ad-5a7c-4d29-a312-81b6a13e5d7a:cfb9387b-ade1-445d-a820-c5ffaf087e9c
[I 10:39:27.166 NotebookApp] Starting buffering for 796ba640-abe1-49e7-a4ab-c2536ef9ec41:6d0b0737-d1ef-461f-a444-e83777d29289
[I 10:39:27.167 NotebookApp] Starting buffering for 501c1611-0792-428b-aec5-598ef5cf05cd:20be3c9d-cbae-4001-a747-a5032e8bf717
[I 12:38:02.147 NotebookApp] 302 GET /lab (172.24.0.1) 1.060000ms
[I 12:38:08.176 NotebookApp] 302 POST /login?next=%2Flab (172.24.0.1) 153.790000ms
[I 12:38:10.056 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 26.840000ms
[I 2023-09-13 12:38:13.185 LabApp] Build is up to date
[I 12:38:13.966 NotebookApp] 301 GET /static/favicons/favicon-busy-1.ico (172.24.0.1) 1.140000ms
[I 12:38:32.614 NotebookApp] Starting buffering for 501c1611-0792-428b-aec5-598ef5cf05cd:bde4f19f-20b6-4df6-80a5-fad65383e488
[I 12:38:33.613 NotebookApp] Starting buffering for 796ba640-abe1-49e7-a4ab-c2536ef9ec41:39d7a063-7755-41ce-a1eb-de050015591a
[I 12:40:13.722 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol)

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m=59.2/2; Eacid=Emeas(1); Eorig=mean(mVaoriginal); %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m


param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1)
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol)

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m


param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1)
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=100.7; Eorig=54; %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-10 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -10
list
string: -9
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.13445 50 0.177419 20.0409

list
string: Total Cu
 -6.88065 60 0.16129 14.7239

[I 12:42:13.839 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol)

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m=param(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo=Eacid-(m)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo)/m


param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1)
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=100.7; Eorig=54; %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-10 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -10
list
string: -9
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.13445 50 0.177419 20.0409

list
string: Total Cu
 -6.88065 60 0.16129 14.7239

[I 12:44:13.940 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m=param(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo=Eacid-(m)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo)/m
%determine free Cu using all the calibration points
param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1)
logCufullcalib=(mean(mVAoriginal)-param(2))/param(1)

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=100.7; Eorig=54; %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-10 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -10
list
string: -9
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.13445 50 0.177419 20.0409

list
string: Total Cu
 -6.88065 60 0.16129 14.7239

Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m=param(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo=Eacid-(m)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo)/m
%determine free Cu using all the calibration points
param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param(2))/param(1)

Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m=param(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo=Eacid-(m)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo)/m
%determine free Cu using all the calibration points
param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param(2))/param(1)
%determine free Cu using high Cu additions (linear part)
param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param(2))/param(1)

[I 12:46:14.050 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m=param(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo=Eacid-(m)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo)/m
%determine free Cu using all the calibration points
param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param(2))/param(1)
%determine free Cu using high Cu additions (linear part)
param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param(2))/param(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param(2))/param(1)
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m=param(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo=Eacid-(m)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo)/m
%determine free Cu using all the calibration points
param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param(2))/param(1)
%determine free Cu using high Cu additions (linear part)
param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param(2))/param(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param=polyfit(log10(CuTplus(1:3)),Emeas(1:3),1);
logCulowslopecalib=(mean(mVAoriginal)-param(2))/param(1)
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m=param(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo=Eacid-(m)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo)/m
%determine free Cu using all the calibration points
param=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param(2))/param(1)
%determine free Cu using high Cu additions (linear part)
param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param(2))/param(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param(2))/param(1)
[I 12:48:14.347 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: display('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
display('model results')
log10(Cunosolid)
log10(Cuall)
[I 12:50:14.446 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: print('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
display('model results')
log10(Cunosolid)
log10(Cuall)
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
display('model results')
log10(Cunosolid)
log10(Cuall)
Executing: disp('various calibration results','fontweight','bold')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
display('model results')
log10(Cunosolid)
log10(Cuall)
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 12:52:14.560 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
plot([logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-10 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -10
list
string: -9
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.13445 50 0.177419 20.0409

list
string: Total Cu
 -6.88065 60 0.16129 14.7239

[I 12:54:14.650 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-10 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -10
list
string: -9
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.13445 50 0.177419 20.0409

list
string: Total Cu
 -6.88065 60 0.16129 14.7239

[I 12:56:14.758 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(Emeas) max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(Emeas) max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-10 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -10
list
string: -9
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.13445 50 0.177419 20.0409

list
string: Total Cu
 -6.88065 60 0.16129 14.7239

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal) max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal) max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-10 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -10
list
string: -9
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.13445 50 0.177419 20.0409

list
string: Total Cu
 -6.88065 60 0.16129 14.7239

[I 12:58:14.857 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal) max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal) max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal) max(Emeas)],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-10 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -10
list
string: -9
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.13445 50 0.177419 20.0409

list
string: Total Cu
 -6.88065 60 0.16129 14.7239

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.1*min(mVAoriginal) max(Emeas)+0.1*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal) max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal) max(Emeas)],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-10 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -10
list
string: -9
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.13445 50 0.177419 20.0409

list
string: Total Cu
 -6.88065 60 0.16129 14.7239

Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-10 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -10
list
string: -9
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.13445 50 0.177419 20.0409

list
string: Total Cu
 -6.88065 60 0.16129 14.7239

[I 13:00:15.009 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',180)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-10 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -10
list
string: -9
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.83606 47.7505 0.790323 4.49898

list
string: Total Cu
 -6.88065 60 0.16129 14.7239

[I 13:02:16.090 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-10 -3 40 180])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

Device pixel ratio: 1
Render time: 451930
Encode time: 19177
Send time: 910
Draw time: 572602
[I 13:04:16.202 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 13:06:16.288 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-10 -3 40 180])



Device pixel ratio: 1
Render time: 324568
Encode time: 17470
Send time: 1322
Draw time: 361167
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([min(possible results) max(log10(CuTplus)) min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 375398
Encode time: 16287
Send time: 1127
Draw time: 413013
[I 13:08:16.388 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

%axis([min(possible results) max(log10(CuTplus)) min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 323520
Encode time: 16675
Send time: 882
Draw time: 354122
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([min(possibleresults) max(log10(CuTplus)) min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 321590
Encode time: 16894
Send time: 1126
Draw time: 353989
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 319301
Encode time: 17410
Send time: 1128
Draw time: 357127
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','b')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 343724
Encode time: 16958
Send time: 1070
Draw time: 375872
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 346286
Encode time: 17342
Send time: 3836
Draw time: 384994
[I 13:10:16.489 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 339504
Encode time: 16238
Send time: 3872
Draw time: 374388
[I 13:12:16.591 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')
logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 341327
Encode time: 16401
Send time: 4176
Draw time: 376149
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo=Eacid-(m)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo)/m
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')
logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 338817
Encode time: 17023
Send time: 925
Draw time: 370675
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 13:14:16.665 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo=Eacid-(m)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo)/m
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k-')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k-')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 337480
Encode time: 17694
Send time: 2719
Draw time: 372585
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 372003
Encode time: 18401
Send time: 956
Draw time: 405154
[I 13:16:16.767 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 13:17:03.987 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[Eo1 m1];
logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k-','linewidth',2)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 343922
Encode time: 17345
Send time: 975
Draw time: 379091
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 13:19:04.082 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[Eo1 m1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'k-','linewidth',2)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 349147
Encode time: 19053
Send time: 1102
Draw time: 383033
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[Eo1 m1]
param2
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'k-','linewidth',2)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 343158
Encode time: 18327
Send time: 1147
Draw time: 377657
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1]
param2
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'k-','linewidth',2)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 339375
Encode time: 18851
Send time: 1039
Draw time: 373581
[I 13:21:04.179 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')
log10(CuTplus)

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'k-','linewidth',2)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'k--','linewidth',2)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 344979
Encode time: 19147
Send time: 3059
Draw time: 382538
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'k-','linewidth',2)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'k--','linewidth',2)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 344969
Encode time: 18843
Send time: 3719
Draw time: 387028
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])



Device pixel ratio: 1
Render time: 345901
Encode time: 18867
Send time: 1508
Draw time: 380152
[I 13:23:04.289 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 13:27:04.410 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 13:27:20.781 NotebookApp] Kernel shutdown: 5ce91f72-d68a-4c5b-bd4d-7094adc4672c
terminate called after throwing an instance of 'zmq::error_t'
  what():  Interrupted system call
[W 13:27:20.963 NotebookApp] delete /Untitled.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

Device pixel ratio: 1
Render time: 338696
Encode time: 18514
Send time: 1229
Draw time: 373926
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 13:29:04.505 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 13:31:04.605 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
fun = @(x)100*(x(2) - x(1)^2)^2 + (1 - x(1))^2;
x0 = [-1.2,1];
x = fminsearch(fun,x0,options)

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
%fun = @(x)100*(x(2) - x(1)^2)^2 + (1 - x(1))^2;
%x0 = [-1.2,1];
%x = fminsearch(fun,x0,options)

Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

Device pixel ratio: 1
Render time: 364288
Encode time: 18962
Send time: 1302
Draw time: 405043
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 13:33:04.705 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 13:49:04.869 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
function f = objectivefcn1(x)
f = 0;
for k = -10:10
    f = f + exp(-(x(1)-x(2))^2 - 2*x(1)^2)*cos(x(2))*sin(2*x(2));
end

Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

Device pixel ratio: 1
Render time: 354938
Encode time: 18881
Send time: 1145
Draw time: 388906
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 13:51:04.965 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 13:53:05.091 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 13:55:05.196 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))/(1+10.^(p(3)-logx)*param(4)));

p=[-100 40 -7 0.7];
logx=-8:1:-3; model=logisticfunction(p,logx);

plot(log10(CuTplus),Emeas,'ko')

Device pixel ratio: 1
Render time: 291492
Encode time: 14956
Send time: 686
Draw time: 321309
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))/(1+10.^(p(3)-logx)*p(4)));

p=[-100 40 -7 0.7];
logx=-8:1:-3; model=logisticfunction(p,logx);

plot(log10(CuTplus),Emeas,'ko')

Device pixel ratio: 1
Render time: 305931
Encode time: 14606
Send time: 617
Draw time: 333955
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));

p=[-100 40 -7 0.7];
logx=-8:1:-3; model=logisticfunction(p,logx);

plot(log10(CuTplus),Emeas,'ko')

Device pixel ratio: 1
Render time: 293434
Encode time: 14024
Send time: 589
Draw time: 321650
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));

p=[-100 40 -7 0.7];
logx=-8:1:-3; model=logisticfunction(p,logx);

plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')

Device pixel ratio: 1
Render time: 322895
Encode time: 15854
Send time: 647
Draw time: 352201
[I 13:57:05.290 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));

p=[100 200 -5 0.7];
logx=-8:1:-3; model=logisticfunction(p,logx);

plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')

Device pixel ratio: 1
Render time: 321020
Encode time: 17249
Send time: 763
Draw time: 352068
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));

p=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(p,logx);

plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')

Device pixel ratio: 1
Render time: 324457
Encode time: 18151
Send time: 989
Draw time: 357832
[I 13:59:05.393 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 14:01:05.503 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 14:03:05.608 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum(Emeas-logisticfunction(p,logx).^2)));
p=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(p,logx);
err=errfunction(p,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')

Device pixel ratio: 1
Render time: 324684
Encode time: 17051
Send time: 701
Draw time: 361972
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
p=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(p,logx);
err=errfunction(p,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')

Device pixel ratio: 1
Render time: 329598
Encode time: 16659
Send time: 1021
Draw time: 361383
[I 14:05:05.710 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','iter','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

Device pixel ratio: 1
Render time: 382188
Encode time: 26443
Send time: 3465
Draw time: 432025
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 14:07:05.833 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV
0 100.7
50 130.3
100 143
250 155.1
500 165
1000 174.2
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

Device pixel ratio: 1
Render time: 344452
Encode time: 19299
Send time: 1280
Draw time: 377930
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 14:09:05.955 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit

plot(logx,model,'k--')


Device pixel ratio: 1
Render time: 368944
Encode time: 19297
Send time: 1338
Draw time: 404542
[I 14:15:06.988 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+0.2;
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')


Device pixel ratio: 1
Render time: 342010
Encode time: 19940
Send time: 1097
Draw time: 377923
[I 14:17:07.164 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+0.2;
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))
Device pixel ratio: 1
Render time: 349522
Encode time: 18946
Send time: 1291
Draw time: 383939
[I 14:19:07.301 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))
Device pixel ratio: 1
Render time: 340368
Encode time: 18843
Send time: 1041
Draw time: 374283
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'g--')

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))
Device pixel ratio: 1
Render time: 343825
Encode time: 19226
Send time: 1636
Draw time: 381418
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))
Device pixel ratio: 1
Render time: 339964
Encode time: 19568
Send time: 1095
Draw time: 375041
[I 14:29:07.497 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 14:31:07.614 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 14:33:07.742 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 14:35:07.862 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 14:51:08.076 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k
function = @(p,x1,x2) (p(1)+p(2)*log10(x1+p(3)*x2));
%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib;
model=function(ptst,CuTplus,H)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k
function = @(p,x1,x2) (p(1)+p(2)*log10(x1+p(3)*x2));
%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib;
model=function(ptst,CuTplus,H)
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

function = @(p,x1,x2) (p(1)+p(2)*log10(x1+p(3)*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[100 59.2/2 1];
model=function(ptst,CuTplus,H)
[I 14:53:08.167 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

function = @(p,x1,x2) (p(1)+p(2)*log10(x1+p(3)*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[100 59.2/2 1];
%model=function(ptst,CuTplus,H)
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

function = NEequn@(p,x1,x2) (p(1)+p(2)*log10(x1+p(3)*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[100 59.2/2 1];
model=NEequn(ptst,CuTplus,H)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

function = NEequn@(p,x1,x2) (p(1)+p(2)*log10(x1+p(3)*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[100 59.2/2 1];
model=NEequn(ptst,CuTplus,H)
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2)*log10(x1+p(3)*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[100 59.2/2 1];
model=NEeqn(ptst,CuTplus,H)
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2)*log10(x1+p(3)*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[100 59.2/2 1];
model=NEeqn(ptst,CuTplus',H')
[I 14:55:08.276 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[100 59.2/2 1];
model=NEeqn(ptst,CuTplus',H')
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib
ptst=[100 59.2/2 1];
model=NEeqn(ptst,CuTplus',H')
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib
ptst=[100 59.2/2 1];
model=NEeqn(ptst,CuTplus',H)
[I 14:57:08.385 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[100 59.2/2 1];
model=NEeqn(ptst,CuTplus',H)

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[100 59.2/2 0.00001];
model=NEeqn(ptst,CuTplus',H);

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: -100
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[-100 59.2/2 0.00000001];
model=NEeqn(ptst,CuTplus',H);

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: -400
list
string: -300
list
string: -200
list
string: -100
list
string: 0
list
string: 100
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[200 59.2/2 0.00000001];
model=NEeqn(ptst,CuTplus',H);

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: -50
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[300 59.2/2 0.00000001];
model=NEeqn(ptst,CuTplus',H);

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[250 59.2/2 0.00000001];
model=NEeqn(ptst,CuTplus',H);

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[275 59.2/2 0.00000001];
model=NEeqn(ptst,CuTplus',H);

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[275 59.2/2 0.000001];
model=NEeqn(ptst,CuTplus',H);

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));

%errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
[I 14:59:08.504 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbest=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas),ptst,options)
model=NEeqn(pbest,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: -200
list
string: -100
list
string: 0
list
string: 100
list
string: 200
string: 
string: 
[I 15:09:08.701 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas)

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbest=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas),ptst,options)
model=NEeqn(pbest,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: -200
list
string: -100
list
string: 0
list
string: 100
list
string: 200
string: 
string: 
[I 15:11:08.842 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbest=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas),ptst,options)
model=NEeqn(pbest,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: -200
list
string: -100
list
string: 0
list
string: 100
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbest=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
model=NEeqn(pbest,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
[I 15:13:08.985 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 15:15:09.136 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
model=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=10.^((mean(mVoriginal)-pbest2(1))/pbest2(2))-best(3)*H
Device pixel ratio: 1
Render time: 340403
Encode time: 18305
Send time: 1057
Draw time: 374842
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=10.^((mean(mVAoriginal)-pbest2(1))/pbest2(2))-best(3)*H
Device pixel ratio: 1
Render time: 348339
Encode time: 21224
Send time: 1335
Draw time: 384513
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
model=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=10.^((mean(mVAoriginal)-pbest2(1))/pbest2(2))-pbest2(3)*H
Device pixel ratio: 1
Render time: 342362
Encode time: 18968
Send time: 1049
Draw time: 376295
[I 15:17:09.299 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
model=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=10.^((mean(mVAoriginal)-pbestNE(1))/pbestNE(2))-pbestNE(3)*H
Device pixel ratio: 1
Render time: 342669
Encode time: 19208
Send time: 1071
Draw time: 382144
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
model=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))/pbestNE(2))-pbestNE(3)*H)
Device pixel ratio: 1
Render time: 341322
Encode time: 19899
Send time: 1050
Draw time: 376868
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; H=0.01; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))/pbestNE(2))-pbestNE(3)*H)
Device pixel ratio: 1
Render time: 346644
Encode time: 19413
Send time: 1287
Draw time: 381318
[I 15:19:09.455 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
model=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H
Device pixel ratio: 1
Render time: 341746
Encode time: 19263
Send time: 1132
Draw time: 375923
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
model=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; H=0.01; logCuNE=10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H
Device pixel ratio: 1
Render time: 340085
Encode time: 18802
Send time: 1051
Draw time: 374087
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
model=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)
Device pixel ratio: 1
Render time: 343466
Encode time: 18915
Send time: 1093
Draw time: 378040
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
Device pixel ratio: 1
Render time: 342069
Encode time: 18999
Send time: 1102
Draw time: 376191
[I 15:21:09.626 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),model,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 344682
Encode time: 19823
Send time: 1115
Draw time: 378398
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 342501
Encode time: 19377
Send time: 1142
Draw time: 376938
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 342009
Encode time: 27892
Send time: 4660
Draw time: 389600
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 15:23:09.814 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 344413
Encode time: 18953
Send time: 1352
Draw time: 383061
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 347409
Encode time: 19138
Send time: 3213
Draw time: 382811
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 15:27:10.002 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version3.ipynb
[W 15:28:23.439 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_allcalibs.ipynb?1694618903431 (172.24.0.1): file or directory does not exist: 'pH8_0pt1uMCuT_allcalibs.ipynb'
[W 15:28:23.439 NotebookApp] file or directory does not exist: 'pH8_0pt1uMCuT_allcalibs.ipynb'
[W 15:28:23.441 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_allcalibs.ipynb?1694618903431 (172.24.0.1) 3.400000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/KNO3_pH8_0pt1uMCuT_version3.ipynb
[W 15:28:23.532 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_allcalibs.ipynb?content=0&1694618903525 (172.24.0.1): file or directory does not exist: 'pH8_0pt1uMCuT_allcalibs.ipynb'
[W 15:28:23.533 NotebookApp] file or directory does not exist: 'pH8_0pt1uMCuT_allcalibs.ipynb'
[W 15:28:23.533 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_allcalibs.ipynb?content=0&1694618903525 (172.24.0.1) 1.950000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/KNO3_pH8_0pt1uMCuT_version3.ipynb
[I 15:28:23.616 NotebookApp] Uploading file to /pH8_0pt1uMCuT_allcalibs.ipynb
[I 15:28:36.622 NotebookApp] Kernel started: 0237b124-d9f6-43a2-bd0e-6206a06f57c6, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 15:28:40.118 NotebookApp] Kernel started: d23e8dc5-c665-4605-b49b-a16d2d3cd980, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 15:28:42.860 NotebookApp] Kernel started: 5c5888a8-df10-49ca-91d1-68490fbe86ae, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 15:28:51.186 NotebookApp] Starting buffering for 0237b124-d9f6-43a2-bd0e-6206a06f57c6:f4a85b13-acbc-4c40-837d-24fc267249c9
[I 15:28:53.035 NotebookApp] Starting buffering for d23e8dc5-c665-4605-b49b-a16d2d3cd980:33d63209-c3a6-48f1-9bca-6a05f8f288ab
[I 15:29:46.234 NotebookApp] Saving file at /pH8_0pt1uMCuT_allcalibs.ipynb
[W 15:30:02.689 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb?1694619002681 (172.24.0.1): file or directory does not exist: 'pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb'
[W 15:30:02.689 NotebookApp] file or directory does not exist: 'pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb'
[W 15:30:02.690 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb?1694619002681 (172.24.0.1) 1.840000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_allcalibs.ipynb
[W 15:30:02.790 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb?content=0&1694619002783 (172.24.0.1): file or directory does not exist: 'pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb'
[W 15:30:02.790 NotebookApp] file or directory does not exist: 'pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb'
[W 15:30:02.791 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb?content=0&1694619002783 (172.24.0.1) 2.070000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_allcalibs.ipynb
[I 15:30:02.871 NotebookApp] Uploading file to /pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 370693
Encode time: 19692
Send time: 1115
Draw time: 405747
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 15:30:12.412 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 15:30:21.442 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb?1694619021432 (172.24.0.1): file or directory does not exist: 'pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb'
[W 15:30:21.442 NotebookApp] file or directory does not exist: 'pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb'
[W 15:30:21.443 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb?1694619021432 (172.24.0.1) 1.870000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 15:30:21.538 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb?content=0&1694619021530 (172.24.0.1): file or directory does not exist: 'pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb'
[W 15:30:21.538 NotebookApp] file or directory does not exist: 'pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb'
[W 15:30:21.539 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb?content=0&1694619021530 (172.24.0.1) 2.110000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[I 15:30:21.600 NotebookApp] Uploading file to /pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 15:32:21.757 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 339458
Encode time: 20082
Send time: 1142
Draw time: 374489
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[80 140 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 346047
Encode time: 20263
Send time: 1477
Draw time: 382739
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[175 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 321429
Encode time: 15512
Send time: 643
Draw time: 350967
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[200 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 319597
Encode time: 16292
Send time: 740
Draw time: 351190
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[210 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 323428
Encode time: 16802
Send time: 1180
Draw time: 355722
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[230 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 322326
Encode time: 16981
Send time: 1107
Draw time: 354277
[I 15:34:21.919 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[245 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 327575
Encode time: 16771
Send time: 689
Draw time: 359032
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[245 59.2/2 0.00001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 323375
Encode time: 16281
Send time: 700
Draw time: 353995
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[245 59.2/2 0.001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 322737
Encode time: 18277
Send time: 955
Draw time: 355563
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[245 59.2/2 0.0005];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 321454
Encode time: 16593
Send time: 719
Draw time: 353482
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[80 140 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[245 59.2/2 0.0005];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 344297
Encode time: 19729
Send time: 1168
Draw time: 379258
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 15:36:22.091 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 15:37:47.501 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 15:39:47.672 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[80 140 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[245 59.2/2 0.0005];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-100,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 417444
Encode time: 19565
Send time: 1374
Draw time: 452474
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/2,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 344118
Encode time: 19833
Send time: 1412
Draw time: 379483
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 345782
Encode time: 19977
Send time: 1159
Draw time: 381255
[I 15:41:47.814 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 344978
Encode time: 19807
Send time: 1241
Draw time: 380486
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0132067;
Executing: % put in data
data=[...
%volCu mV
0 88
50 107
100 115.9
250 125.8
500 136.6
1000 146.7
];

addedCuvol=data(:,1)'*1e-6;

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol)

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1)
logCuToriginal=(Emeas(1)-param(2))/param(1)
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1))

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=115; Eorig=52; m=21.5; m=param(1); %m=24.25;
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8)
log10(CuTplus)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -8.21049 129.163 0.329493 15.7464

list
string: Total Cu
 -7.04977 129.163 0.299539 11.5688

[I 15:43:31.537 NotebookApp] Kernel started: f17b8960-2abd-4c08-9f35-1ca74380af46, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)

xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 369253
Encode time: 19560
Send time: 1189
Draw time: 405191
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 15:43:47.952 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 15:44:38.148 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[I 15:44:42.005 NotebookApp] Saving file at /KNO3_pH8_0pt1uMCuT_version2.ipynb
[I 15:44:43.963 NotebookApp] Starting buffering for 5c5888a8-df10-49ca-91d1-68490fbe86ae:0d7e310c-b1c8-4004-8c59-e3ff7152a784
[W 15:44:55.535 NotebookApp] delete /pH8_0pt1uMCuT_allcalibs.ipynb
[I 15:46:03.346 NotebookApp] Kernel started: 1a93caa6-bf72-41d6-9e37-89faa73114ca, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[W 15:46:54.168 NotebookApp] 404 GET /api/contents/pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb?1694620014156 (172.24.0.1): file or directory does not exist: 'pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb'
[W 15:46:54.168 NotebookApp] file or directory does not exist: 'pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb'
[W 15:46:54.169 NotebookApp] 404 GET /api/contents/pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb?1694620014156 (172.24.0.1) 2.060000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
[W 15:46:54.254 NotebookApp] 404 GET /api/contents/pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb?content=0&1694620014242 (172.24.0.1): file or directory does not exist: 'pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb'
[W 15:46:54.254 NotebookApp] file or directory does not exist: 'pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb'
[W 15:46:54.255 NotebookApp] 404 GET /api/contents/pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb?content=0&1694620014242 (172.24.0.1) 2.170000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 15:46:54.314 NotebookApp] Uploading file to /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 15:47:09.041 NotebookApp] Starting buffering for f17b8960-2abd-4c08-9f35-1ca74380af46:cbeabd71-21ce-4057-b99a-b934f222e6c6
[I 15:48:54.442 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0  97.9 2.001
50 108.8 2.021
100  118.4 2.018
250 127.4  2.019
500 137.3 2.023
1000 145.9 2.028
];

originalsamplemVnpH=[...
%pH mV
9.697 -17
9.709 -17.3
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[80 140 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 80
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[245 59.2/2 0.0005];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 400932
Encode time: 18867
Send time: 1028
Draw time: 437467
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 15:50:54.599 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[95 160 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
Device pixel ratio: 1
Render time: 325201
Encode time: 17392
Send time: 814
Draw time: 359863
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[250 59.2/2 0.001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 325965
Encode time: 16142
Send time: 730
Draw time: 357343
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[250 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 322155
Encode time: 16106
Send time: 764
Draw time: 351935
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[250 59.2/2 0.001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 320494
Encode time: 17659
Send time: 748
Draw time: 352519
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[250 59.2/2 0.0004];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 320112
Encode time: 17514
Send time: 1676
Draw time: 354704
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[250 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 320659
Encode time: 16958
Send time: 691
Draw time: 357590
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0  97.9 2.001
50 108.8 2.021
100  118.4 2.018
250 127.4  2.019
500 137.3 2.023
1000 145.9 2.028
];

originalsamplemVnpH=[...
%pH mV
9.697 -17
9.709 -17.3
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[95 160 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
list
string: 160
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[250 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 341249
Encode time: 17837
Send time: 949
Draw time: 373821
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 15:52:54.756 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 15:54:54.895 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(log10([Cunosolid Cuall)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 343544
Encode time: 16856
Send time: 1652
Draw time: 375753
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(log10([Cunosolid Cuall]))-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 337760
Encode time: 20024
Send time: 1359
Draw time: 372465
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(log10([Cunosolid Cuall]))-1 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 347649
Encode time: 20385
Send time: 1161
Draw time: 384550
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(log10([Cunosolid Cuall]))-1 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.5*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 342163
Encode time: 19924
Send time: 1159
Draw time: 377212
[I 15:56:55.045 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 16:00:55.207 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(log10([Cunosolid Cuall]))-1 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 346804
Encode time: 20268
Send time: 1096
Draw time: 382631
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(log10([Cunosolid Cuall]))-1 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 344041
Encode time: 20422
Send time: 1293
Draw time: 379687
[I 16:02:55.352 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 16:18:29.010 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[W 16:49:11.634 NotebookApp] 404 GET /api/contents/pH7pt5_NDReffluent_allcalibs.ipynb?1694623751622 (172.24.0.1): file or directory does not exist: 'pH7pt5_NDReffluent_allcalibs.ipynb'
[W 16:49:11.634 NotebookApp] file or directory does not exist: 'pH7pt5_NDReffluent_allcalibs.ipynb'
[W 16:49:11.635 NotebookApp] 404 GET /api/contents/pH7pt5_NDReffluent_allcalibs.ipynb?1694623751622 (172.24.0.1) 1.830000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[W 16:49:11.729 NotebookApp] 404 GET /api/contents/pH7pt5_NDReffluent_allcalibs.ipynb?content=0&1694623751717 (172.24.0.1): file or directory does not exist: 'pH7pt5_NDReffluent_allcalibs.ipynb'
[W 16:49:11.729 NotebookApp] file or directory does not exist: 'pH7pt5_NDReffluent_allcalibs.ipynb'
[W 16:49:11.729 NotebookApp] 404 GET /api/contents/pH7pt5_NDReffluent_allcalibs.ipynb?content=0&1694623751717 (172.24.0.1) 1.830000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 16:49:11.817 NotebookApp] Uploading file to /pH7pt5_NDReffluent_allcalibs.ipynb
[I 16:51:11.955 NotebookApp] Saving file at /pH7pt5_NDReffluent_allcalibs.ipynb
[I 17:04:47.203 NotebookApp] Starting buffering for 7c3981ad-5a7c-4d29-a312-81b6a13e5d7a:4366615b-53e3-4e56-9c4b-1d7d836ec26e
[I 17:04:55.144 NotebookApp] Kernel shutdown: 7c3981ad-5a7c-4d29-a312-81b6a13e5d7a
terminate called after throwing an instance of 'zmq::error_t'
  what():  Interrupted system call
[W 17:04:55.347 NotebookApp] delete /pH7pt5_NDReffluent_allcalibs.ipynb
[I 17:04:58.698 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
[I 17:05:06.551 NotebookApp] New terminal with automatic name: 2
[I 18:57:52.800 NotebookApp] Kernel started: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[W 18:59:13.391 NotebookApp] 404 GET /api/contents/NDAsample_electrodeA_allcalibs.ipynb?1694631553376 (172.24.0.1): file or directory does not exist: 'NDAsample_electrodeA_allcalibs.ipynb'
[W 18:59:13.391 NotebookApp] file or directory does not exist: 'NDAsample_electrodeA_allcalibs.ipynb'
[W 18:59:13.393 NotebookApp] 404 GET /api/contents/NDAsample_electrodeA_allcalibs.ipynb?1694631553376 (172.24.0.1) 2.790000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[W 18:59:13.480 NotebookApp] 404 GET /api/contents/NDAsample_electrodeA_allcalibs.ipynb?content=0&1694631553468 (172.24.0.1): file or directory does not exist: 'NDAsample_electrodeA_allcalibs.ipynb'
[W 18:59:13.481 NotebookApp] file or directory does not exist: 'NDAsample_electrodeA_allcalibs.ipynb'
[W 18:59:13.482 NotebookApp] 404 GET /api/contents/NDAsample_electrodeA_allcalibs.ipynb?content=0&1694631553468 (172.24.0.1) 3.520000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 18:59:13.574 NotebookApp] Uploading file to /NDAsample_electrodeA_allcalibs.ipynb
[I 19:01:13.746 NotebookApp] Saving file at /NDAsample_electrodeA_allcalibs.ipynb
[I 19:07:13.892 NotebookApp] Saving file at /NDAsample_electrodeA_allcalibs.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 42.2 2.034
50 44.2 2.026
150 69.7 2.022
400 76.6 2.023
900 78.6 2.026
];

originalsamplemVnpH=[...
%pH mV
7.461 -62.1
7.467 -62
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[95 160 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[250 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(log10([Cunosolid Cuall]))-1 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 362898
Encode time: 17671
Send time: 1472
Draw time: 489288
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 42.2 2.034
50 44.2 2.026
150 69.7 2.022
400 76.6 2.023
900 78.6 2.026
];

originalsamplemVnpH=[...
%pH mV
7.461 -62.1
7.467 -62
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[40 80 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 30
list
string: 40
list
string: 50
list
string: 60
list
string: 70
list
string: 80
list
string: 90
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[250 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(log10([Cunosolid Cuall]))-1 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 347338
Encode time: 18327
Send time: 1047
Draw time: 381426
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 19:09:14.029 NotebookApp] Saving file at /NDAsample_electrodeA_allcalibs.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 42.2 2.034
50 44.2 2.026
150 69.7 2.022
400 76.6 2.023
900 82.2 2.026
];

originalsamplemVnpH=[...
%pH mV
7.461 -62.1
7.467 -62
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[40 80 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 30
list
string: 40
list
string: 50
list
string: 60
list
string: 70
list
string: 80
list
string: 90
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[250 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 40
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(log10([Cunosolid Cuall]))-1 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 457896
Encode time: 26316
Send time: 7027
Draw time: 507212
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[150 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 324060
Encode time: 15543
Send time: 688
Draw time: 353226
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[50 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 319363
Encode time: 15757
Send time: 910
Draw time: 350123
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[300 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 320723
Encode time: 15485
Send time: 675
Draw time: 351676
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[230 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 333927
Encode time: 16703
Send time: 721
Draw time: 365122
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[200 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 351182
Encode time: 16869
Send time: 713
Draw time: 382594
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[190 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
Device pixel ratio: 1
Render time: 345758
Encode time: 17258
Send time: 969
Draw time: 381802
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 42.2 2.034
50 44.2 2.026
150 69.7 2.022
400 76.6 2.023
900 82.2 2.026
];

originalsamplemVnpH=[...
%pH mV
7.461 -62.1
7.467 -62
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[40 80 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 30
list
string: 40
list
string: 50
list
string: 60
list
string: 70
list
string: 80
list
string: 90
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[190 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 30
list
string: 40
list
string: 50
list
string: 60
list
string: 70
list
string: 80
list
string: 90
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(log10([Cunosolid Cuall]))-1 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 345983
Encode time: 17981
Send time: 965
Draw time: 378313
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 19:10:55.110 NotebookApp] Starting buffering for 1a93caa6-bf72-41d6-9e37-89faa73114ca:6712fa5f-3e51-4d92-ad5b-4d9b1c1a0c4d
[I 19:10:59.204 NotebookApp] Starting buffering for 501c1611-0792-428b-aec5-598ef5cf05cd:727b23bc-947e-4cec-a586-56360805603c
[I 19:11:01.947 NotebookApp] Kernel started: 58eb9189-d43a-4c35-9d36-e5414dab6d05, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 19:11:14.175 NotebookApp] Saving file at /NDAsample_electrodeA_allcalibs.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(log10([Cunosolid Cuall]))-1 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])


% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 351373
Encode time: 18437
Send time: 1025
Draw time: 386018
[I 19:13:14.307 NotebookApp] Saving file at /NDAsample_electrodeA_allcalibs.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
plot([-9.672 -9.672],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--') % model from CHEAQS

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(log10([Cunosolid Cuall]))-1 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])


% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 339279
Encode time: 18129
Send time: 999
Draw time: 372238
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
plot([-9.672 -9.672],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'r--') % model from CHEAQS

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(log10([Cunosolid Cuall]))-1 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])


% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 343002
Encode time: 18084
Send time: 1234
Draw time: 377194
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
plot([-9.672 -9.672],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'r--') % model from CHEAQS

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([-10 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])


% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 351739
Encode time: 18855
Send time: 1037
Draw time: 386773
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 42.2 2.034
%50 44.2 2.026  %seems to be an outlier
150 69.7 2.022
400 76.6 2.023
900 82.2 2.026
];

originalsamplemVnpH=[...
%pH mV
7.461 -62.1
7.467 -62
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[40 80 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 40
list
string: 50
list
string: 60
list
string: 70
list
string: 80
list
string: 90
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[190 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 30
list
string: 40
list
string: 50
list
string: 60
list
string: 70
list
string: 80
list
string: 90
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
plot([-9.672 -9.672],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'r--') % model from CHEAQS

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([-10 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])


% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
[I 19:15:14.445 NotebookApp] Saving file at /NDAsample_electrodeA_allcalibs.ipynb
Device pixel ratio: 1
Render time: 338947
Encode time: 18253
Send time: 1105
Draw time: 371073
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
plot([-9.672 -9.672],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'r--') % model from CHEAQS

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([-12 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])


% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 362251
Encode time: 19882
Send time: 5451
Draw time: 411941
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 42.2 2.034
50 44.2 2.026  %seems to be an outlier
150 69.7 2.022
400 76.6 2.023
900 82.2 2.026
];

originalsamplemVnpH=[...
%pH mV
7.461 -62.1
7.467 -62
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[40 80 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 30
list
string: 40
list
string: 50
list
string: 60
list
string: 70
list
string: 80
list
string: 90
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[190 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 30
list
string: 40
list
string: 50
list
string: 60
list
string: 70
list
string: 80
list
string: 90
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
plot([-9.672 -9.672],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'r--') % model from CHEAQS

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([-12 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])


% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 344606
Encode time: 19379
Send time: 1327
Draw time: 381210
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 19:17:14.610 NotebookApp] Saving file at /NDAsample_electrodeA_allcalibs.ipynb
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
CHEAQS=-9.672
[I 19:19:14.748 NotebookApp] Saving file at /NDAsample_electrodeA_allcalibs.ipynb
[I 19:25:38.435 NotebookApp] Starting buffering for 58eb9189-d43a-4c35-9d36-e5414dab6d05:f728e2fe-9f00-4835-af32-81ebdcee031d
[I 19:25:38.436 NotebookApp] Starting buffering for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:7e3a7b7f-5d02-43b9-8e94-5e8da8862fed
[I 21:22:57.999 NotebookApp] 302 GET /lab (172.24.0.1) 19.990000ms
[I 21:23:06.811 NotebookApp] 302 POST /login?next=%2Flab (172.24.0.1) 362.970000ms
[I 21:23:09.026 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 1.140000ms
[I 2023-09-18 21:23:11.838 LabApp] Build is up to date
[I 21:23:12.645 NotebookApp] 302 GET /lab (172.24.0.1) 2.720000ms
[I 21:23:13.799 NotebookApp] 301 GET /static/favicons/favicon-busy-1.ico (172.24.0.1) 1.760000ms
[I 21:27:37.552 NotebookApp] Starting buffering for 796ba640-abe1-49e7-a4ab-c2536ef9ec41:f0e99347-a724-4830-a52f-86ad11fee947
[I 23:26:18.637 NotebookApp] Starting buffering for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:971a8d50-ffd3-4fe1-918f-f670a1927285
[I 23:26:18.643 NotebookApp] Starting buffering for 58eb9189-d43a-4c35-9d36-e5414dab6d05:341b4b0a-0f97-4047-a2f3-284b03144e1d
[I 2023-09-20 19:33:31.622 LabApp] Build is up to date
[I 19:33:42.286 NotebookApp] Kernel started: b867717e-21cf-493f-8466-4abb12164722, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 19:33:44.587 NotebookApp] Starting buffering for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:23dc813b-8cc2-4be3-8611-2a737322cc44
[I 19:33:45.730 NotebookApp] Starting buffering for 58eb9189-d43a-4c35-9d36-e5414dab6d05:9f784bfe-a581-4c0e-a684-2af8fd485631
[I 19:50:19.691 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[80 140 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[245 59.2/2 0.0005];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 375152
Encode time: 19710
Send time: 1931
Draw time: 418192
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 19:54:19.856 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)

xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 380692
Encode time: 20419
Send time: 1218
Draw time: 427617
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0  97.9 2.001
50 108.8 2.021
100  118.4 2.018
250 127.4  2.019
500 137.3 2.023
1000 145.9 2.028
];

originalsamplemVnpH=[...
%pH mV
9.697 -17
9.709 -17.3
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[95 160 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
list
string: 160
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[250 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(log10([Cunosolid Cuall]))-1 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 351215
Encode time: 19653
Send time: 1449
Draw time: 393178
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 20:01:48.453 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 42.2 2.034
50 44.2 2.026  %seems to be an outlier
150 69.7 2.022
400 76.6 2.023
900 82.2 2.026
];

originalsamplemVnpH=[...
%pH mV
7.461 -62.1
7.467 -62
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[40 80 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 30
list
string: 40
list
string: 50
list
string: 60
list
string: 70
list
string: 80
list
string: 90
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[190 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 30
list
string: 40
list
string: 50
list
string: 60
list
string: 70
list
string: 80
list
string: 90
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
plot([-9.672 -9.672],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'r--') % model from CHEAQS

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([-12 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])


% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 409842
Encode time: 19533
Send time: 1149
Draw time: 488522
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
CHEAQS=-9.672
[I 20:02:40.673 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 20:04:08.075 NotebookApp] Saving file at /NDAsample_electrodeA_allcalibs.ipynb
[I 20:40:01.302 NotebookApp] Starting buffering for 58eb9189-d43a-4c35-9d36-e5414dab6d05:2bfb3bb6-22ff-487f-a2f2-d0bb9d2badb9
[I 20:40:01.307 NotebookApp] Starting buffering for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:9455b884-5789-4690-9093-7c58788a872f
[I 20:40:01.309 NotebookApp] Starting buffering for f17b8960-2abd-4c08-9f35-1ca74380af46:4ea94b1e-05e0-4a3b-b70e-40a9fade9731
[I 20:40:01.310 NotebookApp] Starting buffering for b867717e-21cf-493f-8466-4abb12164722:8ef987f2-cf3b-4789-8add-58b4c8990a42
[I 2023-09-21 00:56:49.035 LabApp] Build is up to date
[I 00:56:57.721 NotebookApp] 302 GET /lab (172.24.0.1) 1.030000ms
[I 02:10:19.315 NotebookApp] Starting buffering for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:b0938687-aaec-40fe-8d94-062b26d84c78
[I 02:10:19.316 NotebookApp] Starting buffering for f17b8960-2abd-4c08-9f35-1ca74380af46:319261c8-c0d0-407c-a191-aecbe6aa6999
[I 02:10:19.317 NotebookApp] Starting buffering for b867717e-21cf-493f-8466-4abb12164722:64b59235-e45f-4631-b70d-b74192c3977d
[I 02:10:19.318 NotebookApp] Starting buffering for 58eb9189-d43a-4c35-9d36-e5414dab6d05:96b9efef-2de5-4084-81ae-c5a84a2b80c4
[I 2023-09-21 18:10:10.703 LabApp] Build is up to date
[I 18:10:20.925 NotebookApp] 302 GET /lab (172.24.0.1) 1.060000ms
[I 18:45:39.539 NotebookApp] Starting buffering for b867717e-21cf-493f-8466-4abb12164722:3f9df460-4dc2-4dc5-b05b-30e370b5ada9
[I 18:45:39.542 NotebookApp] Starting buffering for f17b8960-2abd-4c08-9f35-1ca74380af46:db74d2a6-ab6c-47b8-9f73-17070b04c194
[I 18:45:39.542 NotebookApp] Starting buffering for 58eb9189-d43a-4c35-9d36-e5414dab6d05:4a4a30ad-4ea5-41b6-9b96-0138f5d04789
[I 18:45:39.543 NotebookApp] Starting buffering for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:f7676bd1-b1fb-459c-8110-91fb5b0d7c18
[I 18:46:19.774 NotebookApp] Restoring connection for f17b8960-2abd-4c08-9f35-1ca74380af46:db74d2a6-ab6c-47b8-9f73-17070b04c194
[I 18:46:19.871 NotebookApp] Restoring connection for 58eb9189-d43a-4c35-9d36-e5414dab6d05:4a4a30ad-4ea5-41b6-9b96-0138f5d04789
[I 18:46:19.973 NotebookApp] Restoring connection for b867717e-21cf-493f-8466-4abb12164722:3f9df460-4dc2-4dc5-b05b-30e370b5ada9
[I 18:46:20.830 NotebookApp] Restoring connection for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:f7676bd1-b1fb-459c-8110-91fb5b0d7c18
[I 18:46:21.097 NotebookApp] Starting buffering for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:f7676bd1-b1fb-459c-8110-91fb5b0d7c18
[I 18:46:21.098 NotebookApp] Starting buffering for 58eb9189-d43a-4c35-9d36-e5414dab6d05:4a4a30ad-4ea5-41b6-9b96-0138f5d04789
[I 18:46:21.100 NotebookApp] Starting buffering for b867717e-21cf-493f-8466-4abb12164722:3f9df460-4dc2-4dc5-b05b-30e370b5ada9
[I 18:46:21.100 NotebookApp] Starting buffering for f17b8960-2abd-4c08-9f35-1ca74380af46:db74d2a6-ab6c-47b8-9f73-17070b04c194
[I 18:48:11.117 NotebookApp] Restoring connection for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:f7676bd1-b1fb-459c-8110-91fb5b0d7c18
[I 18:48:11.265 NotebookApp] Restoring connection for b867717e-21cf-493f-8466-4abb12164722:3f9df460-4dc2-4dc5-b05b-30e370b5ada9
[I 18:48:11.617 NotebookApp] Restoring connection for 58eb9189-d43a-4c35-9d36-e5414dab6d05:4a4a30ad-4ea5-41b6-9b96-0138f5d04789
[I 18:48:11.764 NotebookApp] Restoring connection for f17b8960-2abd-4c08-9f35-1ca74380af46:db74d2a6-ab6c-47b8-9f73-17070b04c194
[I 18:49:19.751 NotebookApp] Starting buffering for 58eb9189-d43a-4c35-9d36-e5414dab6d05:4a4a30ad-4ea5-41b6-9b96-0138f5d04789
[I 18:49:19.752 NotebookApp] Starting buffering for f17b8960-2abd-4c08-9f35-1ca74380af46:db74d2a6-ab6c-47b8-9f73-17070b04c194
[I 18:49:19.752 NotebookApp] Starting buffering for b867717e-21cf-493f-8466-4abb12164722:3f9df460-4dc2-4dc5-b05b-30e370b5ada9
[I 18:49:19.753 NotebookApp] Starting buffering for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:f7676bd1-b1fb-459c-8110-91fb5b0d7c18
[I 18:49:24.161 NotebookApp] Restoring connection for f17b8960-2abd-4c08-9f35-1ca74380af46:db74d2a6-ab6c-47b8-9f73-17070b04c194
[I 18:49:24.282 NotebookApp] Restoring connection for 58eb9189-d43a-4c35-9d36-e5414dab6d05:4a4a30ad-4ea5-41b6-9b96-0138f5d04789
[I 18:49:24.376 NotebookApp] Restoring connection for b867717e-21cf-493f-8466-4abb12164722:3f9df460-4dc2-4dc5-b05b-30e370b5ada9
[I 18:49:24.492 NotebookApp] Restoring connection for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:f7676bd1-b1fb-459c-8110-91fb5b0d7c18
[I 18:49:53.109 NotebookApp] Starting buffering for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:f7676bd1-b1fb-459c-8110-91fb5b0d7c18
[I 18:49:53.110 NotebookApp] Starting buffering for b867717e-21cf-493f-8466-4abb12164722:3f9df460-4dc2-4dc5-b05b-30e370b5ada9
[I 18:49:53.110 NotebookApp] Starting buffering for f17b8960-2abd-4c08-9f35-1ca74380af46:db74d2a6-ab6c-47b8-9f73-17070b04c194
[I 18:49:53.113 NotebookApp] Starting buffering for 58eb9189-d43a-4c35-9d36-e5414dab6d05:4a4a30ad-4ea5-41b6-9b96-0138f5d04789
[I 2023-09-21 20:37:38.527 LabApp] Build is up to date
[W 08:53:40.120 NotebookApp] WebSocket ping timeout after 119963 ms.
[W 08:53:40.277 NotebookApp] WebSocket ping timeout after 119951 ms.
[W 08:53:40.431 NotebookApp] WebSocket ping timeout after 119957 ms.
[W 08:53:40.633 NotebookApp] WebSocket ping timeout after 119958 ms.
[I 08:53:45.122 NotebookApp] Starting buffering for b867717e-21cf-493f-8466-4abb12164722:1b85bf70-3ef6-44a3-8cca-3ca77b5db4c5
[I 08:53:45.279 NotebookApp] Starting buffering for f17b8960-2abd-4c08-9f35-1ca74380af46:3603f6d8-6718-43dc-ba0e-89ec44e5b21c
[I 08:53:45.433 NotebookApp] Starting buffering for 58eb9189-d43a-4c35-9d36-e5414dab6d05:3d1aae82-3ce3-4ff0-9bd2-2d0b13a19e9e
[I 08:53:45.636 NotebookApp] Starting buffering for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:80797894-a9a5-417d-9d80-b50bae3f9878
[I 08:54:40.781 NotebookApp] Restoring connection for b867717e-21cf-493f-8466-4abb12164722:1b85bf70-3ef6-44a3-8cca-3ca77b5db4c5
[I 08:54:40.927 NotebookApp] Restoring connection for f17b8960-2abd-4c08-9f35-1ca74380af46:3603f6d8-6718-43dc-ba0e-89ec44e5b21c
[I 08:54:41.071 NotebookApp] Restoring connection for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:80797894-a9a5-417d-9d80-b50bae3f9878
[I 08:55:25.936 NotebookApp] Restoring connection for 58eb9189-d43a-4c35-9d36-e5414dab6d05:3d1aae82-3ce3-4ff0-9bd2-2d0b13a19e9e
[I 13:51:21.599 NotebookApp] Starting buffering for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:80797894-a9a5-417d-9d80-b50bae3f9878
[I 13:51:21.600 NotebookApp] Starting buffering for 58eb9189-d43a-4c35-9d36-e5414dab6d05:3d1aae82-3ce3-4ff0-9bd2-2d0b13a19e9e
[I 13:51:21.602 NotebookApp] Starting buffering for b867717e-21cf-493f-8466-4abb12164722:1b85bf70-3ef6-44a3-8cca-3ca77b5db4c5
[I 13:51:21.602 NotebookApp] Starting buffering for f17b8960-2abd-4c08-9f35-1ca74380af46:3603f6d8-6718-43dc-ba0e-89ec44e5b21c
[I 15:28:09.051 NotebookApp] Restoring connection for f17b8960-2abd-4c08-9f35-1ca74380af46:3603f6d8-6718-43dc-ba0e-89ec44e5b21c
[I 15:28:09.174 NotebookApp] Restoring connection for b867717e-21cf-493f-8466-4abb12164722:1b85bf70-3ef6-44a3-8cca-3ca77b5db4c5
[I 15:28:09.289 NotebookApp] Restoring connection for 58eb9189-d43a-4c35-9d36-e5414dab6d05:3d1aae82-3ce3-4ff0-9bd2-2d0b13a19e9e
[I 15:28:09.381 NotebookApp] Restoring connection for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:80797894-a9a5-417d-9d80-b50bae3f9878
[I 15:28:10.309 NotebookApp] Starting buffering for b867717e-21cf-493f-8466-4abb12164722:1b85bf70-3ef6-44a3-8cca-3ca77b5db4c5
[I 15:28:10.310 NotebookApp] Starting buffering for 58eb9189-d43a-4c35-9d36-e5414dab6d05:3d1aae82-3ce3-4ff0-9bd2-2d0b13a19e9e
[I 15:28:10.311 NotebookApp] Starting buffering for f17b8960-2abd-4c08-9f35-1ca74380af46:3603f6d8-6718-43dc-ba0e-89ec44e5b21c
[I 15:28:10.312 NotebookApp] Starting buffering for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:80797894-a9a5-417d-9d80-b50bae3f9878
[I 2023-09-22 17:56:43.425 LabApp] Build is up to date
[I 20:18:34.100 NotebookApp] Starting buffering for b867717e-21cf-493f-8466-4abb12164722:dba728ed-77da-414e-af1b-89b12b381e87
[I 20:18:34.101 NotebookApp] Starting buffering for 58eb9189-d43a-4c35-9d36-e5414dab6d05:47b9982d-472a-4fda-9120-1cb87a50dacf
[I 20:18:34.103 NotebookApp] Starting buffering for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:62062e6f-4be3-47fe-b02b-abc208821046
[I 20:18:34.106 NotebookApp] Starting buffering for f17b8960-2abd-4c08-9f35-1ca74380af46:e9a0db60-9b5e-4cac-bc3f-89ef4ed044a9
[I 20:19:44.418 NotebookApp] Restoring connection for b867717e-21cf-493f-8466-4abb12164722:dba728ed-77da-414e-af1b-89b12b381e87
[I 20:19:44.505 NotebookApp] Restoring connection for 58eb9189-d43a-4c35-9d36-e5414dab6d05:47b9982d-472a-4fda-9120-1cb87a50dacf
[I 20:19:44.606 NotebookApp] Restoring connection for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:62062e6f-4be3-47fe-b02b-abc208821046
[I 20:19:44.700 NotebookApp] Restoring connection for f17b8960-2abd-4c08-9f35-1ca74380af46:e9a0db60-9b5e-4cac-bc3f-89ef4ed044a9
[I 20:19:44.706 NotebookApp] Starting buffering for 58eb9189-d43a-4c35-9d36-e5414dab6d05:47b9982d-472a-4fda-9120-1cb87a50dacf
[I 20:19:44.706 NotebookApp] Starting buffering for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:62062e6f-4be3-47fe-b02b-abc208821046
[I 20:19:44.707 NotebookApp] Starting buffering for b867717e-21cf-493f-8466-4abb12164722:dba728ed-77da-414e-af1b-89b12b381e87
[I 20:19:44.715 NotebookApp] Starting buffering for f17b8960-2abd-4c08-9f35-1ca74380af46:e9a0db60-9b5e-4cac-bc3f-89ef4ed044a9
[I 23:13:01.016 NotebookApp] Restoring connection for b867717e-21cf-493f-8466-4abb12164722:dba728ed-77da-414e-af1b-89b12b381e87
[I 23:13:01.157 NotebookApp] Restoring connection for 58eb9189-d43a-4c35-9d36-e5414dab6d05:47b9982d-472a-4fda-9120-1cb87a50dacf
[I 23:13:02.005 NotebookApp] Restoring connection for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:62062e6f-4be3-47fe-b02b-abc208821046
[I 23:13:02.148 NotebookApp] Restoring connection for f17b8960-2abd-4c08-9f35-1ca74380af46:e9a0db60-9b5e-4cac-bc3f-89ef4ed044a9
[I 23:13:02.157 NotebookApp] Replaying 3 buffered messages
[I 23:13:59.886 NotebookApp] Starting buffering for f17b8960-2abd-4c08-9f35-1ca74380af46:e9a0db60-9b5e-4cac-bc3f-89ef4ed044a9
[I 23:13:59.891 NotebookApp] Starting buffering for 58eb9189-d43a-4c35-9d36-e5414dab6d05:47b9982d-472a-4fda-9120-1cb87a50dacf
[I 23:13:59.892 NotebookApp] Starting buffering for b867717e-21cf-493f-8466-4abb12164722:dba728ed-77da-414e-af1b-89b12b381e87
[I 23:13:59.894 NotebookApp] Starting buffering for 3a24f5f2-8c66-4d3b-b628-8f1214b13a70:62062e6f-4be3-47fe-b02b-abc208821046
[I 2023-09-23 20:26:53.638 LabApp] Build is up to date
[I 20:32:58.427 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 20:34:58.646 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 20:38:59.394 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 23:37:31.239 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
xvfb-run: error: Xvfb failed to start
xvfb-run: error: Xvfb failed to start
xvfb-run: error: Xvfb failed to start
xvfb-run: error: Xvfb failed to start
xvfb-run: error: Xvfb failed to start
[W 16:08:30.726 NotebookApp] Collisions detected in /home/jovyan/.jupyter/jupyter_notebook_config.py and /home/jovyan/.jupyter/jupyter_notebook_config.json config files. /home/jovyan/.jupyter/jupyter_notebook_config.json has higher priority: {
      "NotebookApp": {
        "password": "'' ignored, using 'argon2:$argon2id$v=19$m=10240,t=10,p=8$ZmkKwBPY7SHyhu/M4lUPdg$tdk6jy8Z9Fj2eCjHXTJCGDWY8OT4vNNruv21gO7uNc8'"
      }
    }
[W 2023-09-24 16:08:32.267 LabApp] 'ip' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-09-24 16:08:32.267 LabApp] 'token' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-09-24 16:08:32.267 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-09-24 16:08:32.267 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[I 2023-09-24 16:08:32.281 LabApp] JupyterLab extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/jupyterlab
[I 2023-09-24 16:08:32.281 LabApp] JupyterLab application directory is /srv/conda/envs/notebook/share/jupyter/lab
[I 16:08:32.292 NotebookApp] nteract extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/nteract_on_jupyter
[I 16:08:32.295 NotebookApp] Serving notebooks from local directory: /home/jovyan
[I 16:08:32.295 NotebookApp] Jupyter Notebook 6.4.12 is running at:
[I 16:08:32.295 NotebookApp] http://ec43c0bfdd1c:8888/
[I 16:08:32.295 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[W 16:08:32.311 NotebookApp] No web browser found: could not locate runnable browser.
[W 18:35:16.304 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46?1695580515319 (172.24.0.1): Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:16.305 NotebookApp] Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:16.305 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46?1695580515319 (172.24.0.1) 3.240000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:16.306 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70?1695580515287 (172.24.0.1): Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:16.306 NotebookApp] Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:16.307 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70?1695580515287 (172.24.0.1) 3.710000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:17.191 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46/channels?session_id=fff1e8cd-e5ec-4c50-aa52-39453f3725a1 (172.24.0.1): Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:17.240 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46/channels?session_id=fff1e8cd-e5ec-4c50-aa52-39453f3725a1 (172.24.0.1) 51.310000ms referer=None
[W 18:35:17.278 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46?1695580516321 (172.24.0.1): Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:17.278 NotebookApp] Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:17.279 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46?1695580516321 (172.24.0.1) 1.580000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:17.352 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70/channels?session_id=f7374128-667a-4aca-b3b3-74475c88d8c5 (172.24.0.1): Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:17.353 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70/channels?session_id=f7374128-667a-4aca-b3b3-74475c88d8c5 (172.24.0.1) 3.800000ms referer=None
[W 18:35:17.389 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70?1695580516433 (172.24.0.1): Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:17.389 NotebookApp] Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:17.389 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70?1695580516433 (172.24.0.1) 1.510000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:18.785 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46/channels?session_id=fff1e8cd-e5ec-4c50-aa52-39453f3725a1 (172.24.0.1): Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:18.787 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46/channels?session_id=fff1e8cd-e5ec-4c50-aa52-39453f3725a1 (172.24.0.1) 3.660000ms referer=None
[W 18:35:18.821 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46?1695580517862 (172.24.0.1): Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:18.821 NotebookApp] Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:18.822 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46?1695580517862 (172.24.0.1) 1.680000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:19.953 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05?1695580518994 (172.24.0.1): Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:35:19.953 NotebookApp] Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:35:19.954 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05?1695580518994 (172.24.0.1) 1.780000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:20.002 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70/channels?session_id=f7374128-667a-4aca-b3b3-74475c88d8c5 (172.24.0.1): Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:20.003 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70/channels?session_id=f7374128-667a-4aca-b3b3-74475c88d8c5 (172.24.0.1) 3.840000ms referer=None
[W 18:35:20.038 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70?1695580519083 (172.24.0.1): Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:20.038 NotebookApp] Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:20.039 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70?1695580519083 (172.24.0.1) 1.510000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:21.008 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05/channels?session_id=ec41dc3b-3669-4dea-8c71-cfe846a6fc97 (172.24.0.1): Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:35:21.009 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05/channels?session_id=ec41dc3b-3669-4dea-8c71-cfe846a6fc97 (172.24.0.1) 3.720000ms referer=None
[W 18:35:21.141 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05?1695580520112 (172.24.0.1): Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:35:21.141 NotebookApp] Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:35:21.142 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05?1695580520112 (172.24.0.1) 2.030000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:23.042 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46/channels?session_id=fff1e8cd-e5ec-4c50-aa52-39453f3725a1 (172.24.0.1): Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:23.044 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46/channels?session_id=fff1e8cd-e5ec-4c50-aa52-39453f3725a1 (172.24.0.1) 4.130000ms referer=None
[W 18:35:23.089 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46?1695580522132 (172.24.0.1): Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:23.089 NotebookApp] Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:23.090 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46?1695580522132 (172.24.0.1) 1.580000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:24.000 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05/channels?session_id=ec41dc3b-3669-4dea-8c71-cfe846a6fc97 (172.24.0.1): Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:35:24.002 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05/channels?session_id=ec41dc3b-3669-4dea-8c71-cfe846a6fc97 (172.24.0.1) 4.250000ms referer=None
[W 18:35:24.041 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05?1695580523081 (172.24.0.1): Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:35:24.041 NotebookApp] Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:35:24.042 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05?1695580523081 (172.24.0.1) 1.850000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:26.202 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722?1695580524988 (172.24.0.1): Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:35:26.202 NotebookApp] Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:35:26.202 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722?1695580524988 (172.24.0.1) 1.610000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:26.413 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70/channels?session_id=f7374128-667a-4aca-b3b3-74475c88d8c5 (172.24.0.1): Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:26.414 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70/channels?session_id=f7374128-667a-4aca-b3b3-74475c88d8c5 (172.24.0.1) 3.610000ms referer=None
[W 18:35:26.814 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70?1695580525666 (172.24.0.1): Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:26.815 NotebookApp] Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:26.815 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70?1695580525666 (172.24.0.1) 1.980000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:27.559 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722/channels?session_id=6fd54c76-0cbb-4af9-ad17-183b07a1496a (172.24.0.1): Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:35:27.560 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722/channels?session_id=6fd54c76-0cbb-4af9-ad17-183b07a1496a (172.24.0.1) 3.610000ms referer=None
[W 18:35:27.595 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722?1695580526636 (172.24.0.1): Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:35:27.596 NotebookApp] Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:35:27.596 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722?1695580526636 (172.24.0.1) 1.450000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:28.024 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05/channels?session_id=ec41dc3b-3669-4dea-8c71-cfe846a6fc97 (172.24.0.1): Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:35:28.025 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05/channels?session_id=ec41dc3b-3669-4dea-8c71-cfe846a6fc97 (172.24.0.1) 4.010000ms referer=None
[W 18:35:28.069 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05?1695580527112 (172.24.0.1): Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:35:28.069 NotebookApp] Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:35:28.070 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05?1695580527112 (172.24.0.1) 2.010000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:29.050 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46/channels?session_id=fff1e8cd-e5ec-4c50-aa52-39453f3725a1 (172.24.0.1): Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:29.052 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46/channels?session_id=fff1e8cd-e5ec-4c50-aa52-39453f3725a1 (172.24.0.1) 4.970000ms referer=None
[W 18:35:29.086 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46?1695580528131 (172.24.0.1): Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:29.086 NotebookApp] Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:29.087 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46?1695580528131 (172.24.0.1) 1.770000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:29.196 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70/channels?session_id=f7374128-667a-4aca-b3b3-74475c88d8c5 (172.24.0.1): Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:29.198 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70/channels?session_id=f7374128-667a-4aca-b3b3-74475c88d8c5 (172.24.0.1) 3.980000ms referer=None
[W 18:35:29.228 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70?1695580528272 (172.24.0.1): Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:29.228 NotebookApp] Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:29.230 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70?1695580528272 (172.24.0.1) 2.680000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:30.254 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722/channels?session_id=6fd54c76-0cbb-4af9-ad17-183b07a1496a (172.24.0.1): Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:35:30.256 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722/channels?session_id=6fd54c76-0cbb-4af9-ad17-183b07a1496a (172.24.0.1) 3.940000ms referer=None
[W 18:35:30.292 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722?1695580529333 (172.24.0.1): Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:35:30.292 NotebookApp] Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:35:30.292 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722?1695580529333 (172.24.0.1) 1.500000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:37.185 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05/channels?session_id=ec41dc3b-3669-4dea-8c71-cfe846a6fc97 (172.24.0.1): Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:35:37.187 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05/channels?session_id=ec41dc3b-3669-4dea-8c71-cfe846a6fc97 (172.24.0.1) 4.400000ms referer=None
[W 18:35:37.286 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05?1695580536274 (172.24.0.1): Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:35:37.287 NotebookApp] Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:35:37.288 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05?1695580536274 (172.24.0.1) 1.970000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:38.235 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722/channels?session_id=6fd54c76-0cbb-4af9-ad17-183b07a1496a (172.24.0.1): Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:35:38.237 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722/channels?session_id=6fd54c76-0cbb-4af9-ad17-183b07a1496a (172.24.0.1) 3.990000ms referer=None
[W 18:35:38.268 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722?1695580537312 (172.24.0.1): Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:35:38.268 NotebookApp] Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:35:38.269 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722?1695580537312 (172.24.0.1) 2.120000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:38.737 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70/channels?session_id=f7374128-667a-4aca-b3b3-74475c88d8c5 (172.24.0.1): Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:38.738 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70/channels?session_id=f7374128-667a-4aca-b3b3-74475c88d8c5 (172.24.0.1) 3.700000ms referer=None
[W 18:35:38.770 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70?1695580537812 (172.24.0.1): Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:38.771 NotebookApp] Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:35:38.771 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70?1695580537812 (172.24.0.1) 1.680000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:50.588 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46/channels?session_id=fff1e8cd-e5ec-4c50-aa52-39453f3725a1 (172.24.0.1): Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:50.590 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46/channels?session_id=fff1e8cd-e5ec-4c50-aa52-39453f3725a1 (172.24.0.1) 4.110000ms referer=None
[W 18:35:50.683 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46?1695580549673 (172.24.0.1): Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:50.684 NotebookApp] Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:35:50.685 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46?1695580549673 (172.24.0.1) 2.600000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:35:51.373 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722/channels?session_id=6fd54c76-0cbb-4af9-ad17-183b07a1496a (172.24.0.1): Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:35:51.375 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722/channels?session_id=6fd54c76-0cbb-4af9-ad17-183b07a1496a (172.24.0.1) 4.310000ms referer=None
[W 18:35:51.415 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722?1695580550459 (172.24.0.1): Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:35:51.415 NotebookApp] Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:35:51.416 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722?1695580550459 (172.24.0.1) 1.570000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:36:02.697 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70/channels?session_id=f7374128-667a-4aca-b3b3-74475c88d8c5 (172.24.0.1): Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:36:02.698 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70/channels?session_id=f7374128-667a-4aca-b3b3-74475c88d8c5 (172.24.0.1) 3.890000ms referer=None
[W 18:36:02.791 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70?1695580561775 (172.24.0.1): Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:36:02.791 NotebookApp] Kernel does not exist: 3a24f5f2-8c66-4d3b-b628-8f1214b13a70
[W 18:36:02.792 NotebookApp] 404 GET /api/kernels/3a24f5f2-8c66-4d3b-b628-8f1214b13a70?1695580561775 (172.24.0.1) 2.250000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:36:07.404 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05/channels?session_id=ec41dc3b-3669-4dea-8c71-cfe846a6fc97 (172.24.0.1): Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:36:07.406 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05/channels?session_id=ec41dc3b-3669-4dea-8c71-cfe846a6fc97 (172.24.0.1) 3.800000ms referer=None
[W 18:36:07.444 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05?1695580566490 (172.24.0.1): Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:36:07.444 NotebookApp] Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:36:07.445 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05?1695580566490 (172.24.0.1) 1.880000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:36:17.495 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46/channels?session_id=fff1e8cd-e5ec-4c50-aa52-39453f3725a1 (172.24.0.1): Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:36:17.496 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46/channels?session_id=fff1e8cd-e5ec-4c50-aa52-39453f3725a1 (172.24.0.1) 3.880000ms referer=None
[W 18:36:17.589 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46?1695580576580 (172.24.0.1): Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:36:17.589 NotebookApp] Kernel does not exist: f17b8960-2abd-4c08-9f35-1ca74380af46
[W 18:36:17.590 NotebookApp] 404 GET /api/kernels/f17b8960-2abd-4c08-9f35-1ca74380af46?1695580576580 (172.24.0.1) 1.480000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:36:17.798 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05/channels?session_id=ec41dc3b-3669-4dea-8c71-cfe846a6fc97 (172.24.0.1): Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:36:17.800 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05/channels?session_id=ec41dc3b-3669-4dea-8c71-cfe846a6fc97 (172.24.0.1) 3.620000ms referer=None
[W 18:36:17.834 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05?1695580576877 (172.24.0.1): Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:36:17.834 NotebookApp] Kernel does not exist: 58eb9189-d43a-4c35-9d36-e5414dab6d05
[W 18:36:17.835 NotebookApp] 404 GET /api/kernels/58eb9189-d43a-4c35-9d36-e5414dab6d05?1695580576877 (172.24.0.1) 2.080000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:36:24.697 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722/channels?session_id=6fd54c76-0cbb-4af9-ad17-183b07a1496a (172.24.0.1): Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:36:24.699 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722/channels?session_id=6fd54c76-0cbb-4af9-ad17-183b07a1496a (172.24.0.1) 3.610000ms referer=None
[W 18:36:24.786 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722?1695580583778 (172.24.0.1): Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:36:24.786 NotebookApp] Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:36:24.786 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722?1695580583778 (172.24.0.1) 1.720000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:36:37.808 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722/channels?session_id=6fd54c76-0cbb-4af9-ad17-183b07a1496a (172.24.0.1): Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:36:37.810 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722/channels?session_id=6fd54c76-0cbb-4af9-ad17-183b07a1496a (172.24.0.1) 4.880000ms referer=None
[W 18:36:37.888 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722?1695580596887 (172.24.0.1): Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:36:37.888 NotebookApp] Kernel does not exist: b867717e-21cf-493f-8466-4abb12164722
[W 18:36:37.889 NotebookApp] 404 GET /api/kernels/b867717e-21cf-493f-8466-4abb12164722?1695580596887 (172.24.0.1) 1.770000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[I 19:18:37.605 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 0.760000ms
[I 2023-09-24 19:18:41.250 LabApp] Build is up to date
[I 19:18:43.361 NotebookApp] Kernel started: 84bd03ed-1265-49fa-8be6-3bd3035fac8b, name: xoctave
[I 19:18:43.365 NotebookApp] Kernel started: c7755f10-09ab-48e6-9ad2-a9d76fcc55ea, name: xoctave
[I 19:18:43.369 NotebookApp] Kernel started: ddff455e-085d-4c53-8006-3640aad511ed, name: xoctave
[I 19:18:43.396 NotebookApp] Kernel started: 4d49571e-7ba7-401e-b540-f7a0844d5ee2, name: xoctave
Serving notebooks from local directory: /home/jovyan
4 active kernels
Jupyter Notebook 6.4.12 is running at:
http://ec43c0bfdd1c:8888/
Serving notebooks from local directory: /home/jovyan
4 active kernels
Jupyter Notebook 6.4.12 is running at:
http://ec43c0bfdd1c:8888/
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
Run with XEUS 3.0.5
Run with XEUS 3.0.5
Run with XEUS 3.0.5
[W 19:18:45.027 NotebookApp] Got events for closed stream <zmq.eventloop.zmqstream.ZMQStream object at 0x7f5a9be05410>
[I 23:11:29.533 NotebookApp] Starting buffering for 4d49571e-7ba7-401e-b540-f7a0844d5ee2:69573aed-9fc0-4358-9708-fc3292ec82b1
[I 23:11:29.538 NotebookApp] Starting buffering for c7755f10-09ab-48e6-9ad2-a9d76fcc55ea:777b88dc-13bf-4ab8-8f6e-f649767380fe
[I 23:11:29.540 NotebookApp] Starting buffering for ddff455e-085d-4c53-8006-3640aad511ed:cb76e92b-6aa8-4362-aab6-8cfafcecd1e9
[I 23:11:29.541 NotebookApp] Starting buffering for 84bd03ed-1265-49fa-8be6-3bd3035fac8b:c998d0f6-86d0-4918-b71b-2b76fd9189d5
[I 23:11:47.146 NotebookApp] Restoring connection for ddff455e-085d-4c53-8006-3640aad511ed:cb76e92b-6aa8-4362-aab6-8cfafcecd1e9
[I 23:11:47.307 NotebookApp] Restoring connection for c7755f10-09ab-48e6-9ad2-a9d76fcc55ea:777b88dc-13bf-4ab8-8f6e-f649767380fe
[I 23:11:47.434 NotebookApp] Restoring connection for 84bd03ed-1265-49fa-8be6-3bd3035fac8b:c998d0f6-86d0-4918-b71b-2b76fd9189d5
[I 23:11:47.999 NotebookApp] Starting buffering for 84bd03ed-1265-49fa-8be6-3bd3035fac8b:c998d0f6-86d0-4918-b71b-2b76fd9189d5
[I 23:11:48.000 NotebookApp] Starting buffering for c7755f10-09ab-48e6-9ad2-a9d76fcc55ea:777b88dc-13bf-4ab8-8f6e-f649767380fe
[I 23:11:48.003 NotebookApp] Starting buffering for 4d49571e-7ba7-401e-b540-f7a0844d5ee2:5dc4b662-4662-4cf5-80b8-36738fafd5df
[I 23:11:48.004 NotebookApp] Starting buffering for ddff455e-085d-4c53-8006-3640aad511ed:cb76e92b-6aa8-4362-aab6-8cfafcecd1e9
[I 2023-09-25 13:00:59.751 LabApp] Build is up to date
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)

xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 423761
Encode time: 21012
Send time: 1060
Draw time: 461352
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[80 140 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[245 59.2/2 0.0005];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 344992
Encode time: 19832
Send time: 1320
Draw time: 381415
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0  97.9 2.001
50 108.8 2.021
100  118.4 2.018
250 127.4  2.019
500 137.3 2.023
1000 145.9 2.028
];

originalsamplemVnpH=[...
%pH mV
9.697 -17
9.709 -17.3
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[95 160 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
list
string: 160
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[250 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(log10([Cunosolid Cuall]))-1 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 342767
Encode time: 20836
Send time: 1212
Draw time: 386435
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 13:03:00.167 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 13:03:00.233 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[I 13:03:00.290 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 13:03:01.670 NotebookApp] Starting buffering for 4d49571e-7ba7-401e-b540-f7a0844d5ee2:e6534414-bc84-4b29-8d81-aee6445e7eff
[I 13:03:01.671 NotebookApp] Starting buffering for 84bd03ed-1265-49fa-8be6-3bd3035fac8b:8525a4ae-56c8-4df6-99bc-9aac18172191
[I 13:03:01.671 NotebookApp] Starting buffering for ddff455e-085d-4c53-8006-3640aad511ed:0a539bff-4a2b-43ff-ba4e-c6d951788a6c
[I 13:03:01.672 NotebookApp] Starting buffering for c7755f10-09ab-48e6-9ad2-a9d76fcc55ea:d26eff31-574e-4190-973b-ded6f9ccd1c2
[I 2023-09-25 13:34:54.732 LabApp] Build is up to date
xvfb-run: error: Xvfb failed to start
xvfb-run: error: Xvfb failed to start
[W 14:36:59.513 NotebookApp] Collisions detected in /home/jovyan/.jupyter/jupyter_notebook_config.py and /home/jovyan/.jupyter/jupyter_notebook_config.json config files. /home/jovyan/.jupyter/jupyter_notebook_config.json has higher priority: {
      "NotebookApp": {
        "password": "'' ignored, using 'argon2:$argon2id$v=19$m=10240,t=10,p=8$ZmkKwBPY7SHyhu/M4lUPdg$tdk6jy8Z9Fj2eCjHXTJCGDWY8OT4vNNruv21gO7uNc8'"
      }
    }
[W 2023-09-25 14:37:02.747 LabApp] 'ip' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-09-25 14:37:02.747 LabApp] 'token' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-09-25 14:37:02.747 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-09-25 14:37:02.747 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[I 2023-09-25 14:37:02.764 LabApp] JupyterLab extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/jupyterlab
[I 2023-09-25 14:37:02.764 LabApp] JupyterLab application directory is /srv/conda/envs/notebook/share/jupyter/lab
[I 14:37:02.776 NotebookApp] nteract extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/nteract_on_jupyter
[I 14:37:02.779 NotebookApp] Serving notebooks from local directory: /home/jovyan
[I 14:37:02.780 NotebookApp] Jupyter Notebook 6.4.12 is running at:
[I 14:37:02.780 NotebookApp] http://ec43c0bfdd1c:8888/
[I 14:37:02.780 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[W 14:37:02.807 NotebookApp] No web browser found: could not locate runnable browser.
[I 2023-09-25 22:09:29.922 LabApp] Build is up to date
[I 22:09:36.061 NotebookApp] Kernel started: 3f117edb-981f-49bb-be28-8042fe7e20d9, name: xoctave
[I 22:09:36.064 NotebookApp] Kernel started: a86b19ff-71ba-4a9a-b941-3414b1bf8814, name: xoctave
[I 22:09:36.068 NotebookApp] Kernel started: f325cdb1-613b-4446-9710-28384aa6acac, name: xoctave
Serving notebooks from local directory: /home/jovyan
3 active kernels
Jupyter Notebook 6.4.12 is running at:
http://ec43c0bfdd1c:8888/
OpenGL vendor: VMware, Inc.
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
Run with XEUS 3.0.5
Run with XEUS 3.0.5
[I 22:13:16.303 NotebookApp] Kernel started: b0ea349d-54e8-429d-9ad1-d9975dadcbe6, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 22:13:16.769 NotebookApp] Starting buffering for f325cdb1-613b-4446-9710-28384aa6acac:5edb51b0-a527-46f1-9266-c4b9721f659b
[W 00:54:46.995 NotebookApp] WebSocket ping timeout after 119888 ms.
[W 00:54:47.391 NotebookApp] WebSocket ping timeout after 119890 ms.
[W 00:54:47.718 NotebookApp] WebSocket ping timeout after 119893 ms.
[W 00:54:48.057 NotebookApp] WebSocket ping timeout after 119807 ms.
[I 00:54:51.997 NotebookApp] Starting buffering for 3f117edb-981f-49bb-be28-8042fe7e20d9:07f02597-6e6f-44c8-b5b3-07e913691a30
[I 00:54:52.392 NotebookApp] Starting buffering for a86b19ff-71ba-4a9a-b941-3414b1bf8814:5e44f835-d577-40e6-b37f-bb73160e7933
[I 00:54:52.719 NotebookApp] Starting buffering for f325cdb1-613b-4446-9710-28384aa6acac:5e8666a6-15b9-4028-80ae-ab72e825a7a4
[I 00:54:53.059 NotebookApp] Starting buffering for b0ea349d-54e8-429d-9ad1-d9975dadcbe6:a8cf82fc-4aaa-4e5c-9777-f2044ad67f3d
[I 00:56:26.850 NotebookApp] Restoring connection for 3f117edb-981f-49bb-be28-8042fe7e20d9:07f02597-6e6f-44c8-b5b3-07e913691a30
[I 00:56:37.802 NotebookApp] Restoring connection for b0ea349d-54e8-429d-9ad1-d9975dadcbe6:a8cf82fc-4aaa-4e5c-9777-f2044ad67f3d
[W 00:57:56.851 NotebookApp] WebSocket ping timeout after 90001 ms.
[I 00:58:01.853 NotebookApp] Starting buffering for 3f117edb-981f-49bb-be28-8042fe7e20d9:07f02597-6e6f-44c8-b5b3-07e913691a30
[W 00:58:07.803 NotebookApp] WebSocket ping timeout after 90000 ms.
[I 00:58:12.804 NotebookApp] Starting buffering for b0ea349d-54e8-429d-9ad1-d9975dadcbe6:a8cf82fc-4aaa-4e5c-9777-f2044ad67f3d
[I 00:58:16.214 NotebookApp] Restoring connection for a86b19ff-71ba-4a9a-b941-3414b1bf8814:5e44f835-d577-40e6-b37f-bb73160e7933
[I 00:58:16.554 NotebookApp] Restoring connection for f325cdb1-613b-4446-9710-28384aa6acac:5e8666a6-15b9-4028-80ae-ab72e825a7a4
[I 00:58:17.068 NotebookApp] Restoring connection for b0ea349d-54e8-429d-9ad1-d9975dadcbe6:a8cf82fc-4aaa-4e5c-9777-f2044ad67f3d
[I 00:58:40.705 NotebookApp] Restoring connection for 3f117edb-981f-49bb-be28-8042fe7e20d9:07f02597-6e6f-44c8-b5b3-07e913691a30
[W 08:12:10.706 NotebookApp] WebSocket ping timeout after 119954 ms.
[I 08:12:15.718 NotebookApp] Starting buffering for 3f117edb-981f-49bb-be28-8042fe7e20d9:07f02597-6e6f-44c8-b5b3-07e913691a30
[W 08:12:16.216 NotebookApp] WebSocket ping timeout after 119965 ms.
[W 08:12:16.555 NotebookApp] WebSocket ping timeout after 119961 ms.
[W 08:12:17.070 NotebookApp] WebSocket ping timeout after 119966 ms.
[I 08:12:21.218 NotebookApp] Starting buffering for a86b19ff-71ba-4a9a-b941-3414b1bf8814:5e44f835-d577-40e6-b37f-bb73160e7933
[I 08:12:21.557 NotebookApp] Starting buffering for f325cdb1-613b-4446-9710-28384aa6acac:5e8666a6-15b9-4028-80ae-ab72e825a7a4
[I 08:12:22.072 NotebookApp] Starting buffering for b0ea349d-54e8-429d-9ad1-d9975dadcbe6:a8cf82fc-4aaa-4e5c-9777-f2044ad67f3d
[I 08:13:56.365 NotebookApp] Restoring connection for 3f117edb-981f-49bb-be28-8042fe7e20d9:07f02597-6e6f-44c8-b5b3-07e913691a30
[I 08:14:01.942 NotebookApp] Restoring connection for f325cdb1-613b-4446-9710-28384aa6acac:5e8666a6-15b9-4028-80ae-ab72e825a7a4
[I 08:14:02.391 NotebookApp] Restoring connection for b0ea349d-54e8-429d-9ad1-d9975dadcbe6:a8cf82fc-4aaa-4e5c-9777-f2044ad67f3d
[I 08:14:46.637 NotebookApp] Restoring connection for a86b19ff-71ba-4a9a-b941-3414b1bf8814:5e44f835-d577-40e6-b37f-bb73160e7933
[I 13:03:41.501 NotebookApp] Starting buffering for b0ea349d-54e8-429d-9ad1-d9975dadcbe6:a8cf82fc-4aaa-4e5c-9777-f2044ad67f3d
[I 13:03:41.506 NotebookApp] Starting buffering for f325cdb1-613b-4446-9710-28384aa6acac:5e8666a6-15b9-4028-80ae-ab72e825a7a4
[I 13:03:41.507 NotebookApp] Starting buffering for a86b19ff-71ba-4a9a-b941-3414b1bf8814:5e44f835-d577-40e6-b37f-bb73160e7933
[I 13:03:41.508 NotebookApp] Starting buffering for 3f117edb-981f-49bb-be28-8042fe7e20d9:07f02597-6e6f-44c8-b5b3-07e913691a30
[I 2023-09-26 14:26:48.430 LabApp] Build is up to date
[I 15:33:11.045 NotebookApp] Starting buffering for f325cdb1-613b-4446-9710-28384aa6acac:56ee17bb-d638-4b8c-9bab-011f9230feb5
[I 15:33:11.046 NotebookApp] Starting buffering for b0ea349d-54e8-429d-9ad1-d9975dadcbe6:8594f015-2f4d-49a0-a18f-3cf36fd73289
[I 15:33:11.047 NotebookApp] Starting buffering for 3f117edb-981f-49bb-be28-8042fe7e20d9:819ef338-8a49-4f96-a00f-ea817fe3824c
[I 15:33:11.048 NotebookApp] Starting buffering for a86b19ff-71ba-4a9a-b941-3414b1bf8814:37850291-10c8-4871-956c-7b4f24b645d5
[I 2023-09-26 15:33:29.744 LabApp] Build is up to date
[W 18:07:12.541 NotebookApp] 403 PUT /lab/api/workspaces/default?1695751633967 (172.24.0.1): '_xsrf' argument missing from POST
[W 2023-09-26 18:07:12.541 LabApp] wrote error: "'_xsrf' argument missing from POST"
[W 18:07:12.543 NotebookApp] 403 PUT /lab/api/workspaces/default?1695751633967 (172.24.0.1) 2.360000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[W 18:07:13.338 NotebookApp] 403 PUT /lab/api/workspaces/default?1695751634761 (172.24.0.1): '_xsrf' argument missing from POST
[W 2023-09-26 18:07:13.339 LabApp] wrote error: "'_xsrf' argument missing from POST"
[W 18:07:13.340 NotebookApp] 403 PUT /lab/api/workspaces/default?1695751634761 (172.24.0.1) 2.420000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[I 19:01:21.210 NotebookApp] Starting buffering for 3f117edb-981f-49bb-be28-8042fe7e20d9:de574718-7a16-48e8-8b65-01d7f43a1b03
[I 19:01:21.211 NotebookApp] Starting buffering for a86b19ff-71ba-4a9a-b941-3414b1bf8814:c1a27a68-f0d5-4bcf-9ff7-35b24a515341
[I 19:01:21.212 NotebookApp] Starting buffering for b0ea349d-54e8-429d-9ad1-d9975dadcbe6:2999313d-8024-4427-a67c-018898d3481a
[I 19:01:21.213 NotebookApp] Starting buffering for f325cdb1-613b-4446-9710-28384aa6acac:666a15bd-ae89-426a-9f28-33b7d75cf245
[I 19:01:26.430 NotebookApp] Restoring connection for 3f117edb-981f-49bb-be28-8042fe7e20d9:de574718-7a16-48e8-8b65-01d7f43a1b03
[I 19:01:26.564 NotebookApp] Restoring connection for a86b19ff-71ba-4a9a-b941-3414b1bf8814:c1a27a68-f0d5-4bcf-9ff7-35b24a515341
[I 19:01:26.666 NotebookApp] Restoring connection for b0ea349d-54e8-429d-9ad1-d9975dadcbe6:2999313d-8024-4427-a67c-018898d3481a
[I 19:01:26.750 NotebookApp] Restoring connection for f325cdb1-613b-4446-9710-28384aa6acac:666a15bd-ae89-426a-9f28-33b7d75cf245
[I 19:01:26.924 NotebookApp] Starting buffering for f325cdb1-613b-4446-9710-28384aa6acac:666a15bd-ae89-426a-9f28-33b7d75cf245
[I 19:01:26.925 NotebookApp] Starting buffering for 3f117edb-981f-49bb-be28-8042fe7e20d9:de574718-7a16-48e8-8b65-01d7f43a1b03
[I 19:01:26.926 NotebookApp] Starting buffering for b0ea349d-54e8-429d-9ad1-d9975dadcbe6:2999313d-8024-4427-a67c-018898d3481a
[I 19:01:26.927 NotebookApp] Starting buffering for a86b19ff-71ba-4a9a-b941-3414b1bf8814:c1a27a68-f0d5-4bcf-9ff7-35b24a515341
[I 2023-09-26 19:59:25.026 LabApp] Build is up to date
[W 19:59:26.192 NotebookApp] 404 GET /api/contents/LECTURES/13Hydrocomplexication.ipynb?content=0&1695758366190 (172.24.0.1): file or directory does not exist: 'LECTURES/13Hydrocomplexication.ipynb'
[W 19:59:26.192 NotebookApp] file or directory does not exist: 'LECTURES/13Hydrocomplexication.ipynb'
[W 19:59:26.193 NotebookApp] 404 GET /api/contents/LECTURES/13Hydrocomplexication.ipynb?content=0&1695758366190 (172.24.0.1) 1.740000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/LECTURES/13Hydrocomplexication.ipynb
[I 19:59:36.702 NotebookApp] 301 GET /lab/ (172.24.0.1) 1.060000ms
[I 19:59:36.867 NotebookApp] Starting buffering for 3f117edb-981f-49bb-be28-8042fe7e20d9:b706abe1-bd08-4dc1-b016-d6c045bfb7ae
[I 19:59:36.867 NotebookApp] Starting buffering for a86b19ff-71ba-4a9a-b941-3414b1bf8814:a57d87f5-f855-4173-9041-1467ed0f34cd
[I 19:59:36.868 NotebookApp] Starting buffering for f325cdb1-613b-4446-9710-28384aa6acac:2bc5b4bc-61d7-4442-ae0b-542f108891ef
[I 19:59:36.868 NotebookApp] Starting buffering for b0ea349d-54e8-429d-9ad1-d9975dadcbe6:9a195d33-969d-4c2f-bbb6-faead2393ddd
[I 2023-09-26 19:59:39.927 LabApp] Build is up to date
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 42.2 2.034
50 44.2 2.026  %seems to be an outlier
150 69.7 2.022
400 76.6 2.023
900 82.2 2.026
];

originalsamplemVnpH=[...
%pH mV
7.461 -62.1
7.467 -62
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[40 80 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 30
list
string: 40
list
string: 50
list
string: 60
list
string: 70
list
string: 80
list
string: 90
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[190 59.2/2 0.0006];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 30
list
string: 40
list
string: 50
list
string: 60
list
string: 70
list
string: 80
list
string: 90
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
plot([-9.672 -9.672],[min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)],'r--') % model from CHEAQS

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([-12 max(log10(CuTplus))+0.2 min(mVAoriginal)-(max(Emeas)-mean(mVAoriginal))/4 max(Emeas)+0.2*max(Emeas)])


% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 427161
Encode time: 22313
Send time: 1468
Draw time: 547001
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
CHEAQS=-9.672
[I 20:03:40.436 NotebookApp] Saving file at /NDAsample_electrodeA_allcalibs.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[80 140 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[245 59.2/2 0.0005];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 361677
Encode time: 18984
Send time: 1029
Draw time: 397221
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
[W 20:07:17.939 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb?1695758837936 (172.24.0.1): file or directory does not exist: 'pH8_0pt1uMCuT_electrodeA_metamethod.ipynb'
[W 20:07:17.939 NotebookApp] file or directory does not exist: 'pH8_0pt1uMCuT_electrodeA_metamethod.ipynb'
[W 20:07:17.940 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb?1695758837936 (172.24.0.1) 1.850000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
[W 20:07:17.966 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb?content=0&1695758837963 (172.24.0.1): file or directory does not exist: 'pH8_0pt1uMCuT_electrodeA_metamethod.ipynb'
[W 20:07:17.967 NotebookApp] file or directory does not exist: 'pH8_0pt1uMCuT_electrodeA_metamethod.ipynb'
[W 20:07:17.968 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb?content=0&1695758837963 (172.24.0.1) 3.340000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 20:07:17.980 NotebookApp] Uploading file to /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[W 20:07:18.029 NotebookApp] 409 PATCH /api/contents/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb?1695758838024 (172.24.0.1): File already exists: pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
[W 20:07:18.029 NotebookApp] File already exists: pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
[W 20:07:18.031 NotebookApp] 409 PATCH /api/contents/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb?1695758838024 (172.24.0.1) 4.730000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 20:09:18.042 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 20:11:18.095 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: % pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=data(:,1)'*1e-6; pHcalib=data(:,3); mV=data(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mVA)
    param=polyfit(log10[CuTplus(i) CuTplus(i+1)],[mVA(i) mVA(i+1)])
end

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: % pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=data(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mVA)
    param=polyfit(log10[CuTplus(i) CuTplus(i+1)],[mVA(i) mVA(i+1)])
end

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: % pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mVA)
    param=polyfit(log10[CuTplus(i) CuTplus(i+1)],[mVA(i) mVA(i+1)])
end

[I 20:13:18.141 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: % pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mVA)
    param=polyfit(log10[CuTplus(i) CuTplus(i+1)],[mVA(i) mVA(i+1)],1)
end

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: % pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mVA)
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mVA(i) mVA(i+1)],1)
end

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: % pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mVA)
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1)
end

Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: % pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1)
end

[I 20:15:18.170 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: % pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko')

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1)
    val=polyval(param,[log10(CuTplus(i)) log10(CuTplus(i+1))])
end

list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
string: 
string: 
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: % pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1)
    val=polyval(param,[log10(CuTplus(i))-1 log10(CuTplus(i+1))+1])
    plot([log10(CuTplus(i))-1 log10(CuTplus(i+1))+1],val,'k-')
end

list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: -2
list
string: 60
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: % pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1)
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2])
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
end

list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
string: 
string: 
[I 20:17:18.206 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: % pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1)
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    %ms=
end

list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
string: 
string: 
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: % pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1)
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2);
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: log[Cu
superscript
list
string: 2+
string: ]
list
string: mV
[I 20:19:18.251 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1)
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2);
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 321422
Encode time: 17067
Send time: 894
Draw time: 353685
[I 20:21:18.296 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]);
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 327038
Encode time: 20731
Send time: 617
Draw time: 364109
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]);
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 322061
Encode time: 16725
Send time: 857
Draw time: 352415
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,s,'ko')
Device pixel ratio: 1
Render time: 341327
Encode time: 15319
Send time: 716
Draw time: 370592
[I 20:23:18.329 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]);
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 348998
Encode time: 17723
Send time: 844
Draw time: 380945
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko')
Device pixel ratio: 1
Render time: 364392
Encode time: 15246
Send time: 592
Draw time: 392851
[I 20:25:18.361 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]);
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 321731
Encode time: 16909
Send time: 602
Draw time: 352756
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo)
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
Device pixel ratio: 1
Render time: 382641
Encode time: 15677
Send time: 596
Draw time: 412397
[I 20:27:18.389 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]);
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 322760
Encode time: 16592
Send time: 676
Draw time: 352970
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo)
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m)
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
Device pixel ratio: 1
Render time: 383078
Encode time: 16225
Send time: 1361
Draw time: 413537
[I 20:29:18.420 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]);
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 323493
Encode time: 16736
Send time: 691
Draw time: 354449
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
Device pixel ratio: 1
Render time: 386651
Encode time: 16866
Send time: 780
Draw time: 417918
[I 20:31:18.451 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]);
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 323465
Encode time: 16711
Send time: 667
Draw time: 355825
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')
Device pixel ratio: 1
Render time: 387153
Encode time: 16302
Send time: 958
Draw time: 418385
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]);
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 332022
Encode time: 17062
Send time: 630
Draw time: 362309
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')
Device pixel ratio: 1
Render time: 386731
Encode time: 16124
Send time: 641
Draw time: 419354
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
[I 20:33:18.480 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 20:33:25.897 NotebookApp] Kernel started: 4c618e73-b310-4d7f-b288-0e3350a79dab, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[80 140 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[245 59.2/2 0.0005];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 346289
Encode time: 19905
Send time: 1245
Draw time: 382459
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
%250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]);
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 321250
Encode time: 17025
Send time: 616
Draw time: 354797
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')
Device pixel ratio: 1
Render time: 418449
Encode time: 15687
Send time: 726
Draw time: 455723
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
[I 20:35:18.516 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 20:35:25.752 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_allcalibs.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]);
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 322805
Encode time: 16979
Send time: 4088
Draw time: 357046
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')
Device pixel ratio: 1
Render time: 385591
Encode time: 16051
Send time: 790
Draw time: 416079
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]);
    logCuT(i)=[log10(CuTplus(i))];
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 320167
Encode time: 16759
Send time: 904
Draw time: 350998
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')
Device pixel ratio: 1
Render time: 386284
Encode time: 16609
Send time: 1066
Draw time: 417006
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
[I 20:37:18.562 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 20:38:08.901 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 20:40:08.937 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 328769
Encode time: 16603
Send time: 728
Draw time: 359718
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')
Device pixel ratio: 1
Render time: 389413
Encode time: 16412
Send time: 749
Draw time: 419836
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

Device pixel ratio: 1
Render time: 235037
Encode time: 14192
Send time: 707
Draw time: 264994
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')


Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 323005
Encode time: 16814
Send time: 703
Draw time: 353809
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')
Device pixel ratio: 1
Render time: 398852
Encode time: 16721
Send time: 1039
Draw time: 430124
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b')


Device pixel ratio: 1
Render time: 316027
Encode time: 14535
Send time: 635
Draw time: 343851
[I 20:42:08.974 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 20:44:09.007 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 319356
Encode time: 16644
Send time: 689
Draw time: 349730
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-7.5:0.5:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')
    
Device pixel ratio: 1
Render time: 386082
Encode time: 17717
Send time: 929
Draw time: 418244
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b')


Device pixel ratio: 1
Render time: 329323
Encode time: 14626
Send time: 569
Draw time: 367411
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 321543
Encode time: 16899
Send time: 647
Draw time: 352869
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-7.5:0.5:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')
    
Device pixel ratio: 1
Render time: 388761
Encode time: 17601
Send time: 912
Draw time: 421026
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b')
plot(logCuTplot,mVcalc,'k-')


Device pixel ratio: 1
Render time: 298971
Encode time: 16527
Send time: 649
Draw time: 328589
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 327242
Encode time: 16796
Send time: 685
Draw time: 358362
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-7.5:0.5:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')
    
Device pixel ratio: 1
Render time: 391850
Encode time: 17446
Send time: 917
Draw time: 423765
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')


Device pixel ratio: 1
[I 20:46:09.041 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Render time: 341317
Encode time: 15926
Send time: 641
Draw time: 370464
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 320433
Encode time: 17053
Send time: 617
Draw time: 351145
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-7.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')
    
Device pixel ratio: 1
Render time: 405005
Encode time: 17227
Send time: 881
Draw time: 439084
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')


Device pixel ratio: 1
Render time: 341162
Encode time: 16525
Send time: 595
Draw time: 371951
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 323311
Encode time: 16858
Send time: 611
Draw time: 354528
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-7.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')
    
Device pixel ratio: 1
Render time: 388826
Encode time: 17711
Send time: 910
Draw time: 421141
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko')


Device pixel ratio: 1
Render time: 341672
Encode time: 18479
Send time: 920
Draw time: 377021
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 322264
Encode time: 16471
Send time: 735
Draw time: 352227
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-8.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-7.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')
    
Device pixel ratio: 1
Render time: 390160
Encode time: 17943
Send time: 856
Draw time: 422173
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko')


Device pixel ratio: 1
Render time: 340808
Encode time: 16065
Send time: 726
Draw time: 370737
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 328056
Encode time: 16688
Send time: 631
Draw time: 379281
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')
    
Device pixel ratio: 1
[I 20:48:09.091 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Render time: 410681
Encode time: 17705
Send time: 854
Draw time: 443325
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko')


Device pixel ratio: 1
Render time: 339500
Encode time: 16668
Send time: 673
Draw time: 370521
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko')

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)

Device pixel ratio: 1
Render time: 336933
Encode time: 16397
Send time: 609
Draw time: 366831
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 318567
Encode time: 16770
Send time: 629
Draw time: 348803
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')
    
Device pixel ratio: 1
Render time: 390637
Encode time: 17295
Send time: 871
Draw time: 422938
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko')

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)

Device pixel ratio: 1
Render time: 346291
Encode time: 18725
Send time: 921
Draw time: 383117
[I 20:50:09.139 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko')

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)

Device pixel ratio: 1
Render time: 342072
Encode time: 16726
Send time: 666
Draw time: 372316
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko')

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);

Device pixel ratio: 1
Render time: 338831
Encode time: 16650
Send time: 978
Draw time: 369281
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 320136
Encode time: 17094
Send time: 706
Draw time: 351425
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')
    
Device pixel ratio: 1
Render time: 389706
Encode time: 17039
Send time: 892
Draw time: 422510
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko')

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('mV')

Device pixel ratio: 1
Render time: 341030
Encode time: 17257
Send time: 740
Draw time: 372106
[I 20:52:09.172 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 319727
Encode time: 17214
Send time: 653
Draw time: 353981
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')
    
Device pixel ratio: 1
Render time: 391711
Encode time: 17377
Send time: 906
Draw time: 422827
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko')

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 354970
Encode time: 17024
Send time: 742
Draw time: 394211
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    %logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 320215
Encode time: 16738
Send time: 661
Draw time: 350469
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')
    
Device pixel ratio: 1
Render time: 386174
Encode time: 17088
Send time: 771
Draw time: 416703
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko')

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 340663
Encode time: 17125
Send time: 777
Draw time: 372707
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV')
Device pixel ratio: 1
Render time: 320571
Encode time: 16401
Send time: 647
Draw time: 350366
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')
    
Device pixel ratio: 1
Render time: 390295
Encode time: 17765
Send time: 879
Draw time: 432604
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko')

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 338051
Encode time: 17502
Send time: 852
Draw time: 371770
[I 20:54:09.204 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 346373
Encode time: 17272
Send time: 715
Draw time: 377555
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
Device pixel ratio: 1
Render time: 387416
Encode time: 17484
Send time: 942
Draw time: 419333
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 394036
Encode time: 18460
Send time: 1370
Draw time: 429404
[I 20:58:09.240 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 343299
Encode time: 17360
Send time: 869
Draw time: 375351
[I 21:00:09.274 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 21:00:25.745 NotebookApp] Starting buffering for 4c618e73-b310-4d7f-b288-0e3350a79dab:c85d8ab7-8961-40c3-9a32-6295e385d8a6
[W 21:00:52.349 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeB_metamethod.ipynb?1695762052363 (172.24.0.1): file or directory does not exist: 'pH8_0pt1uMCuT_electrodeB_metamethod.ipynb'
[W 21:00:52.349 NotebookApp] file or directory does not exist: 'pH8_0pt1uMCuT_electrodeB_metamethod.ipynb'
[W 21:00:52.349 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeB_metamethod.ipynb?1695762052363 (172.24.0.1) 1.840000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[W 21:00:52.459 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeB_metamethod.ipynb?content=0&1695762052475 (172.24.0.1): file or directory does not exist: 'pH8_0pt1uMCuT_electrodeB_metamethod.ipynb'
[W 21:00:52.460 NotebookApp] file or directory does not exist: 'pH8_0pt1uMCuT_electrodeB_metamethod.ipynb'
[W 21:00:52.460 NotebookApp] 404 GET /api/contents/pH8_0pt1uMCuT_electrodeB_metamethod.ipynb?content=0&1695762052475 (172.24.0.1) 1.870000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 21:00:52.468 NotebookApp] Uploading file to /pH8_0pt1uMCuT_electrodeB_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 322168
Encode time: 16954
Send time: 802
Draw time: 353735
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 397595
Encode time: 17506
Send time: 1280
Draw time: 429729
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 343919
Encode time: 15483
Send time: 747
Draw time: 376057
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
%100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 321324
Encode time: 16487
Send time: 933
Draw time: 352212
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 410398
Encode time: 17567
Send time: 7775
Draw time: 455460
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 340117
Encode time: 16485
Send time: 965
Draw time: 371127
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
%1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 355044
Encode time: 25712
Send time: 789
Draw time: 394951
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 395412
Encode time: 17513
Send time: 957
Draw time: 428091
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 349485
Encode time: 15536
Send time: 3749
Draw time: 382821
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 324202
Encode time: 16263
Send time: 912
Draw time: 355359
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 397027
Encode time: 17032
Send time: 964
Draw time: 428331
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 341750
Encode time: 15528
Send time: 625
Draw time: 371070
[I 21:02:52.524 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeB_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 319526
Encode time: 16511
Send time: 749
Draw time: 352664
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 388200
Encode time: 17580
Send time: 1003
Draw time: 422628
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 344653
Encode time: 16523
Send time: 720
Draw time: 377871
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 322634
Encode time: 17447
Send time: 766
Draw time: 356787
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 390089
Encode time: 17470
Send time: 995
Draw time: 423567
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 340834
Encode time: 16588
Send time: 838
Draw time: 371600
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
%100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 322518
Encode time: 16833
Send time: 762
Draw time: 354172
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 394339
Encode time: 17612
Send time: 4858
Draw time: 438237
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 340499
Encode time: 16064
Send time: 738
Draw time: 370928
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
%50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 321703
Encode time: 16457
Send time: 794
Draw time: 353058
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 392957
Encode time: 18245
Send time: 1082
Draw time: 428215
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 343541
Encode time: 16991
Send time: 802
Draw time: 373998
[I 21:04:52.560 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeB_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
%50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    %logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 319963
Encode time: 16317
Send time: 1001
Draw time: 350692
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 388934
Encode time: 19126
Send time: 1061
Draw time: 422757
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 339207
Encode time: 15771
Send time: 778
Draw time: 369257
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
%50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 321528
Encode time: 16468
Send time: 790
Draw time: 351194
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 393013
Encode time: 18272
Send time: 1059
Draw time: 425785
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 345769
Encode time: 16426
Send time: 823
Draw time: 376194
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
%0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 318812
Encode time: 16579
Send time: 915
Draw time: 349954
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 391006
Encode time: 17711
Send time: 1101
Draw time: 424261
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 338400
Encode time: 16971
Send time: 828
Draw time: 368594
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 321952
Encode time: 16449
Send time: 750
Draw time: 355485
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 391255
Encode time: 17789
Send time: 1085
Draw time: 423646
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 344596
Encode time: 16102
Send time: 767
Draw time: 375683
[I 21:06:52.699 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeB_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
%1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 321967
Encode time: 16786
Send time: 704
Draw time: 362576
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 390658
Encode time: 16711
Send time: 4228
Draw time: 425919
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 343001
Encode time: 15323
Send time: 954
Draw time: 372829
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
%50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 327650
Encode time: 16048
Send time: 796
Draw time: 359476
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 395062
Encode time: 18286
Send time: 1333
Draw time: 428001
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 340689
Encode time: 16833
Send time: 972
Draw time: 372374
[I 21:08:52.732 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeB_metamethod.ipynb
[I 21:09:40.476 NotebookApp] Saving file at /NDAsample_electrodeA_allcalibs.ipynb
[W 21:12:36.831 NotebookApp] 404 GET /api/contents/NDAriver_metamethod.ipynb?1695762756849 (172.24.0.1): file or directory does not exist: 'NDAriver_metamethod.ipynb'
[W 21:12:36.832 NotebookApp] file or directory does not exist: 'NDAriver_metamethod.ipynb'
[W 21:12:36.833 NotebookApp] 404 GET /api/contents/NDAriver_metamethod.ipynb?1695762756849 (172.24.0.1) 2.760000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_metamethod.ipynb
[W 21:12:36.853 NotebookApp] 404 GET /api/contents/NDAriver_metamethod.ipynb?content=0&1695762756871 (172.24.0.1): file or directory does not exist: 'NDAriver_metamethod.ipynb'
[W 21:12:36.854 NotebookApp] file or directory does not exist: 'NDAriver_metamethod.ipynb'
[W 21:12:36.855 NotebookApp] 404 GET /api/contents/NDAriver_metamethod.ipynb?content=0&1695762756871 (172.24.0.1) 2.810000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeB_metamethod.ipynb
[I 21:12:36.862 NotebookApp] Uploading file to /NDAriver_metamethod.ipynb
[I 21:14:36.911 NotebookApp] Saving file at /NDAriver_metamethod.ipynb
[I 21:16:36.948 NotebookApp] Saving file at /NDAriver_metamethod.ipynb
[I 21:18:36.981 NotebookApp] Saving file at /NDAriver_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
6.416	21.6
6.43	20.6
6.476	19.5
6.588	16.1
6.6	18.7
6.607	19
6.611	20.6
];

calibdata=[...
%volCu mV pH
0 1.76 85.4
50 1.757 116.1
150 1.758 129.9
400 1.76 147.1
900 1.754 164.1
1650 1.758 171.8
2650 1.764 175.3
];



Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 321409
Encode time: 16807
Send time: 717
Draw time: 351852
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 391502
Encode time: 17620
Send time: 980
Draw time: 424182
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 343547
Encode time: 15533
Send time: 603
Draw time: 373289
[I 21:20:37.018 NotebookApp] Saving file at /NDAriver_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
6.416	21.6
6.43	20.6
6.476	19.5
6.588	16.1
6.6	18.7
6.607	19
6.611	20.6
];

calibdata=[...
%volCu mV pH
0  85.4 1.76
50  116.1 1.757
150 129.9 1.758 
400 147.1 1.76 
900 164.1 1.754 
1650 171.8 1.758 
2650 175.3 1.764 
];



Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 323910
Encode time: 16666
Send time: 802
Draw time: 354922
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 392314
Encode time: 18275
Send time: 1015
Draw time: 424793
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 343156
Encode time: 17233
Send time: 1022
Draw time: 374606
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
6.416	21.6
6.43	20.6
6.476	19.5
6.588	16.1
6.6	18.7
6.607	19
6.611	20.6
];

calibdata=[...
%volCu mV pH
0  85.4 1.76
50  116.1 1.757
150 129.9 1.758 
400 147.1 1.76 
900 164.1 1.754 
1650 171.8 1.758 
%2650 175.3 1.764 
];



Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 318664
Encode time: 17517
Send time: 1015
Draw time: 351619
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 393127
Encode time: 18076
Send time: 944
Draw time: 426301
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 343665
Encode time: 16556
Send time: 790
Draw time: 374179
[I 21:22:37.055 NotebookApp] Saving file at /NDAriver_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
6.416	21.6
6.43	20.6
6.476	19.5
6.588	16.1
6.6	18.7
6.607	19
6.611	20.6
];

calibdata=[...
%volCu mV pH
0  85.4 1.76
50  116.1 1.757
150 129.9 1.758 
400 147.1 1.76 
900 164.1 1.754 
%1650 171.8 1.758 
%2650 175.3 1.764 
];



Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 323127
Encode time: 17318
Send time: 806
Draw time: 355507
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 390284
Encode time: 17817
Send time: 1022
Draw time: 423486
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 342359
Encode time: 17008
Send time: 930
Draw time: 374549
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
6.416	21.6
6.43	20.6
6.476	19.5
6.588	16.1
6.6	18.7
6.607	19
6.611	20.6
];

calibdata=[...
%volCu mV pH
0  85.4 1.76
50  116.1 1.757
150 129.9 1.758 
400 147.1 1.76 
900 164.1 1.754 
%1650 171.8 1.758 
%2650 175.3 1.764 
];



Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1.29E-07; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 320389
Encode time: 16684
Send time: 736
Draw time: 351664
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 391098
Encode time: 18001
Send time: 1000
Draw time: 424417
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 346485
Encode time: 17075
Send time: 4293
Draw time: 384968
[I 21:24:37.091 NotebookApp] Saving file at /NDAriver_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
6.611	20.6
];

calibdata=[...
%volCu mV pH
0  85.4 1.76
50  116.1 1.757
150 129.9 1.758 
400 147.1 1.76 
900 164.1 1.754 
%1650 171.8 1.758 
%2650 175.3 1.764 
];



Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1.29E-07; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 328041
Encode time: 17121
Send time: 868
Draw time: 361754
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 393523
Encode time: 17884
Send time: 4980
Draw time: 431972
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 345090
Encode time: 17067
Send time: 689
Draw time: 376717
[I 21:26:58.207 NotebookApp] Saving file at /NDAriver_metamethod.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

%plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([-10.946 -10.946],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 342311
Encode time: 16929
Send time: 3987
Draw time: 377317
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

%plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([-10.946 -10.946],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(-11)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 344595
Encode time: 18305
Send time: 693
Draw time: 376179
[I 21:30:58.243 NotebookApp] Saving file at /NDAriver_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
6.611	20.6
];

calibdata=[...
%volCu mV pH
0  85.4 1.76
50  116.1 1.757
150 129.9 1.758 
400 147.1 1.76 
900 164.1 1.754 
%1650 171.8 1.758 
%2650 175.3 1.764 
];



Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1.29E-07; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 326816
Encode time: 17172
Send time: 757
Draw time: 357431
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-12.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 395531
Encode time: 17847
Send time: 998
Draw time: 428149
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

%plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([-10.946 -10.946],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(-11)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 380625
Encode time: 17077
Send time: 1735
Draw time: 413201
[I 21:46:58.282 NotebookApp] Saving file at /NDAriver_metamethod.ipynb
[I 22:04:14.138 NotebookApp] Starting buffering for b0ea349d-54e8-429d-9ad1-d9975dadcbe6:5a417706-33e6-4d6b-a1d9-7541bb877e57
[I 22:04:57.415 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 22:05:07.813 NotebookApp] Starting buffering for f325cdb1-613b-4446-9710-28384aa6acac:c1b9b549-857d-4bcb-aa40-e4e9189400e7
[I 22:05:22.286 NotebookApp] Kernel started: aadcdfdb-87e0-446a-a93a-02b2b587eb66, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[W 22:05:41.845 NotebookApp] 404 GET /api/contents/pH10_0pt1uMCuT_electrodeA_metamethod.ipynb?1695765941842 (172.24.0.1): file or directory does not exist: 'pH10_0pt1uMCuT_electrodeA_metamethod.ipynb'
[W 22:05:41.845 NotebookApp] file or directory does not exist: 'pH10_0pt1uMCuT_electrodeA_metamethod.ipynb'
[W 22:05:41.846 NotebookApp] 404 GET /api/contents/pH10_0pt1uMCuT_electrodeA_metamethod.ipynb?1695765941842 (172.24.0.1) 1.990000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[W 22:05:41.862 NotebookApp] 404 GET /api/contents/pH10_0pt1uMCuT_electrodeA_metamethod.ipynb?content=0&1695765941861 (172.24.0.1): file or directory does not exist: 'pH10_0pt1uMCuT_electrodeA_metamethod.ipynb'
[W 22:05:41.863 NotebookApp] file or directory does not exist: 'pH10_0pt1uMCuT_electrodeA_metamethod.ipynb'
[W 22:05:41.864 NotebookApp] 404 GET /api/contents/pH10_0pt1uMCuT_electrodeA_metamethod.ipynb?content=0&1695765941861 (172.24.0.1) 2.290000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 22:05:41.870 NotebookApp] Uploading file to /pH10_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
9.697 -17
9.709 -17.3
];

calibdata=[...
%volCu mV pH
0  97.9 2.001
50 108.8 2.021
100  118.4 2.018
250 127.4  2.019
500 137.3 2.023
1000 145.9 2.028
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 325713
Encode time: 17130
Send time: 716
Draw time: 357783
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 402198
Encode time: 19938
Send time: 1547
Draw time: 439962
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 342029
Encode time: 16047
Send time: 907
Draw time: 375265
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
9.697 -17
9.709 -17.3
];

calibdata=[...
%volCu mV pH
0  97.9 2.001
%50 108.8 2.021
100  118.4 2.018
250 127.4  2.019
500 137.3 2.023
1000 145.9 2.028
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 321363
Encode time: 17236
Send time: 1031
Draw time: 353282
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 391585
Encode time: 18633
Send time: 1045
Draw time: 424633
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 345222
Encode time: 15814
Send time: 961
Draw time: 375474
[I 22:07:41.917 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
9.697 -17
9.709 -17.3
];

calibdata=[...
%volCu mV pH
0  97.9 2.001
50 108.8 2.021
100  118.4 2.018
250 127.4  2.019
500 137.3 2.023
1000 145.9 2.028
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 322848
Encode time: 17750
Send time: 903
Draw time: 354367
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 391537
Encode time: 18175
Send time: 956
Draw time: 424756
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 343021
Encode time: 16669
Send time: 684
Draw time: 372671
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
9.697 -17
9.709 -17.3
];

calibdata=[...
%volCu mV pH
0  97.9 2.001
50 108.8 2.021
100  118.4 2.018
250 127.4  2.019
500 137.3 2.023
1000 145.9 2.028
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 322021
Encode time: 17979
Send time: 814
Draw time: 354520
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options)
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options)
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 393514
Encode time: 19021
Send time: 985
Draw time: 427014
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 345248
Encode time: 15963
Send time: 659
Draw time: 374426
[I 22:09:41.953 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 22:11:41.988 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
9.697 -17
9.709 -17.3
];

calibdata=[...
%volCu mV pH
0  97.9 2.001
50 108.8 2.021
100  118.4 2.018
250 127.4  2.019
500 137.3 2.023
1000 145.9 2.028
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 325001
Encode time: 17081
Send time: 1080
Draw time: 360132
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options)
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options)
pbestm=ptst;
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 389314
Encode time: 18547
Send time: 1033
Draw time: 422051
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 343280
Encode time: 15954
Send time: 1061
Draw time: 373542
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
9.697 -17
9.709 -17.3
];

calibdata=[...
%volCu mV pH
0  97.9 2.001
50 108.8 2.021
100  118.4 2.018
250 127.4  2.019
500 137.3 2.023
1000 145.9 2.028
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 322561
Encode time: 17731
Send time: 940
Draw time: 353636
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options)
pbestEo=ptst;
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options)
pbestm=ptst;
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 387564
Encode time: 17898
Send time: 4581
Draw time: 424426
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 345565
Encode time: 15604
Send time: 706
Draw time: 374924
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
9.697 -17
9.709 -17.3
];

calibdata=[...
%volCu mV pH
0  97.9 2.001
50 108.8 2.021
100  118.4 2.018
250 127.4  2.019
500 137.3 2.023
1000 145.9 2.028
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 335932
Encode time: 17193
Send time: 3870
Draw time: 376761
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options)
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options)
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 388972
Encode time: 18478
Send time: 1068
Draw time: 422499
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 342354
Encode time: 15705
Send time: 774
Draw time: 371916
[I 22:12:42.841 NotebookApp] Starting buffering for 3f117edb-981f-49bb-be28-8042fe7e20d9:f2feda45-2912-4c35-b76c-1f8e0d46407b
[I 22:12:54.983 NotebookApp] Kernel started: 8c3be92a-ae80-4015-aa3f-ed49b5d91e68, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
%50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 323806
Encode time: 16402
Send time: 728
Draw time: 356805
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 391785
Encode time: 17655
Send time: 1014
Draw time: 425454
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 342426
Encode time: 16404
Send time: 815
Draw time: 372879
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 320538
Encode time: 16635
Send time: 690
Draw time: 350677
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 402778
Encode time: 17693
Send time: 1419
Draw time: 435324
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 339333
Encode time: 16097
Send time: 776
Draw time: 369715
[I 22:13:42.028 NotebookApp] Saving file at /pH10_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 22:13:46.010 NotebookApp] Kernel started: eec57f82-0513-4114-8dbf-02718bbe916b, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 325393
Encode time: 16407
Send time: 728
Draw time: 356935
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 390433
Encode time: 18265
Send time: 1255
Draw time: 423544
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 367934
Encode time: 17172
Send time: 746
Draw time: 399012
[I 22:14:44.241 NotebookApp] 302 GET /lab/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb (172.24.0.1) 1.070000ms
[I 22:14:54.875 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeB_metamethod.ipynb
[I 22:15:45.887 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 22:27:40.683 NotebookApp] Starting buffering for a86b19ff-71ba-4a9a-b941-3414b1bf8814:a4103458-4363-4675-b587-8ab8fc40e619
[I 22:27:40.684 NotebookApp] Starting buffering for aadcdfdb-87e0-446a-a93a-02b2b587eb66:af1855eb-6310-4210-a9a1-d0be501a157e
[I 22:27:40.685 NotebookApp] Starting buffering for 8c3be92a-ae80-4015-aa3f-ed49b5d91e68:706e49d2-7f09-4b5e-b20a-00d1cf7247e1
[I 22:27:40.685 NotebookApp] Starting buffering for eec57f82-0513-4114-8dbf-02718bbe916b:9c54c8f1-fcf4-44f1-a5cb-199e4cc3965e
[I 2023-09-26 23:13:13.212 LabApp] Build is up to date
[I 2023-09-26 23:17:24.086 LabApp] Build is up to date
[I 23:17:30.467 NotebookApp] 302 GET /lab/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb (172.24.0.1) 1.040000ms
[I 23:17:51.206 NotebookApp] 302 GET /tree (172.24.0.1) 1.010000ms
[I 23:19:43.870 NotebookApp] Starting buffering for eec57f82-0513-4114-8dbf-02718bbe916b:e32ccee6-5693-49a8-808e-73201dfb42f5
xvfb-run: error: Xvfb failed to start
xvfb-run: error: Xvfb failed to start
[W 00:00:07.367 NotebookApp] Collisions detected in /home/jovyan/.jupyter/jupyter_notebook_config.py and /home/jovyan/.jupyter/jupyter_notebook_config.json config files. /home/jovyan/.jupyter/jupyter_notebook_config.json has higher priority: {
      "NotebookApp": {
        "password": "'' ignored, using 'argon2:$argon2id$v=19$m=10240,t=10,p=8$ZmkKwBPY7SHyhu/M4lUPdg$tdk6jy8Z9Fj2eCjHXTJCGDWY8OT4vNNruv21gO7uNc8'"
      }
    }
[W 2023-09-28 00:00:10.181 LabApp] 'ip' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-09-28 00:00:10.181 LabApp] 'token' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-09-28 00:00:10.182 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-09-28 00:00:10.182 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[I 2023-09-28 00:00:10.207 LabApp] JupyterLab extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/jupyterlab
[I 2023-09-28 00:00:10.208 LabApp] JupyterLab application directory is /srv/conda/envs/notebook/share/jupyter/lab
[I 00:00:10.225 NotebookApp] nteract extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/nteract_on_jupyter
[I 00:00:10.230 NotebookApp] Serving notebooks from local directory: /home/jovyan
[I 00:00:10.230 NotebookApp] Jupyter Notebook 6.4.12 is running at:
[I 00:00:10.230 NotebookApp] http://ec43c0bfdd1c:8888/
[I 00:00:10.230 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[W 00:00:10.254 NotebookApp] No web browser found: could not locate runnable browser.
[I 2023-09-28 00:00:52.497 LabApp] Build is up to date
[I 00:00:53.934 NotebookApp] Kernel started: b23d8f88-700b-4936-98ac-2e63d4f6da80, name: xoctave
[I 00:00:53.937 NotebookApp] Kernel started: 334a2eed-603e-4818-b359-abda97d9b02f, name: xoctave
[I 00:00:53.940 NotebookApp] Kernel started: 60e52282-b376-4c7d-90ac-1d4e21349c9b, name: xoctave
[I 00:00:53.957 NotebookApp] Kernel started: 7eb68c09-0d68-47f5-9db2-05ed4ae7e607, name: xoctave
[I 00:00:53.960 NotebookApp] Kernel started: 474bdab0-8b12-45ee-957e-dde7e9e4d092, name: xoctave
Serving notebooks from local directory: /home/jovyan
5 active kernels
Jupyter Notebook 6.4.12 is running at:
http://ec43c0bfdd1c:8888/
Serving notebooks from local directory: /home/jovyan
5 active kernels
Jupyter Notebook 6.4.12 is running at:
http://ec43c0bfdd1c:8888/
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
Run with XEUS 3.0.5
Run with XEUS 3.0.5
Run with XEUS 3.0.5
Run with XEUS 3.0.5
[I 00:00:55.394 NotebookApp] Starting buffering for 474bdab0-8b12-45ee-957e-dde7e9e4d092:cf125ca7-bae8-40a8-b3f8-d72af49c9e32
[I 00:00:59.835 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 7.820000ms
[I 2023-09-28 00:01:02.825 LabApp] Build is up to date
[I 00:01:03.595 NotebookApp] 301 GET /static/favicons/favicon-busy-1.ico (172.24.0.1) 5.850000ms
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];



originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[100 200 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
list
string: 200
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[275 59.2/2 0.0001];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
list
string: 180
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)

xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 443906
Encode time: 40689
Send time: 1826
Draw time: 505823
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
[I 2023-09-28 00:01:11.857 LabApp] Build is up to date
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  54.5
8.059  54
];

calibdata=[...
%volCu mV pH
0 100.7 2.001
50 130.3 2.001
100 143 1.987
250 155.1 1.99
500 165 1.994
1000 174.2 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 345525
Encode time: 16215
Send time: 1173
Draw time: 377126
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[200 310 -6 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 30 -6 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 442589
Encode time: 17186
Send time: 895
Draw time: 475470
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 364952
Encode time: 15676
Send time: 631
Draw time: 395074
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 325096
Encode time: 16535
Send time: 607
Draw time: 358263
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 389595
Encode time: 18270
Send time: 1329
Draw time: 423340
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 349089
Encode time: 16735
Send time: 928
Draw time: 380488
[I 00:01:46.793 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeB_metamethod.ipynb
[I 00:01:51.021 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 00:02:07.945 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeB_allcalibs.ipynb
[I 00:04:10.938 NotebookApp] Kernel started: 3c3657cc-f9e2-4240-896e-bddad2dbb328, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 00:06:46.545 NotebookApp] Starting buffering for 3c3657cc-f9e2-4240-896e-bddad2dbb328:87f15a11-d29d-41f7-b478-30b66e783581
[W 01:19:47.813 NotebookApp] Replacing stale connection: 7eb68c09-0d68-47f5-9db2-05ed4ae7e607:3406e3ec-6604-497c-89b5-70aee460b012
[I 01:19:52.816 NotebookApp] Starting buffering for 7eb68c09-0d68-47f5-9db2-05ed4ae7e607:3406e3ec-6604-497c-89b5-70aee460b012
[I 01:19:52.819 NotebookApp] Restoring connection for 7eb68c09-0d68-47f5-9db2-05ed4ae7e607:3406e3ec-6604-497c-89b5-70aee460b012
[W 01:19:53.361 NotebookApp] Replacing stale connection: b23d8f88-700b-4936-98ac-2e63d4f6da80:6751f74b-de4a-4149-8a66-f9bbe59e4f49
[I 01:19:58.363 NotebookApp] Starting buffering for b23d8f88-700b-4936-98ac-2e63d4f6da80:6751f74b-de4a-4149-8a66-f9bbe59e4f49
[I 01:19:58.366 NotebookApp] Restoring connection for b23d8f88-700b-4936-98ac-2e63d4f6da80:6751f74b-de4a-4149-8a66-f9bbe59e4f49
[W 01:19:58.830 NotebookApp] Replacing stale connection: 60e52282-b376-4c7d-90ac-1d4e21349c9b:5c63d6f1-abf4-4e07-8197-084775e95e85
[I 01:28:02.998 NotebookApp] Starting buffering for 3c3657cc-f9e2-4240-896e-bddad2dbb328:55bc03d9-e879-4e72-9770-9fcebca3aa5e
[W 01:41:12.416 NotebookApp] Replacing stale connection: 7eb68c09-0d68-47f5-9db2-05ed4ae7e607:3406e3ec-6604-497c-89b5-70aee460b012
[I 01:41:17.419 NotebookApp] Starting buffering for 7eb68c09-0d68-47f5-9db2-05ed4ae7e607:3406e3ec-6604-497c-89b5-70aee460b012
[I 01:41:17.421 NotebookApp] Restoring connection for 7eb68c09-0d68-47f5-9db2-05ed4ae7e607:3406e3ec-6604-497c-89b5-70aee460b012
[I 12:10:37.160 NotebookApp] Starting buffering for 7eb68c09-0d68-47f5-9db2-05ed4ae7e607:3406e3ec-6604-497c-89b5-70aee460b012
[I 12:10:37.161 NotebookApp] Starting buffering for b23d8f88-700b-4936-98ac-2e63d4f6da80:6751f74b-de4a-4149-8a66-f9bbe59e4f49
[I 12:10:37.162 NotebookApp] Starting buffering for 60e52282-b376-4c7d-90ac-1d4e21349c9b:7793ee27-8d54-44a5-b9d7-3ae13b7de54f
[I 12:10:37.170 NotebookApp] Starting buffering for 474bdab0-8b12-45ee-957e-dde7e9e4d092:45d25b15-1b82-4bfa-a6dc-e3d074b043d6
[I 12:10:37.171 NotebookApp] Starting buffering for 334a2eed-603e-4818-b359-abda97d9b02f:4d65aaf4-c170-4b79-9a14-a5be5ca00e64
[I 13:07:38.809 NotebookApp] Restoring connection for b23d8f88-700b-4936-98ac-2e63d4f6da80:6751f74b-de4a-4149-8a66-f9bbe59e4f49
[I 13:07:39.032 NotebookApp] Restoring connection for 60e52282-b376-4c7d-90ac-1d4e21349c9b:7793ee27-8d54-44a5-b9d7-3ae13b7de54f
[I 13:07:39.133 NotebookApp] Restoring connection for 7eb68c09-0d68-47f5-9db2-05ed4ae7e607:3406e3ec-6604-497c-89b5-70aee460b012
[I 13:07:39.252 NotebookApp] Restoring connection for 474bdab0-8b12-45ee-957e-dde7e9e4d092:45d25b15-1b82-4bfa-a6dc-e3d074b043d6
[I 13:07:39.366 NotebookApp] Restoring connection for 334a2eed-603e-4818-b359-abda97d9b02f:4d65aaf4-c170-4b79-9a14-a5be5ca00e64
[I 13:07:47.946 NotebookApp] Starting buffering for 7eb68c09-0d68-47f5-9db2-05ed4ae7e607:3406e3ec-6604-497c-89b5-70aee460b012
[I 13:07:47.950 NotebookApp] Starting buffering for b23d8f88-700b-4936-98ac-2e63d4f6da80:6751f74b-de4a-4149-8a66-f9bbe59e4f49
[I 13:07:47.951 NotebookApp] Starting buffering for 334a2eed-603e-4818-b359-abda97d9b02f:4d65aaf4-c170-4b79-9a14-a5be5ca00e64
[I 13:07:47.952 NotebookApp] Starting buffering for 474bdab0-8b12-45ee-957e-dde7e9e4d092:01a73f8b-0446-4b14-b3b7-988e82ddacbb
[I 2023-09-28 13:09:57.991 LabApp] Build is up to date
[I 13:19:47.618 NotebookApp] Starting buffering for 3c3657cc-f9e2-4240-896e-bddad2dbb328:2e65a9ae-28a2-419c-8577-88a1aba88673
[I 13:19:47.620 NotebookApp] Starting buffering for 334a2eed-603e-4818-b359-abda97d9b02f:7fca7607-58a4-4c9e-86b2-2dfd9914490f
[I 13:19:47.620 NotebookApp] Starting buffering for 60e52282-b376-4c7d-90ac-1d4e21349c9b:7793ee27-8d54-44a5-b9d7-3ae13b7de54f
[I 13:19:53.023 NotebookApp] Restoring connection for 334a2eed-603e-4818-b359-abda97d9b02f:7fca7607-58a4-4c9e-86b2-2dfd9914490f
[I 13:19:53.233 NotebookApp] Restoring connection for 3c3657cc-f9e2-4240-896e-bddad2dbb328:2e65a9ae-28a2-419c-8577-88a1aba88673
[I 13:19:54.585 NotebookApp] Starting buffering for 3c3657cc-f9e2-4240-896e-bddad2dbb328:2e65a9ae-28a2-419c-8577-88a1aba88673
[I 13:19:54.587 NotebookApp] Starting buffering for 334a2eed-603e-4818-b359-abda97d9b02f:7fca7607-58a4-4c9e-86b2-2dfd9914490f
[I 13:19:54.590 NotebookApp] Starting buffering for 60e52282-b376-4c7d-90ac-1d4e21349c9b:7793ee27-8d54-44a5-b9d7-3ae13b7de54f
[I 13:28:30.619 NotebookApp] Restoring connection for 3c3657cc-f9e2-4240-896e-bddad2dbb328:2e65a9ae-28a2-419c-8577-88a1aba88673
[I 13:28:31.027 NotebookApp] Restoring connection for 334a2eed-603e-4818-b359-abda97d9b02f:7fca7607-58a4-4c9e-86b2-2dfd9914490f
[I 13:39:08.146 NotebookApp] Starting buffering for 3c3657cc-f9e2-4240-896e-bddad2dbb328:2e65a9ae-28a2-419c-8577-88a1aba88673
[I 13:39:08.146 NotebookApp] Starting buffering for 334a2eed-603e-4818-b359-abda97d9b02f:7fca7607-58a4-4c9e-86b2-2dfd9914490f
[I 13:39:08.147 NotebookApp] Starting buffering for 60e52282-b376-4c7d-90ac-1d4e21349c9b:b2824e71-9b3d-43ff-be31-0ff3a96e3519
[I 13:47:23.034 NotebookApp] Restoring connection for 334a2eed-603e-4818-b359-abda97d9b02f:7fca7607-58a4-4c9e-86b2-2dfd9914490f
[I 13:47:23.286 NotebookApp] Restoring connection for 60e52282-b376-4c7d-90ac-1d4e21349c9b:b2824e71-9b3d-43ff-be31-0ff3a96e3519
[I 13:47:23.540 NotebookApp] Restoring connection for 3c3657cc-f9e2-4240-896e-bddad2dbb328:2e65a9ae-28a2-419c-8577-88a1aba88673
[I 2023-09-28 13:47:25.087 LabApp] Build is up to date
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,1))
mVAoriginal=(originalsamplemVnpH(:,2));
addedCuvol=data(:,1)'*1e-6;
pHcalib=data(:,3);

mVA=data(:,2)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine free Cu for the sample using the method of Tait et al.
m1=59.2/2; Eacid=Emeas(1); Eorig=mean(mVAoriginal); %m=param(1); 
Eo1=Eacid-(m1)*log10(CuT);
logCuonept=(Eorig-Eo1)/m1
%determine free Cu for the sample using the method of Tait et al. but use measured slope
param1=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1); m2=param1(1);
Eacid=Emeas(1); Eorig=mean(mVAoriginal); 
Eo2=Eacid-(m2)*log10(CuT);
logCuoneptmeasuredslope=(Eorig-Eo2)/m2
%determine free Cu using all the calibration points
param2=polyfit(log10(CuTplus(1:end)),Emeas(1:end),1);
logCufullcalib=(mean(mVAoriginal)-param2(2))/param2(1)
%determine free Cu using high Cu additions (linear part)
param3=polyfit(log10(CuTplus(2:end)),Emeas(2:end),1);
logCulinearcalib=(mean(mVAoriginal)-param3(2))/param3(1)
%determine free Cu using two lowest points.  variable slope method like Marcinek et al.
param4=polyfit(log10(CuTplus(1:2)),Emeas(1:2),1);
logCulowslopecalib=(mean(mVAoriginal)-param4(2))/param4(1)

%use logisticmodel
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,Emeas) (log10(sum((Emeas-logisticfunction(p,logx)).^2)));
ptst=[80 140 -4 0.7];
logx=-8:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,log10(CuTplus),Emeas)
plot(log10(CuTplus),Emeas,'ko')
hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbest=fminsearch(@(p) errfunction(p,log10(CuTplus),Emeas),ptst,options)
model=logisticfunction(pbest,logx);
plot(logx,model,'k--')
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: 80
list
string: 100
list
string: 120
list
string: 140
list
string: 160
string: 
string: 
Executing: % fit using Nikolskii-Eisenman equation
%E=E0+Slog(Cu +kH); parameters E0, S, k

NEeqn=@(p,x1,x2) (p(1)+p(2).*log10(x1+p(3).*x2));
errfunction=@(p,x1,x2,Emeas) (log10(sum((Emeas-NEeqn(p,x1,x2)).^2)));


H=10.^-pHcalib; ptst=[245 59.2/2 0.0005];
model=NEeqn(ptst,CuTplus',H);
err=errfunction(ptst,CuTplus',H,Emeas')

plot(log10(CuTplus), Emeas,'ko')
hold on; plot(log10(CuTplus),model,'k-')


% now best fit
pbestNE=fminsearch(@(p) errfunction(p,CuTplus',H,Emeas'),ptst,options)
NEmodel=NEeqn(pbestNE,CuTplus',H);
plot(log10(CuTplus),model,'k--')
list
string: -7
list
string: -6.5
list
string: -6
list
string: -5.5
list
string: -5
list
string: -4.5
list
string: -4
list
string: -3.5
list
string: 80
list
string: 90
list
string: 100
list
string: 110
list
string: 120
list
string: 130
list
string: 140
list
string: 150
string: 
string: 
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'bo','markersize',8,'markerfacecolor','b')

hold on
possibleresults=[logCuonept logCuoneptmeasuredslope logCufullcalib logCulinearcalib logCulowslopecalib];
mVAoriginals=mean(mVAoriginal)*ones(size(possibleresults));
plot(possibleresults,mVAoriginals,'ko','markerfacecolor','w')

paramTait=[m1 Eo1];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait,logCuplot);
plot(logCuplot,Eplot,'r-','linewidth',1)

paramTait2=[m2 Eo2];
logCuplot=-13:0.1:-3; Eplot=polyval(paramTait2,logCuplot);
plot(logCuplot,Eplot,'r--','linewidth',1)

logCuplot=-13:0.1:-3; Eplot=polyval(param2,logCuplot);
plot(logCuplot,Eplot,'k--')

logCuplot=-13:0.1:-3; Eplot=polyval(param3,logCuplot);
plot(logCuplot,Eplot,'k:')

logCuplot=-13:0.1:-3; Eplot=polyval(param4,logCuplot);
plot(logCuplot,Eplot,'k-')

set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(Emeas)-(max(Emeas)-mean(mVAoriginal))/4,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

axis([min(possibleresults)-0.2 max(log10(CuTplus))+0.2 min(mVAoriginal)-0.2*min(mVAoriginal) max(Emeas)+0.2*max(Emeas)])

% nonlinear fit
logx=min(possibleresults)-0.2:0.1:max(log10(CuTplus))+1;
model=logisticfunction(pbest,logx);
plot(logx,model,'m--','linewidth',2)

logCunonlinear=-((log10((pbest(2)-pbest(1))/(mean(mVAoriginal)-pbest(1))-1))/pbest(4)-pbest(3))

H=10.^-pH; logCuNE=log10(10.^((mean(mVAoriginal)-pbestNE(1))./pbestNE(2))-pbestNE(3)*H)

plot(logCuNE,mean(mVAoriginal),'ko','markerfacecolor','c')
plot(log10(CuTplus),NEmodel,'c-','linewidth',2)
Device pixel ratio: 1
Render time: 385693
Encode time: 21251
Send time: 985
Draw time: 442080
Executing: disp('various calibration results')
logCuonept
logCuoneptmeasuredslope
logCufullcalib
logCulinearcalib
logCulowslopecalib
logCuNE
disp('model results')
log10(Cunosolid)
log10(Cuall)
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 326446
Encode time: 18835
Send time: 632
Draw time: 359708
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 388949
Encode time: 17905
Send time: 1245
Draw time: 422390
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 343473
Encode time: 18065
Send time: 1024
Draw time: 376091
[I 13:50:06.779 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 13:55:17.859 NotebookApp] Starting buffering for 3c3657cc-f9e2-4240-896e-bddad2dbb328:2e65a9ae-28a2-419c-8577-88a1aba88673
[I 13:55:17.861 NotebookApp] Starting buffering for 334a2eed-603e-4818-b359-abda97d9b02f:7fca7607-58a4-4c9e-86b2-2dfd9914490f
[I 14:22:35.480 NotebookApp] Starting buffering for 60e52282-b376-4c7d-90ac-1d4e21349c9b:6d3e8bb7-6743-484d-ab60-7e7b9ad2e584
[I 16:17:48.445 NotebookApp] Restoring connection for 3c3657cc-f9e2-4240-896e-bddad2dbb328:2e65a9ae-28a2-419c-8577-88a1aba88673
[I 16:17:50.233 NotebookApp] Restoring connection for 334a2eed-603e-4818-b359-abda97d9b02f:7fca7607-58a4-4c9e-86b2-2dfd9914490f
[I 16:20:13.619 NotebookApp] Starting buffering for 334a2eed-603e-4818-b359-abda97d9b02f:7fca7607-58a4-4c9e-86b2-2dfd9914490f
[I 16:20:13.620 NotebookApp] Starting buffering for 3c3657cc-f9e2-4240-896e-bddad2dbb328:2e65a9ae-28a2-419c-8577-88a1aba88673
[I 16:45:41.296 NotebookApp] Starting buffering for 60e52282-b376-4c7d-90ac-1d4e21349c9b:7793ee27-8d54-44a5-b9d7-3ae13b7de54f
[I 2023-09-28 16:45:45.282 LabApp] Build is up to date
[I 18:38:52.822 NotebookApp] Starting buffering for 60e52282-b376-4c7d-90ac-1d4e21349c9b:bbade917-6e7c-417a-9558-81f106955da8
[I 18:39:45.374 NotebookApp] Restoring connection for 60e52282-b376-4c7d-90ac-1d4e21349c9b:bbade917-6e7c-417a-9558-81f106955da8
[I 18:39:46.012 NotebookApp] Starting buffering for 60e52282-b376-4c7d-90ac-1d4e21349c9b:bbade917-6e7c-417a-9558-81f106955da8
xvfb-run: error: Xvfb failed to start
xvfb-run: error: Xvfb failed to start
[W 18:52:19.518 NotebookApp] Collisions detected in /home/jovyan/.jupyter/jupyter_notebook_config.py and /home/jovyan/.jupyter/jupyter_notebook_config.json config files. /home/jovyan/.jupyter/jupyter_notebook_config.json has higher priority: {
      "NotebookApp": {
        "password": "'' ignored, using 'argon2:$argon2id$v=19$m=10240,t=10,p=8$ZmkKwBPY7SHyhu/M4lUPdg$tdk6jy8Z9Fj2eCjHXTJCGDWY8OT4vNNruv21gO7uNc8'"
      }
    }
[W 2023-09-29 18:52:21.025 LabApp] 'ip' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-09-29 18:52:21.025 LabApp] 'token' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-09-29 18:52:21.025 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-09-29 18:52:21.025 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[I 2023-09-29 18:52:21.039 LabApp] JupyterLab extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/jupyterlab
[I 2023-09-29 18:52:21.039 LabApp] JupyterLab application directory is /srv/conda/envs/notebook/share/jupyter/lab
[I 18:52:21.050 NotebookApp] nteract extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/nteract_on_jupyter
[I 18:52:21.054 NotebookApp] Serving notebooks from local directory: /home/jovyan
[I 18:52:21.054 NotebookApp] Jupyter Notebook 6.4.12 is running at:
[I 18:52:21.054 NotebookApp] http://ec43c0bfdd1c:8888/
[I 18:52:21.054 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[W 18:52:21.068 NotebookApp] No web browser found: could not locate runnable browser.
[I 2023-09-29 18:55:05.457 LabApp] Build is up to date
[I 18:55:06.010 NotebookApp] Kernel started: dd04ab5d-0ba1-4b9b-8ed2-678c471c6cff, name: xoctave
Serving notebooks from local directory: /home/jovyan
1 active kernel
Jupyter Notebook 6.4.12 is running at:
http://ec43c0bfdd1c:8888/
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[W 18:55:06.960 NotebookApp] Got events for closed stream <zmq.eventloop.zmqstream.ZMQStream object at 0x7f2afb3e5c10>
[I 18:55:11.922 NotebookApp] Starting buffering for dd04ab5d-0ba1-4b9b-8ed2-678c471c6cff:12a2f727-44b5-4701-acce-e11427eb62d6
[I 2023-09-29 19:31:26.893 LabApp] Build is up to date
[I 2023-09-29 19:31:32.641 LabApp] Build is up to date
[I 2023-09-30 12:08:22.841 LabApp] Build is up to date
[I 14:36:45.401 NotebookApp] Starting buffering for dd04ab5d-0ba1-4b9b-8ed2-678c471c6cff:630cf150-467d-4924-9d14-9a36f96a349a
[I 2023-10-01 00:31:53.019 LabApp] Build is up to date
[I 14:11:45.875 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 0.920000ms
[I 2023-10-02 14:11:48.892 LabApp] Build is up to date
[I 2023-10-02 14:11:49.685 LabApp] Build is up to date
[I 15:30:05.259 NotebookApp] 301 GET /static/favicons/favicon-busy-1.ico (172.24.0.1) 3.170000ms
[I 15:31:02.005 NotebookApp] Kernel started: 136bb26a-6d05-480f-8041-504b83120a1b, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 15:31:12.606 NotebookApp] Kernel started: 52ca2775-3bb4-4359-b569-0849732005dc, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 15:31:16.114 NotebookApp] Starting buffering for 52ca2775-3bb4-4359-b569-0849732005dc:8f96d51a-3ae2-4a6d-b23b-17770ad8efe2
[I 16:19:43.807 NotebookApp] Starting buffering for 136bb26a-6d05-480f-8041-504b83120a1b:024d9cca-c74e-406e-a4bf-9b222b1cddc9
[I 16:19:43.808 NotebookApp] Starting buffering for dd04ab5d-0ba1-4b9b-8ed2-678c471c6cff:e16cadc8-1b65-4b95-ad9d-515da127ff5d
[I 20:06:00.059 NotebookApp] Restoring connection for dd04ab5d-0ba1-4b9b-8ed2-678c471c6cff:e16cadc8-1b65-4b95-ad9d-515da127ff5d
[I 20:08:09.007 NotebookApp] Restoring connection for 136bb26a-6d05-480f-8041-504b83120a1b:024d9cca-c74e-406e-a4bf-9b222b1cddc9
[I 03:33:19.773 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 0.800000ms
[I 14:53:56.416 NotebookApp] Starting buffering for dd04ab5d-0ba1-4b9b-8ed2-678c471c6cff:549e543a-9b98-4982-a1f3-4c911d7e4019
[I 14:53:56.421 NotebookApp] Starting buffering for 136bb26a-6d05-480f-8041-504b83120a1b:024d9cca-c74e-406e-a4bf-9b222b1cddc9
xvfb-run: error: Xvfb failed to start
xvfb-run: error: Xvfb failed to start
[W 20:38:33.351 NotebookApp] Collisions detected in /home/jovyan/.jupyter/jupyter_notebook_config.py and /home/jovyan/.jupyter/jupyter_notebook_config.json config files. /home/jovyan/.jupyter/jupyter_notebook_config.json has higher priority: {
      "NotebookApp": {
        "password": "'' ignored, using 'argon2:$argon2id$v=19$m=10240,t=10,p=8$ZmkKwBPY7SHyhu/M4lUPdg$tdk6jy8Z9Fj2eCjHXTJCGDWY8OT4vNNruv21gO7uNc8'"
      }
    }
[W 2023-10-05 20:38:38.278 LabApp] 'ip' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-10-05 20:38:38.279 LabApp] 'token' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-10-05 20:38:38.280 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-10-05 20:38:38.280 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[I 2023-10-05 20:38:38.295 LabApp] JupyterLab extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/jupyterlab
[I 2023-10-05 20:38:38.295 LabApp] JupyterLab application directory is /srv/conda/envs/notebook/share/jupyter/lab
[I 20:38:38.308 NotebookApp] nteract extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/nteract_on_jupyter
[I 20:38:38.311 NotebookApp] Serving notebooks from local directory: /home/jovyan
[I 20:38:38.311 NotebookApp] Jupyter Notebook 6.4.12 is running at:
[I 20:38:38.311 NotebookApp] http://ec43c0bfdd1c:8888/
[I 20:38:38.311 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[W 20:38:38.332 NotebookApp] No web browser found: could not locate runnable browser.
[I 2023-10-06 01:26:55.421 LabApp] Build is up to date
[I 2023-10-06 01:26:56.375 LabApp] Build is up to date
[I 01:26:56.609 NotebookApp] Kernel started: 25ae63a3-0611-4543-acf3-fb0a3913e565, name: xoctave
Serving notebooks from local directory: /home/jovyan
1 active kernel
Jupyter Notebook 6.4.12 is running at:
http://ec43c0bfdd1c:8888/
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 01:26:57.650 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9320c3ea-9431-4b79-b84a-91ea6e466d40
[I 01:28:26.164 NotebookApp] Kernel started: 81697988-42bb-43e3-b58e-f465db9b1b4b, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 02:40:43.824 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:8987dc04-2a2d-44c0-8a31-d769e5eb187b
[I 02:40:43.832 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:2d9dc5e6-6dd7-4345-bb23-da7a550258ab
[I 2023-10-06 02:41:02.523 LabApp] Build is up to date
[I 2023-10-06 02:41:06.474 LabApp] Build is up to date
[I 04:42:04.449 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 0.690000ms
[I 2023-10-06 14:12:24.084 LabApp] Build is up to date
[I 2023-10-07 17:24:36.552 LabApp] Build is up to date
[I 18:53:22.613 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:f138d383-da3d-4885-b8a0-40702694aeee
[I 15:29:04.938 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:a756c124-c534-4d5f-afe0-a3c132a3936f
[I 2023-10-09 00:12:57.479 LabApp] Build is up to date
[I 18:24:08.952 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:24ee16ea-42e9-49e3-b98d-8e943037a229
[I 19:22:41.018 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 0.780000ms
[I 2023-10-11 19:22:45.070 LabApp] Build is up to date
[I 19:27:24.677 NotebookApp] 302 GET /login?next=%2Flab%3F (172.24.0.1) 1.970000ms
[I 2023-10-11 19:27:28.085 LabApp] Build is up to date
[I 20:46:23.276 NotebookApp] 302 GET /lab/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb (172.24.0.1) 1.130000ms
[I 20:49:43.205 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:e5e79f22-999c-4598-b73a-10487a0f70a0
[I 20:49:43.206 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:f7de5569-d3da-4a5a-a508-1df5a1a92e5d
[I 2023-10-11 23:30:27.175 LabApp] Build is up to date
[I 2023-10-11 23:30:29.013 LabApp] Build is up to date
[I 23:30:37.637 NotebookApp] Kernel started: 2cab804f-c20e-44a6-a410-3842d8d47735, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 23:30:38.877 NotebookApp] Starting buffering for 2cab804f-c20e-44a6-a410-3842d8d47735:69ade8e4-86af-4e54-9217-6a6c96f2a9ae
terminate called after throwing an instance of 'zmq::error_t'
  what():  Interrupted system call
[I 23:30:54.915 NotebookApp] Kernel restarted: 2cab804f-c20e-44a6-a410-3842d8d47735
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data
data=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%1	17	77	0	2.009	78.1	13.6285714285714
%1	23	83	0	2.000	73.8	-0.716666666666666
%1	28	88	0	1.999	76	0.440000000000001
%1	33	93	0	1.999	77.8	0.359999999999999
%1	38	98	0	1.995	79.4	0.320000000000002
%1	43	103	0	1.996	81.8	0.479999999999998
%1	48	108	0	1.995	84	0.440000000000001
%1	53	113	0	2.005	86	0.4
%1	58	118	0	2.006	87.7	0.340000000000001
%2	3	123	0	2.008	89.8	0.419999999999999
%2	8	128	0	2.009	90.4	0.120000000000002
%2	13	133	0	2.006	91	0.119999999999999
%2	18	138	0	2.006	91.7	0.140000000000001
%2	23	143	0	2.005	92.3	0.119999999999999
%2	28	148	0	2.004	92.4	0.0200000000000017
%2	33	153	0	2.007	93.4	0.2
%2	38	158	0	2.003	93.9	0.1
%2	43	163	0	2.002	95	0.219999999999999
%2	48	168	0	2.001	95.4	0.0800000000000011
2	53	173	0	2.002	95.6	0.0399999999999977
2	58	178	0	2.001	95.6	0
%3	0	180	50	2.001	97.9	1.15000000000001
%3	5	185	50	2	102.8	0.979999999999998
%3	10	190	50	2	103.8	0.2
%3	22	202	50	1.998	105.2	0.116666666666667
%3	32	212	50	1.997	106.2	0.1
%3	37	217	50	1.996	107	0.159999999999999
%3	42	222	50	1.995	106.6	-0.0800000000000011
%3	47	227	50	1.995	107.2	0.120000000000002
%3	52	232	50	1.995	107.6	0.0799999999999983
%3	57	237	50	1.996	107.3	-0.0599999999999994
%4	2	242	50	2.021	108.5	0.240000000000001
%4	7	247	50	2.021	108.7	0.0400000000000006
4	12	252	50	2.021	108.3	-0.0800000000000011
4	17	257	50	2.021	108.8	0.1
%4	19	259	150	2.02	110	0.600000000000001
%4	24	264	150	2.021	115.7	1.14
%4	29	269	150	2.02	117	0.259999999999999
%4	34	274	150	2.02	115.5	-0.3
%4	39	279	150	2.02	116.3	0.159999999999999
%4	44	284	150	2.019	117.3	0.2
%4	49	289	150	2.019	116.8	-0.1
%4	54	294	150	2.019	118.5	0.340000000000001
%4	59	299	150	2.019	118	-0.1
5	4	304	150	2.019	118.1	0.0199999999999989
5	14	314	150	2.018	118.4	0.0300000000000011
%5	15	315	400	2.02	121.6	3.19999999999999
%5	20	320	400	2.019	125.8	0.840000000000001
%5	25	325	400	2.019	127.5	0.340000000000001
%5	30	330	400	2.019	126.4	-0.219999999999999
%5	35	335	400	2.019	127.8	0.279999999999998
5	40	340	400	2.019	127.6	-0.0400000000000006
5	45	345	400	2.019	127.4	-0.0399999999999977
%5	46	346	900	2.022	129.9	2.5
%5	51	351	900	2.022	135.3	1.08
%5	56	356	900	2.022	135.9	0.119999999999999
%6	1	361	900	2.022	136.8	0.180000000000001
%6	6	366	900	2.023	137.1	0.0599999999999966
6	11	371	900	2.022	137.4	0.0600000000000023
6	16	376	900	2.023	137.3	-0.0199999999999989
%6	17	377	1900	2.029	142	4.69999999999999
%6	22	382	1900	2.029	144.5	0.5
%6	27	387	1900	2.029	144.8	0.0600000000000023
%6	32	392	1900	2.028	145.2	0.0799999999999955
%6	37	397	1900	2.028	146.3	0.220000000000005
%6	42	402	1900	2.028	146.7	0.0799999999999955
%6	47	407	1900	2.028	147.4	0.140000000000003
6	52	412	1900	2.028	147.2	-0.0400000000000034
6	58	418	1900	2.028	145.9	-0.216666666666664
];

addedCuvol=data(:,4)'*1e-6;

originalsamplemVnpH=[...
%time hr	time min	time total	cumulative  vol added	pH	mvA	delta
%0	0	0	0	10	-29.6	
%0	5	5	0	9.928	-26.9	0.540000000000001
%0	15	15	0	9.866	-23.2	0.37
%0	20	20	0	9.855	-23.3	-0.0200000000000003
%0	25	25	0	9.804	-19.7	0.72
%0	30	30	0	9.791	-20.4	-0.14
%0	35	35	0	9.782	-19.8	0.12
%0	40	40	0	9.755	-19.3	0.1
%50	45	45	0	9.741	-17.4	0.38
%0	55	55	0	9.746	-17.4	0
%1	0	60	0	9.729	-17.7	-0.0600000000000001
1	5	65	0	9.697	-17	0.14
1	10	70	0	9.709	-17.3	-0.0600000000000001
];
Executing: % process the data
pH=mean(originalsamplemVnpH(:,5))
mVAoriginal=mean(originalsamplemVnpH(:,6));
mVAoriginal=(originalsamplemVnpH(:,6));

mVA=data(:,6)'; Emeas=mVA; CuTmeas=1e-7; CuT=CuTmeas;
%mest=mVA(3)-mVA(2)
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
paramlinear=polyfit(log10(CuTplus(3:end)),Emeas(3:end),1)
logCuToriginal=(Emeas(1:2)-param(2))/param(1);
CuToriginal=(10.^logCuToriginal)*63.546*1e6;
logCuoriginal=mean((mVAoriginal-param(2))/param(1));

Executing: % try one point, assume Nernst slope
m=59.2/2; Eacid=95.6; Eorig=-17.3; m=21.5; m=24.254; m=paramlinear(1);
Eo=Eacid-(m)*log10(CuT);
logCuonept=(Eorig-Eo)/m
Executing: % MODEL FOR COMPARISON

%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),Emeas,'ko','markersize',8)

hold on
plot([logCuoriginal'],[mVAoriginal'],'ko')
logCuplot=-13:0.1:-3; Eplot=polyval(param,logCuplot);
plot(logCuplot,Eplot,'k-')
set(gca,'linewidth',2)
xlabel('log[Cu^{2+}]'); ylabel('E (mV)')
hold on

plot([log10(Cuall) log10(Cuall)],[-100 100],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[-100 150],'b--'); hold on
plot([log10(CuT) log10(CuT)],[-100 150],'b--')
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,50,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.2,60,'Total Cu','rotation',90)


xlabel('log([Cu^{2+}])')
ylabel('Potential (mV)')
set(gca,'LineWidth',2,'fontsize',12)

logCunosolid=log10(Cunosolid)
logCuoriginalsample=mean((mVAoriginal-param(2))/param(1))
logCuonept

axis([-16 -3 -40 150])

plot(logCuonept,Eorig,'ro','markerfacecolor','r')

list
string: -16
list
string: -14
list
string: -12
list
string: -10
list
string: -8
list
string: -6
list
string: -4
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: log([Cu
superscript
list
string: 2+
string: ])
list
string: Potential (mV)
list
string: model Cu
superscript
list
string: 2+
 -12.8893 50 0.329493 27.1984

list
string: Total Cu
 -6.94977 60 0.299539 19.9825

[I 23:31:15.561 NotebookApp] Kernel started: 46645440-f159-4b5f-8c65-8bfd0c827a91, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 23:32:38.004 NotebookApp] Saving file at /KNO3_pH10_0pt1uMCuT.ipynb
[I 14:45:23.995 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:963c73a8-5fcc-4a92-b3e1-f937ad598b58
[I 14:45:24.023 NotebookApp] Starting buffering for 46645440-f159-4b5f-8c65-8bfd0c827a91:c6776918-e0fb-49a3-9f03-4ccb22d26e0e
[I 14:45:24.028 NotebookApp] Starting buffering for 2cab804f-c20e-44a6-a410-3842d8d47735:5234c1db-b618-4b02-adc4-f56718b310c5
[I 16:16:37.015 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:963c73a8-5fcc-4a92-b3e1-f937ad598b58
[I 16:16:37.132 NotebookApp] Restoring connection for 46645440-f159-4b5f-8c65-8bfd0c827a91:c6776918-e0fb-49a3-9f03-4ccb22d26e0e
[I 18:25:59.181 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a686018d-02e2-4943-9eae-69b7a6f56240
[I 18:25:59.182 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:963c73a8-5fcc-4a92-b3e1-f937ad598b58
[I 18:25:59.184 NotebookApp] Starting buffering for 46645440-f159-4b5f-8c65-8bfd0c827a91:c6776918-e0fb-49a3-9f03-4ccb22d26e0e
[I 18:25:59.185 NotebookApp] Starting buffering for 2cab804f-c20e-44a6-a410-3842d8d47735:2c746d5a-2adf-4ce8-acd9-db46012f5fe6
[I 18:29:33.422 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:a686018d-02e2-4943-9eae-69b7a6f56240
[I 18:29:34.246 NotebookApp] Restoring connection for 2cab804f-c20e-44a6-a410-3842d8d47735:2c746d5a-2adf-4ce8-acd9-db46012f5fe6
[I 18:29:34.382 NotebookApp] Restoring connection for 46645440-f159-4b5f-8c65-8bfd0c827a91:c6776918-e0fb-49a3-9f03-4ccb22d26e0e
[I 18:29:34.614 NotebookApp] Starting buffering for 46645440-f159-4b5f-8c65-8bfd0c827a91:c6776918-e0fb-49a3-9f03-4ccb22d26e0e
[I 18:29:34.615 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a686018d-02e2-4943-9eae-69b7a6f56240
[I 18:29:34.616 NotebookApp] Starting buffering for 2cab804f-c20e-44a6-a410-3842d8d47735:2c746d5a-2adf-4ce8-acd9-db46012f5fe6
[I 18:29:34.617 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:2f8063d2-6655-4175-888a-2046a9cce073
[I 18:44:39.451 NotebookApp] Restoring connection for 46645440-f159-4b5f-8c65-8bfd0c827a91:c6776918-e0fb-49a3-9f03-4ccb22d26e0e
[I 18:44:39.598 NotebookApp] Restoring connection for 2cab804f-c20e-44a6-a410-3842d8d47735:2c746d5a-2adf-4ce8-acd9-db46012f5fe6
[I 18:44:39.795 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:a686018d-02e2-4943-9eae-69b7a6f56240
[I 21:08:20.412 NotebookApp] Starting buffering for 46645440-f159-4b5f-8c65-8bfd0c827a91:c6776918-e0fb-49a3-9f03-4ccb22d26e0e
[I 21:08:20.413 NotebookApp] Starting buffering for 2cab804f-c20e-44a6-a410-3842d8d47735:5234c1db-b618-4b02-adc4-f56718b310c5
[I 21:48:05.169 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:2f8063d2-6655-4175-888a-2046a9cce073
[I 21:48:05.170 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a686018d-02e2-4943-9eae-69b7a6f56240
[I 2023-10-13 15:05:56.063 LabApp] Build is up to date
[I 2023-10-13 15:06:00.572 LabApp] Build is up to date
[I 15:18:16.856 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[W 18:19:36.762 NotebookApp] Replacing stale connection: 25ae63a3-0611-4543-acf3-fb0a3913e565:fb75c1dc-d7d2-4564-9b20-cb86b871e3b6
[W 18:19:42.002 NotebookApp] Replacing stale connection: 81697988-42bb-43e3-b58e-f465db9b1b4b:f0ce1dcc-26a8-42e5-866f-cfbb4ad14fef
[I 18:19:47.003 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:f0ce1dcc-26a8-42e5-866f-cfbb4ad14fef
[I 18:19:47.006 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:f0ce1dcc-26a8-42e5-866f-cfbb4ad14fef
[I 15:31:25.579 NotebookApp] Starting buffering for 2cab804f-c20e-44a6-a410-3842d8d47735:595c01fb-0f39-492f-a0b5-c30d830c63de
[I 15:31:25.626 NotebookApp] Starting buffering for 46645440-f159-4b5f-8c65-8bfd0c827a91:968506e1-8582-4664-800b-43bc5224e641
[I 15:31:30.643 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:fb75c1dc-d7d2-4564-9b20-cb86b871e3b6
[I 15:31:30.651 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:f0ce1dcc-26a8-42e5-866f-cfbb4ad14fef
[I 2023-10-16 18:26:21.115 LabApp] Build is up to date
[I 2023-10-16 18:26:22.251 LabApp] Build is up to date
[I 19:07:33.326 NotebookApp] Starting buffering for 46645440-f159-4b5f-8c65-8bfd0c827a91:23a08d2e-ff79-4c75-a861-41277f5146a1
[I 19:39:12.245 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:01b41ec9-709e-497d-8b1f-12e5df234598
[I 19:39:12.246 NotebookApp] Starting buffering for 46645440-f159-4b5f-8c65-8bfd0c827a91:190c70c4-25b3-4c31-8ba9-4fe4787409f8
[I 19:39:12.251 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:b997ac60-d75a-4973-bec3-96d821540d5e
[I 19:39:12.267 NotebookApp] Starting buffering for 2cab804f-c20e-44a6-a410-3842d8d47735:96182bda-b09f-4850-a16b-9417de3ea438
[I 19:39:18.645 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:b997ac60-d75a-4973-bec3-96d821540d5e
[I 19:39:18.757 NotebookApp] Restoring connection for 46645440-f159-4b5f-8c65-8bfd0c827a91:190c70c4-25b3-4c31-8ba9-4fe4787409f8
[I 19:39:18.879 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:01b41ec9-709e-497d-8b1f-12e5df234598
[I 19:39:19.121 NotebookApp] Restoring connection for 2cab804f-c20e-44a6-a410-3842d8d47735:96182bda-b09f-4850-a16b-9417de3ea438
[I 19:39:19.898 NotebookApp] Starting buffering for 46645440-f159-4b5f-8c65-8bfd0c827a91:190c70c4-25b3-4c31-8ba9-4fe4787409f8
[I 19:39:19.900 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:01b41ec9-709e-497d-8b1f-12e5df234598
[I 19:39:19.900 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:b997ac60-d75a-4973-bec3-96d821540d5e
[I 19:39:19.901 NotebookApp] Starting buffering for 2cab804f-c20e-44a6-a410-3842d8d47735:96182bda-b09f-4850-a16b-9417de3ea438
[I 23:18:55.969 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:01b41ec9-709e-497d-8b1f-12e5df234598
[I 23:18:59.107 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:01b41ec9-709e-497d-8b1f-12e5df234598
[I 15:20:04.085 NotebookApp] 302 GET /lab/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb (172.24.0.1) 3.230000ms
[I 15:20:14.768 NotebookApp] 302 GET /lab/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb (172.24.0.1) 0.890000ms
[I 15:20:16.418 NotebookApp] 302 GET / (172.24.0.1) 1.160000ms
[I 15:20:16.673 NotebookApp] 302 GET /tree (172.24.0.1) 1.990000ms
[I 15:20:19.867 NotebookApp] 302 POST /login?next=%2Flab%2Ftree%2FpH8_0pt1uMCuT_electrodeA_metamethod.ipynb (172.24.0.1) 307.780000ms
[I 15:20:22.105 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 6.320000ms
[I 2023-10-17 15:20:25.563 LabApp] Build is up to date
[I 15:20:37.749 NotebookApp] 302 GET /tree (172.24.0.1) 1.100000ms
[I 15:22:28.172 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[W 15:36:27.958 NotebookApp] WebSocket ping timeout after 119878 ms.
[W 15:36:27.964 NotebookApp] WebSocket ping timeout after 119884 ms.
[I 15:36:32.960 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 15:36:32.967 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 2023-10-17 18:48:38.449 LabApp] Build is up to date
[I 19:30:35.847 NotebookApp] Starting buffering for 2cab804f-c20e-44a6-a410-3842d8d47735:af6156c4-4491-41b1-8944-97c26780030d
[I 19:30:35.847 NotebookApp] Starting buffering for 46645440-f159-4b5f-8c65-8bfd0c827a91:c69aa002-bbcb-44be-8dcb-d9da8a0d0cbe
[I 19:30:35.848 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:39a4045a-d73a-4bdc-b8d7-7dec51066244
[I 2023-10-18 00:22:03.351 LabApp] Build is up to date
[I 2023-10-18 00:46:04.251 LabApp] Build is up to date
[I 02:05:26.747 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:f16d48ed-7dd2-474e-9eef-486c0b09e5c3
[I 02:05:26.748 NotebookApp] Starting buffering for 46645440-f159-4b5f-8c65-8bfd0c827a91:a5567124-0c71-4220-a9f6-2ce2aefdec46
[I 02:05:26.751 NotebookApp] Starting buffering for 2cab804f-c20e-44a6-a410-3842d8d47735:66d1cc84-b55c-4c01-a126-b3a79e273776
[I 02:05:26.753 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:ca79b782-9bfc-45b6-b0ac-530ed86fdfe1
[I 02:05:44.073 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:f16d48ed-7dd2-474e-9eef-486c0b09e5c3
[I 02:05:44.381 NotebookApp] Restoring connection for 2cab804f-c20e-44a6-a410-3842d8d47735:66d1cc84-b55c-4c01-a126-b3a79e273776
[I 02:05:45.023 NotebookApp] Restoring connection for 46645440-f159-4b5f-8c65-8bfd0c827a91:a5567124-0c71-4220-a9f6-2ce2aefdec46
[I 02:05:52.191 NotebookApp] Starting buffering for 46645440-f159-4b5f-8c65-8bfd0c827a91:a5567124-0c71-4220-a9f6-2ce2aefdec46
[I 02:05:52.197 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:0ce2cc2d-49d9-4ded-987e-d7915277c6bf
[I 02:05:52.197 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:f16d48ed-7dd2-474e-9eef-486c0b09e5c3
[I 02:05:52.198 NotebookApp] Starting buffering for 2cab804f-c20e-44a6-a410-3842d8d47735:66d1cc84-b55c-4c01-a126-b3a79e273776
[I 2023-10-18 17:28:00.380 LabApp] Build is up to date
[I 2023-10-18 17:28:03.608 LabApp] Build is up to date
[I 17:46:26.911 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:aebf956a-fff5-427e-bbe1-6ce58c920fec
[I 17:46:26.913 NotebookApp] Starting buffering for 2cab804f-c20e-44a6-a410-3842d8d47735:894aefd3-7e53-4262-b30b-933dcea03a58
[I 17:46:26.915 NotebookApp] Starting buffering for 46645440-f159-4b5f-8c65-8bfd0c827a91:0da66998-4075-4f41-938c-6a61e600f7b2
[I 17:46:33.075 NotebookApp] Restoring connection for 46645440-f159-4b5f-8c65-8bfd0c827a91:0da66998-4075-4f41-938c-6a61e600f7b2
[I 17:46:33.219 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:aebf956a-fff5-427e-bbe1-6ce58c920fec
[I 17:46:33.346 NotebookApp] Restoring connection for 2cab804f-c20e-44a6-a410-3842d8d47735:894aefd3-7e53-4262-b30b-933dcea03a58
[I 17:46:34.391 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:aebf956a-fff5-427e-bbe1-6ce58c920fec
[I 17:46:34.392 NotebookApp] Starting buffering for 2cab804f-c20e-44a6-a410-3842d8d47735:894aefd3-7e53-4262-b30b-933dcea03a58
[I 17:46:34.392 NotebookApp] Starting buffering for 46645440-f159-4b5f-8c65-8bfd0c827a91:0da66998-4075-4f41-938c-6a61e600f7b2
[I 17:52:42.775 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:aebf956a-fff5-427e-bbe1-6ce58c920fec
[I 17:52:43.892 NotebookApp] Restoring connection for 2cab804f-c20e-44a6-a410-3842d8d47735:894aefd3-7e53-4262-b30b-933dcea03a58
[I 17:52:44.024 NotebookApp] Restoring connection for 46645440-f159-4b5f-8c65-8bfd0c827a91:0da66998-4075-4f41-938c-6a61e600f7b2
[I 18:05:12.276 NotebookApp] Starting buffering for 46645440-f159-4b5f-8c65-8bfd0c827a91:0da66998-4075-4f41-938c-6a61e600f7b2
[I 18:05:12.277 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:aebf956a-fff5-427e-bbe1-6ce58c920fec
[I 18:05:12.277 NotebookApp] Starting buffering for 2cab804f-c20e-44a6-a410-3842d8d47735:894aefd3-7e53-4262-b30b-933dcea03a58
[I 2023-10-18 18:06:48.773 LabApp] Build is up to date
[I 2023-10-18 18:06:48.823 LabApp] Build is up to date
[I 22:24:44.150 NotebookApp] 302 GET / (172.24.0.1) 0.820000ms
[I 22:24:44.280 NotebookApp] 302 GET /tree (172.24.0.1) 1.140000ms
[W 23:24:56.564 NotebookApp] WebSocket ping timeout after 119860 ms.
[I 23:25:01.565 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[W 23:25:15.275 NotebookApp] WebSocket ping timeout after 119967 ms.
[I 23:25:20.277 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 15:01:11.341 NotebookApp] 302 GET /lab? (172.24.0.1) 4.330000ms
[I 15:01:18.031 NotebookApp] 302 POST /login?next=%2Flab%3F (172.24.0.1) 162.220000ms
[I 15:01:18.180 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 3.990000ms
[I 2023-10-19 15:01:21.332 LabApp] Build is up to date
[I 15:01:21.993 NotebookApp] 301 GET /static/favicons/favicon-busy-1.ico (172.24.0.1) 3.800000ms
[I 15:29:12.885 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:713a0ba9-f45b-42e2-b71f-8c7ff4b46ed8
[I 15:29:12.885 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:b550ed81-6fb6-461a-9e89-d270c3f0e83c
[W 02:16:58.890 NotebookApp] WebSocket ping timeout after 119888 ms.
[I 02:17:03.892 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[W 02:17:20.557 NotebookApp] WebSocket ping timeout after 119860 ms.
[I 02:17:25.560 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 02:24:52.564 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[W 02:26:22.566 NotebookApp] WebSocket ping timeout after 90001 ms.
[I 02:26:27.567 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 03:15:35.846 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[W 03:17:05.848 NotebookApp] WebSocket ping timeout after 90001 ms.
[I 03:17:10.850 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 12:28:33.008 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 12:28:33.028 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[W 12:30:03.011 NotebookApp] WebSocket ping timeout after 90002 ms.
[W 12:30:03.029 NotebookApp] WebSocket ping timeout after 90000 ms.
[I 12:30:08.014 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 12:30:08.030 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 20:10:50.670 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 0.700000ms
[W 20:10:50.878 NotebookApp] Forbidden
[W 20:10:50.879 NotebookApp] 403 GET /api/kernelspecs?1697832650873 (172.24.0.1) 1.460000ms referer=https://jupyter6.clearnasdss.synology.me/lab/workspaces/auto-S/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[W 2023-10-20 20:10:50.885 LabApp] wrote error: 'Forbidden'
[W 20:10:50.886 NotebookApp] 403 GET /lab/api/settings?1697832650877 (172.24.0.1) 5.200000ms referer=https://jupyter6.clearnasdss.synology.me/lab/workspaces/auto-S/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[W 20:10:50.893 NotebookApp] Forbidden
[W 20:10:50.893 NotebookApp] 403 GET /api/kernels?1697832650886 (172.24.0.1) 1.960000ms referer=https://jupyter6.clearnasdss.synology.me/lab/workspaces/auto-S/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 20:10:50.894 NotebookApp] 302 GET /offlinenotebook/config (172.24.0.1) 1.850000ms
[W 20:10:50.896 NotebookApp] Forbidden
[W 20:10:50.896 NotebookApp] 403 GET /api/sessions?1697832650888 (172.24.0.1) 1.490000ms referer=https://jupyter6.clearnasdss.synology.me/lab/workspaces/auto-S/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[W 20:10:50.898 NotebookApp] Forbidden
[W 20:10:50.898 NotebookApp] 403 GET /api/terminals?1697832650890 (172.24.0.1) 1.040000ms referer=https://jupyter6.clearnasdss.synology.me/lab/workspaces/auto-S/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[W 20:10:50.911 NotebookApp] Forbidden
[W 20:10:50.912 NotebookApp] 403 GET /api/kernelspecs?1697832650906 (172.24.0.1) 2.130000ms referer=https://jupyter6.clearnasdss.synology.me/lab/workspaces/auto-S/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[W 20:32:02.999 NotebookApp] Forbidden
[W 20:32:03.001 NotebookApp] 403 GET /api/kernelspecs?1697833922967 (172.24.0.1) 2.520000ms referer=https://jupyter6.clearnasdss.synology.me/lab/workspaces/auto-S/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[W 20:32:03.003 NotebookApp] Forbidden
[W 20:32:03.004 NotebookApp] 403 GET /api/kernels?1697833922981 (172.24.0.1) 1.170000ms referer=https://jupyter6.clearnasdss.synology.me/lab/workspaces/auto-S/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[W 20:32:03.008 NotebookApp] Forbidden
[W 20:32:03.009 NotebookApp] 403 GET /api/sessions?1697833922985 (172.24.0.1) 1.390000ms referer=https://jupyter6.clearnasdss.synology.me/lab/workspaces/auto-S/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[W 20:32:03.012 NotebookApp] Forbidden
[W 20:32:03.013 NotebookApp] 403 GET /api/terminals?1697833922988 (172.24.0.1) 1.320000ms referer=https://jupyter6.clearnasdss.synology.me/lab/workspaces/auto-S/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[W 20:32:04.415 NotebookApp] Forbidden
[W 20:32:04.417 NotebookApp] 403 GET /api/kernelspecs?1697833923345 (172.24.0.1) 2.000000ms referer=https://jupyter6.clearnasdss.synology.me/lab/workspaces/auto-V/tree/pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[W 2023-10-20 20:32:04.429 LabApp] wrote error: 'Forbidden'
[W 20:32:04.429 NotebookApp] 403 GET /lab/api/settings?1697833923376 (172.24.0.1) 5.130000ms referer=https://jupyter6.clearnasdss.synology.me/lab/workspaces/auto-V/tree/pH10_0pt1uMCuT_electrodeA_allcalibs.ipynb
[I 20:32:04.431 NotebookApp] 302 GET /offlinenotebook/config (172.24.0.1) 0.920000ms
[I 20:32:06.925 NotebookApp] 302 GET /lab/workspaces/auto-S/tree/pH8_0pt1uMCuT_electrodeA_metamethod.ipynb (172.24.0.1) 1.050000ms
[I 20:32:12.655 NotebookApp] 302 POST /login?next=%2Flab%2Fworkspaces%2Fauto-S%2Ftree%2FpH8_0pt1uMCuT_electrodeA_metamethod.ipynb (172.24.0.1) 160.510000ms
[I 2023-10-20 20:32:16.621 LabApp] Build is up to date
[I 21:31:49.192 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:80aa1639-3226-4970-9d21-561bf12845f5
[I 21:31:49.195 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:25deaa44-72b2-43e1-808f-463b96e107dc
[W 22:04:45.213 NotebookApp] WebSocket ping timeout after 119919 ms.
[I 22:04:50.215 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[W 22:04:52.113 NotebookApp] WebSocket ping timeout after 119868 ms.
[I 22:04:57.115 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 22:11:35.946 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 22:11:35.949 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[W 22:13:05.948 NotebookApp] WebSocket ping timeout after 90001 ms.
[W 22:13:05.951 NotebookApp] WebSocket ping timeout after 90001 ms.
[I 22:13:10.950 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 22:13:10.952 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 00:29:53.963 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:80aa1639-3226-4970-9d21-561bf12845f5
[I 00:29:53.968 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:25deaa44-72b2-43e1-808f-463b96e107dc
[I 2023-10-21 00:36:37.490 LabApp] Build is up to date
[W 03:32:56.811 NotebookApp] WebSocket ping timeout after 90001 ms.
[I 03:54:28.102 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:7ab3de5f-a770-4ce1-b303-a095fd28a980
[I 03:54:28.102 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:70e17791-f18b-4ddb-a3dc-0385c32d7577
[I 03:54:32.405 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:7ab3de5f-a770-4ce1-b303-a095fd28a980
[I 03:54:32.535 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:70e17791-f18b-4ddb-a3dc-0385c32d7577
[I 03:55:35.736 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:7ab3de5f-a770-4ce1-b303-a095fd28a980
[I 03:55:35.736 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:70e17791-f18b-4ddb-a3dc-0385c32d7577
[I 03:55:39.901 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:70e17791-f18b-4ddb-a3dc-0385c32d7577
[I 03:55:40.056 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:7ab3de5f-a770-4ce1-b303-a095fd28a980
[I 03:56:41.659 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:70e17791-f18b-4ddb-a3dc-0385c32d7577
[I 03:56:41.660 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:7ab3de5f-a770-4ce1-b303-a095fd28a980
[W 05:33:10.887 NotebookApp] WebSocket ping timeout after 90001 ms.
[I 05:33:15.889 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[W 08:17:58.542 NotebookApp] WebSocket ping timeout after 90001 ms.
[I 08:18:03.544 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 09:43:41.885 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[W 09:45:11.887 NotebookApp] WebSocket ping timeout after 90001 ms.
[I 09:45:16.889 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 12:57:37.765 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[W 12:59:07.767 NotebookApp] WebSocket ping timeout after 90001 ms.
[I 12:59:12.769 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 13:43:08.542 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[W 13:44:38.543 NotebookApp] WebSocket ping timeout after 90001 ms.
[I 13:44:43.546 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 14:14:52.445 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[W 14:16:22.447 NotebookApp] WebSocket ping timeout after 90001 ms.
[I 14:16:27.448 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 18:12:38.209 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 18:12:45.432 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[W 19:04:38.212 NotebookApp] WebSocket ping timeout after 119964 ms.
[I 19:04:43.215 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[W 19:04:45.433 NotebookApp] WebSocket ping timeout after 119974 ms.
[I 19:04:50.435 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 23:02:19.542 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 23:02:29.216 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[W 03:02:19.543 NotebookApp] WebSocket ping timeout after 119924 ms.
[I 03:02:24.553 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[W 03:02:29.217 NotebookApp] WebSocket ping timeout after 119851 ms.
[I 03:02:34.219 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 2023-10-22 18:23:47.854 LabApp] Build is up to date
[I 18:26:16.522 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:849aebdd-0e81-46b4-a2c2-420c7abc0c43
[I 18:26:16.523 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:0b454c69-126b-427a-9979-25f4d5a0fdc3
[I 20:25:20.144 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:849aebdd-0e81-46b4-a2c2-420c7abc0c43
[I 20:25:20.346 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:0b454c69-126b-427a-9979-25f4d5a0fdc3
[I 20:32:28.801 NotebookApp] Kernel started: dad42935-a991-4de2-911c-192b7f7a7418, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 20:32:32.705 NotebookApp] Kernel started: 098a4ed6-c3e4-480d-811a-f2ad002369fc, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 20:32:45.424 NotebookApp] Starting buffering for 098a4ed6-c3e4-480d-811a-f2ad002369fc:cc79e394-49e2-4e96-ac24-272b5c77600e
[I 20:33:01.763 NotebookApp] Kernel started: 860fad9c-b0b5-4364-8de3-bbe9b3f588ac, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 20:34:06.906 NotebookApp] Uploading file to /1e-6 Cu Flow through.xlsx
[W 20:34:10.441 NotebookApp] 400 GET /api/contents/1e-6%20Cu%20Flow%20through.xlsx?type=file&content=1&format=text&1698006850535 (172.24.0.1): /home/jovyan/1e-6 Cu Flow through.xlsx is not UTF-8 encoded
[W 20:34:10.441 NotebookApp] /home/jovyan/1e-6 Cu Flow through.xlsx is not UTF-8 encoded
[W 20:34:10.443 NotebookApp] 400 GET /api/contents/1e-6%20Cu%20Flow%20through.xlsx?type=file&content=1&format=text&1698006850535 (172.24.0.1) 3.060000ms referer=https://jupyter6.clearnasdss.synology.me/lab/workspaces/auto-S/tree/KNO3_pH6_0pt1uMCuT.ipynb
[W 20:34:27.811 NotebookApp] delete /1e-6 Cu Flow through.xlsx
[I 20:35:40.643 NotebookApp] Kernel started: 1f27f5b1-dafd-4416-9d8c-31b02b07eb64, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 20:35:43.907 NotebookApp] Starting buffering for 860fad9c-b0b5-4364-8de3-bbe9b3f588ac:2b8a832a-2cce-40fd-8c8d-d3fc51d240e5
[I 20:36:12.985 NotebookApp] Starting buffering for 1f27f5b1-dafd-4416-9d8c-31b02b07eb64:940c9347-0999-4416-a08d-e6e3728bf07e
[I 20:40:38.807 NotebookApp] Starting buffering for dad42935-a991-4de2-911c-192b7f7a7418:3aa404fb-0634-43f5-9a1a-43974049d324
[I 20:40:38.807 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:0b454c69-126b-427a-9979-25f4d5a0fdc3
[I 20:40:38.808 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:849aebdd-0e81-46b4-a2c2-420c7abc0c43
[I 20:42:42.247 NotebookApp] Restoring connection for dad42935-a991-4de2-911c-192b7f7a7418:3aa404fb-0634-43f5-9a1a-43974049d324
[I 20:42:42.350 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:0b454c69-126b-427a-9979-25f4d5a0fdc3
[I 20:42:42.448 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:849aebdd-0e81-46b4-a2c2-420c7abc0c43
[I 20:47:38.969 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:849aebdd-0e81-46b4-a2c2-420c7abc0c43
[I 20:47:38.970 NotebookApp] Starting buffering for dad42935-a991-4de2-911c-192b7f7a7418:3aa404fb-0634-43f5-9a1a-43974049d324
[I 20:47:38.971 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:0b454c69-126b-427a-9979-25f4d5a0fdc3
[I 22:50:14.287 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:849aebdd-0e81-46b4-a2c2-420c7abc0c43
[I 22:50:14.470 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:0b454c69-126b-427a-9979-25f4d5a0fdc3
[I 22:50:14.628 NotebookApp] Restoring connection for dad42935-a991-4de2-911c-192b7f7a7418:3aa404fb-0634-43f5-9a1a-43974049d324
[I 22:50:21.330 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:0b454c69-126b-427a-9979-25f4d5a0fdc3
[I 22:50:21.331 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:849aebdd-0e81-46b4-a2c2-420c7abc0c43
[I 22:50:21.332 NotebookApp] Starting buffering for dad42935-a991-4de2-911c-192b7f7a7418:3aa404fb-0634-43f5-9a1a-43974049d324
[I 2023-10-23 13:50:24.196 LabApp] Build is up to date
[I 14:10:15.725 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:6341193b-1a1e-4c64-af96-598eb625fafb
[I 14:10:15.725 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:66dbe457-5551-4ad6-bb69-a351302d7cf0
[I 2023-10-23 15:22:42.098 LabApp] Build is up to date
[I 2023-10-23 19:24:40.690 LabApp] Build is up to date
[I 2023-10-23 19:33:33.410 LabApp] Build is up to date
[I 19:33:53.280 NotebookApp] Creating new directory in 
[I 19:34:32.010 NotebookApp] Creating new file in /PbISE
[W 19:34:40.100 NotebookApp] delete /PbISE/untitled.txt
[I 19:34:41.702 NotebookApp] Creating new notebook in /PbISE
[I 19:34:46.571 NotebookApp] Kernel started: 16e4894c-993f-4829-972c-64eb5c519df0, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[W 19:34:47.456 NotebookApp] Got events for closed stream <zmq.eventloop.zmqstream.ZMQStream object at 0x7f068093ab50>
[I 19:36:41.813 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
[I 19:38:41.844 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
[I 19:39:33.830 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 19:41:33.870 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 19:43:31.899 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 19:44:12.478 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:bea78706-079d-4ebf-b922-8f77e6aaa3b6
[I 19:44:41.874 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
[I 19:44:51.174 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
[I 19:45:31.932 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 19:45:37.068 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
Executing: % setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt; %txt(1:n-8);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0152067;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.045  76.2
8.059  76.9
];

calibdata=[...
%volCu mV pH
0 88 2.001
50 107 2.001
100 115.9 1.987
250 125.8 1.99
500 136.6 1.994
1000 146.7 2.002
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; CuTmeas=1e-7; CuT=CuTmeas;
CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 358787
Encode time: 17459
Send time: 846
Draw time: 393921
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-8.5:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 399967
Encode time: 18635
Send time: 4626
Draw time: 437936
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauallsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[CuwithCuOs,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableauCuOs(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[Cunosolid,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2opentableaunosolid(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
plot([log10(Cunosolid) log10(Cunosolid)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--'); hold on
plot([log10(CuT) log10(CuT)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--','linewidth',2)
%plot([-9.576 -9.576],[-100 100],'b--')

text(log10(Cunosolid)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'model Cu^{2+}','rotation',90)
text(log10(CuT)+0.1,max(mV)-(max(mV)-mean(mVoriginal))/4,'Total Cu','rotation',90)
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 341744
Encode time: 17436
Send time: 776
Draw time: 374786
[I 19:45:52.386 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=1000e-6; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
10 46.7 2.057
100 45.2 2.049
1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    logCuT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 235401
Encode time: 14838
Send time: 4763
Draw time: 268804
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockPbconc=1000e-6; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
10 46.7 2.057
100 45.2 2.049
1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    logCuT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 323175
Encode time: 16101
Send time: 689
Draw time: 352352
[I 19:47:37.114 NotebookApp] Saving file at /pH8_0pt1uMCuT_electrodeA_metamethod.ipynb
[I 19:47:52.430 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-8.5:0.1:-3; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 402155
Encode time: 17728
Send time: 1096
Draw time: 434331
Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 325241
Encode time: 16188
Send time: 835
Draw time: 357200
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-8.5:0.1:-3; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 393359
Encode time: 16862
Send time: 2053
Draw time: 425913
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
10 46.7 2.057
%100 45.2 2.049
1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 323300
Encode time: 16398
Send time: 688
Draw time: 353917
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-7:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-7.5:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-8.5:0.1:-3; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 394181
Encode time: 17473
Send time: 905
Draw time: 426555
[I 19:49:52.463 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[140 275 -5 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-8.5:0.1:-3; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 390972
Encode time: 17827
Send time: 2599
Draw time: 427657
Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=100e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 322648
Encode time: 15925
Send time: 652
Draw time: 352018
Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=1e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 325575
Encode time: 16783
Send time: 774
Draw time: 356298
[I 19:51:52.495 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[0 100 -6.8 600];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-8.5:0.1:-3; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 387985
Encode time: 16626
Send time: 1293
Draw time: 419439
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[0 1000 -6.8 600];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-8.5:0.1:-3; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 390804
Encode time: 16585
Send time: 865
Draw time: 421764
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[100 1000 -6.8 600];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-8.5:0.1:-3; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 391746
Encode time: 17207
Send time: 1068
Draw time: 424102
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[100 1000 -6.8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[5 37 -5 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-8.5:0.1:-3; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 388054
Encode time: 17696
Send time: 952
Draw time: 420602
[I 19:53:52.526 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[100 1000 -6.8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[1 150 -6.8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-8.5:0.1:-3; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 390169
Encode time: 17919
Send time: 941
Draw time: 422336
Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=1e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logPbT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    %logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 322894
Encode time: 17539
Send time: 682
Draw time: 353411
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[100 1000 -6.8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[1 150 -6.8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-8.5:0.1:-3; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 389383
Encode time: 18013
Send time: 956
Draw time: 422034
[I 19:55:52.564 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
10 46.7 2.057
%100 45.2 2.049
%1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=1e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logPbT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    %logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 322432
Encode time: 16544
Send time: 652
Draw time: 352649
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[100 1000 -6.8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[1 150 -6.8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-8.5:0.1:-3; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 388614
Encode time: 18571
Send time: 1015
Draw time: 420936
Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=1e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logPbT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 322216
Encode time: 17267
Send time: 968
Draw time: 355841
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[100 1000 -6.8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[1 150 -6.8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-8.5:0.1:-3; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 560194
Encode time: 23256
Send time: 1268
Draw time: 603237
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[100 1000 -6.8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[1 150 -6.8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 389137
Encode time: 18602
Send time: 871
Draw time: 422011
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockPbconc=1000e-6; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
10 46.7 2.057
%100 45.2 2.049
%1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=1e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logPbT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 333321
Encode time: 16444
Send time: 933
Draw time: 363543
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[100 1000 -6.8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[1 150 -6.8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 394053
Encode time: 17942
Send time: 899
Draw time: 427837
[I 19:57:52.596 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
10 46.7 2.057
100 45.2 2.049
%1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=1e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logPbT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 321528
Encode time: 16855
Send time: 769
Draw time: 352716
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[100 1000 -6.8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[1 150 -6.8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 392145
Encode time: 18084
Send time: 1041
Draw time: 425468
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockPbconc=1000e-6; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
10 46.7 2.057
%100 45.2 2.049
%1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=1e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logPbT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 324282
Encode time: 15750
Send time: 730
Draw time: 354354
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[100 1000 -6.8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[1 150 -6.8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 389225
Encode time: 17971
Send time: 1188
Draw time: 421928
[I 19:59:52.627 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[10 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[1 150 -6.8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 391777
Encode time: 18553
Send time: 1127
Draw time: 425175
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[10 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[0.1 10 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 395045
Encode time: 17229
Send time: 1245
Draw time: 428030
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[60 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[0.1 10 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 392330
Encode time: 19165
Send time: 967
Draw time: 426109
[I 20:01:52.659 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[60 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[4 8 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 389007
Encode time: 18329
Send time: 941
Draw time: 422160
Executing: % then use this metacalibration to determine original sample logPb2+

Eooriginal=logisticfunction(pbestEo,log10(PbT))
moriginal=logisticfunction(pbestm,log10(PbT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal
[I 20:03:52.694 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
Executing: % then use this metacalibration to determine original sample logPb2+

PbT

Eooriginal=logisticfunction(pbestEo,log10(PbT))
moriginal=logisticfunction(pbestm,log10(PbT))

logPboriginal=(mVoriginal-Eooriginal)/moriginal
[I 20:05:52.726 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
Executing: % then use this metacalibration to determine original sample logPb2+

Eooriginal=logisticfunction(pbestEo,log10(PbT))
moriginal=logisticfunction(pbestm,log10(PbT))

logPboriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbTplot,mVcalc,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 371774
Encode time: 14850
Send time: 586
Draw time: 400222
[I 20:07:52.760 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=1e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logPbT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    %logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 320914
Encode time: 15970
Send time: 714
Draw time: 351008
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[60 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[4 8 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 395360
Encode time: 17907
Send time: 958
Draw time: 430136
Executing: % then use this metacalibration to determine original sample logPb2+

Eooriginal=logisticfunction(pbestEo,log10(PbT))
moriginal=logisticfunction(pbestm,log10(PbT))

logPboriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbTplot,mVcalc,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 341798
Encode time: 14619
Send time: 620
Draw time: 369315
[I 20:09:52.793 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logPbT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    %logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 318446
Encode time: 16840
Send time: 990
Draw time: 348814
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[60 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[4 8 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 387089
Encode time: 17482
Send time: 942
Draw time: 419196
Executing: % then use this metacalibration to determine original sample logPb2+

Eooriginal=logisticfunction(pbestEo,log10(PbT))
moriginal=logisticfunction(pbestm,log10(PbT))

logPboriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbTplot,mVcalc,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 340293
Encode time: 15836
Send time: 538
Draw time: 369862
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
%3 44.1 2.054
%10 46.7 2.057
%100 45.2 2.049
%1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logPbT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    %logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 333053
Encode time: 17482
Send time: 966
Draw time: 365829
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[60 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[4 8 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 395730
Encode time: 17614
Send time: 966
Draw time: 429375
Executing: % then use this metacalibration to determine original sample logPb2+

Eooriginal=logisticfunction(pbestEo,log10(PbT))
moriginal=logisticfunction(pbestm,log10(PbT))

logPboriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbTplot,mVcalc,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 340393
Encode time: 15876
Send time: 649
Draw time: 369987
[I 20:11:52.824 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
10 46.7 2.057
%100 45.2 2.049
1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logPbT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    %logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 322018
Encode time: 16943
Send time: 840
Draw time: 353944
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[60 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[4 8 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 390701
Encode time: 17071
Send time: 865
Draw time: 422365
Executing: % then use this metacalibration to determine original sample logPb2+

Eooriginal=logisticfunction(pbestEo,log10(PbT))
moriginal=logisticfunction(pbestm,log10(PbT))

logPboriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbTplot,mVcalc,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 343868
Encode time: 15579
Send time: 771
Draw time: 373444
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
10 46.7 2.057
%100 45.2 2.049
%1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logPbT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    %logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 321050
Encode time: 16776
Send time: 659
Draw time: 351785
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[60 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[4 8 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 389116
Encode time: 17239
Send time: 899
Draw time: 421342
[I 20:13:52.856 NotebookApp] Saving file at /PbISE/Pb_first_test.ipynb
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
%10 46.7 2.057
%100 45.2 2.049
%1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logPbT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    %logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 331124
Encode time: 16401
Send time: 2173
Draw time: 363355
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[60 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[4 8 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 391802
Encode time: 17279
Send time: 1150
Draw time: 423920
Executing: % then use this metacalibration to determine original sample logPb2+

Eooriginal=logisticfunction(pbestEo,log10(PbT))
moriginal=logisticfunction(pbestm,log10(PbT))

logPboriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbTplot,mVcalc,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 339662
Encode time: 15662
Send time: 645
Draw time: 369860
[W 20:15:27.864 NotebookApp] 404 GET /api/contents/PbISE/Pb_first_test_meta.ipynb?1698092127868 (172.24.0.1): file or directory does not exist: 'PbISE/Pb_first_test_meta.ipynb'
[W 20:15:27.864 NotebookApp] file or directory does not exist: 'PbISE/Pb_first_test_meta.ipynb'
[W 20:15:27.864 NotebookApp] 404 GET /api/contents/PbISE/Pb_first_test_meta.ipynb?1698092127868 (172.24.0.1) 1.750000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/PbISE/Pb_first_test.ipynb
[W 20:15:27.881 NotebookApp] 404 GET /api/contents/PbISE/Pb_first_test_meta.ipynb?content=0&1698092127886 (172.24.0.1): file or directory does not exist: 'PbISE/Pb_first_test_meta.ipynb'
[W 20:15:27.881 NotebookApp] file or directory does not exist: 'PbISE/Pb_first_test_meta.ipynb'
[W 20:15:27.882 NotebookApp] 404 GET /api/contents/PbISE/Pb_first_test_meta.ipynb?content=0&1698092127886 (172.24.0.1) 2.000000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/PbISE/Pb_first_test.ipynb
[I 20:15:27.888 NotebookApp] Uploading file to /PbISE/Pb_first_test_meta.ipynb
[W 20:15:27.916 NotebookApp] 409 PATCH /api/contents/PbISE/Pb_first_test_meta.ipynb?1698092127919 (172.24.0.1): File already exists: PbISE/Pb_first_test.ipynb
[W 20:15:27.916 NotebookApp] File already exists: PbISE/Pb_first_test.ipynb
[W 20:15:27.917 NotebookApp] 409 PATCH /api/contents/PbISE/Pb_first_test_meta.ipynb?1698092127919 (172.24.0.1) 2.980000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/PbISE/Pb_first_test.ipynb
[W 20:15:35.584 NotebookApp] delete /PbISE/Pb_first_test.ipynb
[W 20:15:52.856 NotebookApp] 404 GET /api/contents/PbISE/Pb_first_test_simple.ipynb?1698092152861 (172.24.0.1): file or directory does not exist: 'PbISE/Pb_first_test_simple.ipynb'
[W 20:15:52.856 NotebookApp] file or directory does not exist: 'PbISE/Pb_first_test_simple.ipynb'
[W 20:15:52.857 NotebookApp] 404 GET /api/contents/PbISE/Pb_first_test_simple.ipynb?1698092152861 (172.24.0.1) 1.800000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/PbISE/Pb_first_test_meta.ipynb
[W 20:15:52.877 NotebookApp] 404 GET /api/contents/PbISE/Pb_first_test_simple.ipynb?content=0&1698092152879 (172.24.0.1): file or directory does not exist: 'PbISE/Pb_first_test_simple.ipynb'
[W 20:15:52.878 NotebookApp] file or directory does not exist: 'PbISE/Pb_first_test_simple.ipynb'
[W 20:15:52.879 NotebookApp] 404 GET /api/contents/PbISE/Pb_first_test_simple.ipynb?content=0&1698092152879 (172.24.0.1) 3.110000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/PbISE/Pb_first_test_meta.ipynb
[I 20:15:52.889 NotebookApp] Uploading file to /PbISE/Pb_first_test_simple.ipynb
[I 20:17:52.934 NotebookApp] Saving file at /PbISE/Pb_first_test_simple.ipynb
Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit([log10(PbTplus)],[mV],1);
m=param(1); Eo=param(2); logPbplot=-9:0.1:-5;
val=polyval(param,);
plot(logPbplot,val,'k-');
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 291121
Encode time: 14871
Send time: 553
Draw time: 319673
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockPbconc=1000e-6; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
%10 46.7 2.057
%100 45.2 2.049
%1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit([log10(PbTplus)],[mV],1);
m=param(1); Eo=param(2); logPbplot=-9:0.1:-5;
val=polyval(param,logPbplot);
plot(logPbplot,val,'k-');
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 317249
Encode time: 16387
Send time: 702
Draw time: 347635
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[60 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[4 8 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 396623
Encode time: 17305
Send time: 781
Draw time: 427251
Executing: % then use this metacalibration to determine original sample logPb2+

Eooriginal=logisticfunction(pbestEo,log10(PbT))
moriginal=logisticfunction(pbestm,log10(PbT))

logPboriginal=(mVoriginal-Eo)/m

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbTplot,mVcalc,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 312513
Encode time: 14534
Send time: 484
Draw time: 340707
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockPbconc=1000e-6; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
%10 46.7 2.057
%100 45.2 2.049
%1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit([log10(PbTplus)],[mV],1);
m=param(1); Eo=param(2); logPbplot=-9:0.1:-5;
val=polyval(param,logPbplot);
plot(logPbplot,val,'k-');
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 321645
Encode time: 17476
Send time: 956
Draw time: 354438
Executing: % then use this metacalibration to determine original sample logPb2+

Eooriginal=logisticfunction(pbestEo,log10(PbT))
moriginal=logisticfunction(pbestm,log10(PbT))

logPboriginal=(mVoriginal-Eo)/m

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbTplot,val,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 338566
Encode time: 14111
Send time: 692
Draw time: 367211
Executing: % then use this metacalibration to determine original sample logPb2+

logPboriginal=(mVoriginal-Eo)/m

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbTplot,val,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 309359
Encode time: 14110
Send time: 507
Draw time: 336504
[I 20:19:52.969 NotebookApp] Saving file at /PbISE/Pb_first_test_simple.ipynb
Executing: % then use this metacalibration to determine original sample logPb2+

logPboriginal=(mVoriginal-Eo)/m

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbplot,val,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 373288
Encode time: 14798
Send time: 543
Draw time: 400899
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockPbconc=1000e-6; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
10 46.7 2.057
100 45.2 2.049
1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit([log10(PbTplus)],[mV],1);
m=param(1); Eo=param(2); logPbplot=-9:0.1:-5;
val=polyval(param,logPbplot);
plot(logPbplot,val,'k-');
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 321420
Encode time: 15983
Send time: 691
Draw time: 352733
Executing: % then use this metacalibration to determine original sample logPb2+

logPboriginal=(mVoriginal-Eo)/m

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbplot,val,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 362789
Encode time: 15806
Send time: 600
Draw time: 392344
[I 20:21:52.999 NotebookApp] Saving file at /PbISE/Pb_first_test_simple.ipynb
Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit([log10(PbTplus)],[mV],1)
m=param(1); Eo=param(2); logPbplot=-9:0.1:-5;
val=polyval(param,logPbplot);
plot(logPbplot,val,'k-');
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 321971
Encode time: 15929
Send time: 828
Draw time: 352282
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockPbconc=1000e-6; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
%1 41 2.057
%3 44.1 2.054
%10 46.7 2.057
%100 45.2 2.049
1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit([log10(PbTplus)],[mV],1)
m=param(1); Eo=param(2); logPbplot=-9:0.1:-5;
val=polyval(param,logPbplot);
plot(logPbplot,val,'k-');
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 316462
Encode time: 16140
Send time: 808
Draw time: 345711
Executing: % then use this metacalibration to determine original sample logPb2+

logPboriginal=(mVoriginal-Eo)/m

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbplot,val,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 339937
Encode time: 15923
Send time: 762
Draw time: 369121
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockPbconc=1000e-6; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
10 46.7 2.057
100 45.2 2.049
1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit([log10(PbTplus)],[mV],1)
m=param(1); Eo=param(2); logPbplot=-9:0.1:-5;
val=polyval(param,logPbplot);
plot(logPbplot,val,'k-');
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 382925
Encode time: 18804
Send time: 658
Draw time: 419683
Executing: % then use this metacalibration to determine original sample logPb2+

logPboriginal=(mVoriginal-Eo)/m

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbplot,val,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 343605
Encode time: 15861
Send time: 861
Draw time: 377746
[I 20:23:53.028 NotebookApp] Saving file at /PbISE/Pb_first_test_simple.ipynb
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockPbconc=1000e-6; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
10 46.7 2.057
100 45.2 2.049
1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=1e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit([log10(PbTplus)],[mV],1)
m=param(1); Eo=param(2); logPbplot=-9:0.1:-5;
val=polyval(param,logPbplot);
plot(logPbplot,val,'k-');
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 316394
Encode time: 16291
Send time: 5371
Draw time: 352214
Executing: % then use this metacalibration to determine original sample logPb2+

logPboriginal=(mVoriginal-Eo)/m

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbplot,val,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 340856
Encode time: 15374
Send time: 537
Draw time: 369415
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockPbconc=1000e-6; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
10 46.7 2.057
100 45.2 2.049
1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit([log10(PbTplus)],[mV],1)
m=param(1); Eo=param(2); logPbplot=-9:0.1:-5;
val=polyval(param,logPbplot);
plot(logPbplot,val,'k-');
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 320554
Encode time: 15740
Send time: 661
Draw time: 349117
Executing: % then use this metacalibration to determine original sample logPb2+

logPboriginal=(mVoriginal-Eo)/m

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbplot,val,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 348300
Encode time: 17059
Send time: 585
Draw time: 378219
[I 20:25:53.059 NotebookApp] Saving file at /PbISE/Pb_first_test_simple.ipynb
[I 01:22:04.149 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:bcc6d2fb-c85e-4cca-a993-c014c9a9b927
[I 01:22:04.154 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:bb4536a2-4b54-43d5-a052-905b63d42836
[I 02:51:06.673 NotebookApp] Starting buffering for 16e4894c-993f-4829-972c-64eb5c519df0:ec48b208-559e-47a0-9b3a-3a182e6e5dcd
[I 2023-10-24 13:29:43.896 LabApp] Build is up to date
[I 2023-10-24 13:52:50.912 LabApp] Build is up to date
[I 13:53:19.412 NotebookApp] 302 GET /lab? (172.24.0.1) 1.130000ms
[I 13:53:24.655 NotebookApp] 302 POST /login?next=%2Flab%3F (172.24.0.1) 148.070000ms
[I 13:53:25.614 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 0.700000ms
[I 2023-10-24 13:53:28.567 LabApp] Build is up to date
[I 13:53:29.209 NotebookApp] 301 GET /static/favicons/favicon-busy-1.ico (172.24.0.1) 2.130000ms
[I 13:53:48.348 NotebookApp] Starting buffering for 16e4894c-993f-4829-972c-64eb5c519df0:04de6633-9e6f-45fc-b7e7-1319af2411c5
[I 14:49:31.390 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:841e03a3-f767-4f59-a163-1fbf3a6f21c0
[I 14:49:31.391 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:e876f5d9-d82a-4b86-981f-6f5ccd49f91a
[I 14:49:36.818 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:841e03a3-f767-4f59-a163-1fbf3a6f21c0
[I 14:49:36.917 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:e876f5d9-d82a-4b86-981f-6f5ccd49f91a
[I 14:49:37.884 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:841e03a3-f767-4f59-a163-1fbf3a6f21c0
[I 14:49:37.884 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:e876f5d9-d82a-4b86-981f-6f5ccd49f91a
[I 14:56:35.798 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:e876f5d9-d82a-4b86-981f-6f5ccd49f91a
[I 14:56:35.911 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:841e03a3-f767-4f59-a163-1fbf3a6f21c0
[I 15:00:23.604 NotebookApp] 302 GET / (172.24.0.1) 0.880000ms
[I 15:00:23.742 NotebookApp] 302 GET /tree (172.24.0.1) 1.060000ms
[I 15:01:09.991 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 0.570000ms
[I 2023-10-24 15:01:12.931 LabApp] Build is up to date
[I 2023-10-24 15:27:30.006 LabApp] Build is up to date
[I 15:27:55.068 NotebookApp] Kernel started: cccf07a3-fa16-4c33-8a2d-87908cdbc1ad, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockPbconc=1000e-6; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
10 46.7 2.057
100 45.2 2.049
1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit([log10(PbTplus)],[mV],1)
m=param(1); Eo=param(2); logPbplot=-9:0.1:-5;
val=polyval(param,logPbplot);
plot(logPbplot,val,'k-');
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 320873
Encode time: 16363
Send time: 870
Draw time: 351161
Executing: % then use this metacalibration to determine original sample logPb2+

logPboriginal=(mVoriginal-Eo)/m

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbplot,val,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 344286
Encode time: 16198
Send time: 766
Draw time: 374078
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockPbconc=1000e-6; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
10 46.7 2.057
100 45.2 2.049
1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(PbTplus(i)) log10(PbTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2]);
    plot([log10(PbTplus(i))-0.2 log10(PbTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logPbT(i)=mean([log10(PbTplus(i)) log10(PbTplus(i+1))]); % calib Pb is the midpoint
    %logPbT(i)=[log10(PbTplus(i))]; % calib Pb is the starting point 
end
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 323353
Encode time: 15819
Send time: 5276
Draw time: 358556
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logPbT,Eo,'ko'); subplot(222); plot(logPbT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[60 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[4 8 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logPbT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(PbTplus),mV,'ko'); hold on
logPbTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logPbTplot(i));
    mcalc=logisticfunction(pbestm,logPbTplot(i));
    mVcalc(i)=Eocalc+mcalc*logPbTplot(i);
end
plot(logPbTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 397216
Encode time: 16866
Send time: 1207
Draw time: 430160
Executing: % then use this metacalibration to determine original sample logPb2+

Eooriginal=logisticfunction(pbestEo,log10(PbT))
moriginal=logisticfunction(pbestm,log10(PbT))

logPboriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbTplot,mVcalc,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 340141
Encode time: 14833
Send time: 880
Draw time: 369001
[I 15:29:54.958 NotebookApp] Saving file at /PbISE/Pb_first_test_meta.ipynb
[I 15:30:00.001 NotebookApp] Saving file at /PbISE/Pb_first_test_simple.ipynb
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
Executing: % put in constants
VT=0.05; %total volume
stockPbconc=1000e-6; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
8.498  -147.1
8.503  -144.1
8.527  -144.7
];

calibdata=[...
%volPb mV pH
0 33.7 2.068
1 41 2.057
3 44.1 2.054
%10 46.7 2.057
%100 45.2 2.049
%1000 186.4 1.468
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedPbvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
PbTmeas=10e-9; % not actually known until it is measured 
PbT=PbTmeas; PbTplus=(PbTmeas*(VT)+addedPbvol*stockPbconc)./(VT+addedPbvol);

plot(log10(PbTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit([log10(PbTplus)],[mV],1)
m=param(1); Eo=param(2); logPbplot=-9:0.1:-5;
val=polyval(param,logPbplot);
plot(logPbplot,val,'k-');
xlabel('log[Pb^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 322817
Encode time: 16260
Send time: 714
Draw time: 352455
Executing: % then use this metacalibration to determine original sample logPb2+

logPboriginal=(mVoriginal-Eo)/m

plot(log10(PbTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logPbplot,val,'k-')
plot(logPboriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 340651
Encode time: 14950
Send time: 472
Draw time: 368828
[I 15:32:00.042 NotebookApp] Saving file at /PbISE/Pb_first_test_simple.ipynb
[I 15:39:38.319 NotebookApp] Starting buffering for 16e4894c-993f-4829-972c-64eb5c519df0:a669f193-1d02-4ef6-9ef0-302cf77c0f76
[I 15:39:38.319 NotebookApp] Starting buffering for cccf07a3-fa16-4c33-8a2d-87908cdbc1ad:63c45b2d-285a-4337-92a7-7bee68293904
[W 15:51:36.548 NotebookApp] WebSocket ping timeout after 119907 ms.
[W 15:51:36.637 NotebookApp] WebSocket ping timeout after 119974 ms.
[I 15:51:41.550 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 15:51:41.638 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 16:14:33.572 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 16:14:33.621 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 16:15:18.901 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 16:15:18.901 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 16:15:39.237 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 16:15:39.240 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[W 16:18:09.239 NotebookApp] WebSocket ping timeout after 119927 ms.
[W 16:18:09.240 NotebookApp] WebSocket ping timeout after 119935 ms.
[I 16:18:14.241 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 16:18:14.241 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 17:29:11.559 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 17:29:16.928 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 17:29:50.383 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:9a321ce7-31a2-4797-af0c-20601a4bc6e1
[I 17:29:50.383 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:a9d5c467-90aa-43e5-93c9-6bd0a4b3288e
[I 18:57:11.987 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:841e03a3-f767-4f59-a163-1fbf3a6f21c0
[I 18:57:11.987 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:e876f5d9-d82a-4b86-981f-6f5ccd49f91a
[I 18:57:16.113 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:e876f5d9-d82a-4b86-981f-6f5ccd49f91a
[I 18:57:16.248 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:841e03a3-f767-4f59-a163-1fbf3a6f21c0
[I 18:58:20.025 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:841e03a3-f767-4f59-a163-1fbf3a6f21c0
[I 18:58:20.026 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:e876f5d9-d82a-4b86-981f-6f5ccd49f91a
[I 19:16:44.774 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:e876f5d9-d82a-4b86-981f-6f5ccd49f91a
[I 19:16:53.744 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:841e03a3-f767-4f59-a163-1fbf3a6f21c0
[I 2023-10-24 19:19:30.047 LabApp] Build is up to date
[I 19:19:39.840 NotebookApp] Creating new directory in 
[I 19:20:39.830 NotebookApp] Creating new notebook in /Cu_EN
[I 19:20:43.933 NotebookApp] Kernel started: fafe1276-c970-4375-bd9f-fdf0aa69316e, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[W 19:20:44.361 NotebookApp] Got events for closed stream <zmq.eventloop.zmqstream.ZMQStream object at 0x7f0680c2bbd0>
[I 19:22:39.941 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
[I 19:27:59.723 NotebookApp] Starting buffering for 16e4894c-993f-4829-972c-64eb5c519df0:4b0c5a94-d249-4113-8f02-1de3f44cb10c
[I 19:28:39.964 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
[I 19:30:39.995 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
[I 19:32:40.021 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
[I 19:34:40.045 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
[I 19:38:40.075 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
[I 19:40:40.103 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
[I 19:41:10.978 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133/0.05
%M
[I 19:43:11.009 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133;
%M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    %logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 327779
Encode time: 16717
Send time: 747
Draw time: 361170
[I 19:45:11.042 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    %logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 320977
Encode time: 16545
Send time: 1030
Draw time: 351914
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[60 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logPbT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[4 8 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logPbT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Pb^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 391837
Encode time: 17000
Send time: 848
Draw time: 422982
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[60 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[4 8 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9.5:0.1:-6; 
for i=1:length(logPbTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 389239
Encode time: 17396
Send time: 1044
Draw time: 421196
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[60 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[4 8 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9.5:0.1:-6; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 390412
Encode time: 17784
Send time: 916
Draw time: 422696
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.00133; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    %logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 324455
Encode time: 17205
Send time: 1069
Draw time: 356521
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[60 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[4 8 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9.5:0.1:-6; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 388244
Encode time: 17400
Send time: 921
Draw time: 419059
[I 19:47:11.071 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    %logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 324002
Encode time: 16543
Send time: 846
Draw time: 355334
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[60 100 -8 1];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[4 8 -8 0.7];
logx=-9:0.1:-5; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9.5:0.1:-6; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 389091
Encode time: 16742
Send time: 1209
Draw time: 420363
[I 19:49:11.102 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    %logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 320478
Encode time: 16819
Send time: 757
Draw time: 351243
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 388505
Encode time: 16772
Send time: 777
Draw time: 420580
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    %logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 320106
Encode time: 16382
Send time: 682
Draw time: 350854
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 388313
Encode time: 17437
Send time: 988
Draw time: 420630
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 318879
Encode time: 16803
Send time: 754
Draw time: 349240
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 389621
Encode time: 18013
Send time: 999
Draw time: 425194
[I 19:51:11.132 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 323942
Encode time: 17039
Send time: 717
Draw time: 354180
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 406357
Encode time: 17817
Send time: 1006
Draw time: 438299
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 344970
Encode time: 14557
Send time: 486
Draw time: 372345
[I 19:53:11.167 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
[W 19:54:23.978 NotebookApp] 404 GET /api/contents/Cutableaus/CuOHCO2open_EN_allsolids.m?1698177263979 (172.24.0.1): file or directory does not exist: 'Cutableaus/CuOHCO2open_EN_allsolids.m'
[W 19:54:23.978 NotebookApp] file or directory does not exist: 'Cutableaus/CuOHCO2open_EN_allsolids.m'
[W 19:54:23.979 NotebookApp] 404 GET /api/contents/Cutableaus/CuOHCO2open_EN_allsolids.m?1698177263979 (172.24.0.1) 2.120000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/Cutableaus/CuOHCO2opentableauallsolids.m
[W 19:54:23.983 NotebookApp] 404 GET /api/contents/Cutableaus/CuOHCO2open_EN_allsolids.m?content=0&1698177263986 (172.24.0.1): file or directory does not exist: 'Cutableaus/CuOHCO2open_EN_allsolids.m'
[W 19:54:23.984 NotebookApp] file or directory does not exist: 'Cutableaus/CuOHCO2open_EN_allsolids.m'
[W 19:54:23.984 NotebookApp] 404 GET /api/contents/Cutableaus/CuOHCO2open_EN_allsolids.m?content=0&1698177263986 (172.24.0.1) 2.120000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/Cutableaus/CuOHCO2opentableauallsolids.m
[I 19:54:23.989 NotebookApp] Uploading file to /Cutableaus/CuOHCO2open_EN_allsolids.m
[I 19:56:24.006 NotebookApp] Saving file at /Cutableaus/CuOHCO2open_EN_allsolids.m
[I 19:56:31.151 NotebookApp] Saving file at /Cutableaus/CuOHCO2open_EN_allsolids.m
[I 19:56:38.439 NotebookApp] Starting buffering for cccf07a3-fa16-4c33-8a2d-87908cdbc1ad:d7ff5e67-75c1-4ba2-a55e-a0c582a5dab6
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 324218
Encode time: 16981
Send time: 709
Draw time: 356238
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 391742
Encode time: 18834
Send time: 1017
Draw time: 426560
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 340842
Encode time: 14413
Send time: 464
Draw time: 368494
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT; ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
[I 19:59:11.205 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pH=2; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 319243
Encode time: 16773
Send time: 806
Draw time: 350378
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 394832
Encode time: 17677
Send time: 1148
Draw time: 433541
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 338098
Encode time: 14826
Send time: 758
Draw time: 367684
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-7; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 321438
Encode time: 16744
Send time: 732
Draw time: 352539
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 394371
Encode time: 18765
Send time: 6087
Draw time: 432381
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 354227
Encode time: 14006
Send time: 489
Draw time: 381930
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)
[I 20:01:11.244 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
%0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-7; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 318523
Encode time: 17277
Send time: 715
Draw time: 349204
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 419640
Encode time: 25453
Send time: 1569
Draw time: 459810
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 340166
Encode time: 14693
Send time: 547
Draw time: 369716
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
%0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 318990
Encode time: 16145
Send time: 725
Draw time: 348690
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 434507
Encode time: 17560
Send time: 6496
Draw time: 475598
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 341609
Encode time: 14784
Send time: 576
Draw time: 370230
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 321682
Encode time: 16910
Send time: 687
Draw time: 351911
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 392484
Encode time: 17870
Send time: 1022
Draw time: 424929
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 340883
Encode time: 14370
Send time: 538
Draw time: 368287
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)
[I 20:03:11.280 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
%1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 328372
Encode time: 16883
Send time: 696
Draw time: 360344
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 390848
Encode time: 17918
Send time: 942
Draw time: 424508
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 352330
Encode time: 14656
Send time: 538
Draw time: 380470
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)
[I 20:04:09.993 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
[I 20:04:31.173 NotebookApp] Saving file at /Cutableaus/CuOHCO2open_EN_allsolids.m
[I 20:06:14.685 NotebookApp] Saving file at /Cutableaus/CuOHCO2open_EN_allsolids.m
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 322364
Encode time: 17554
Send time: 1076
Draw time: 353936
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 390180
Encode time: 17960
Send time: 1514
Draw time: 423349
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 340640
Encode time: 15003
Send time: 510
Draw time: 369706
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 405900
Encode time: 16779
Send time: 991
Draw time: 441145
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 393146
Encode time: 17198
Send time: 1242
Draw time: 425156
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 339389
Encode time: 14325
Send time: 480
Draw time: 367354
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pH=2; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)
[I 20:07:06.500 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-8; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 327796
Encode time: 17113
Send time: 11900
Draw time: 377230
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 398267
Encode time: 17784
Send time: 1029
Draw time: 431492
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 338720
Encode time: 14437
Send time: 523
Draw time: 368639
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.000133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-8; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 321782
Encode time: 17548
Send time: 1005
Draw time: 352712
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 397093
Encode time: 17607
Send time: 1470
Draw time: 430267
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 341701
Encode time: 14314
Send time: 734
Draw time: 369030
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)
[I 20:09:06.537 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 322383
Encode time: 16908
Send time: 987
Draw time: 353441
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 395714
Encode time: 20025
Send time: 4415
Draw time: 436524
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 342575
Encode time: 14417
Send time: 479
Draw time: 378193
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 324608
Encode time: 16473
Send time: 716
Draw time: 354245
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 390175
Encode time: 17313
Send time: 992
Draw time: 422490
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 363183
Encode time: 14945
Send time: 479
Draw time: 419539
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)

log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
Device pixel ratio: 1
Render time: 298893
Encode time: 13745
Send time: 801
Draw time: 326195
[I 20:11:06.579 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)

log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); 
hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
Device pixel ratio: 1
Render time: 346279
Encode time: 14818
Send time: 619
Draw time: 374825
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)

log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); 
hold on
%plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
Device pixel ratio: 1
Render time: 327839
Encode time: 14287
Send time: 440
Draw time: 355681
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)

log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); 
%hold on
%plot(logCuTplot,mVcalc,'k-')
%plot(logCuoriginal,mVoriginal,'ko','markersize',8)

%plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)

%log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); 
%hold on
%plot(logCuTplot,mVcalc,'k-')
%plot(logCuoriginal,mVoriginal,'ko','markersize',8)

%plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); 
%hold on
%plot(logCuTplot,mVcalc,'k-')
%plot(logCuoriginal,mVoriginal,'ko','markersize',8)

%plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
Device pixel ratio: 1
Render time: 317930
Encode time: 14646
Send time: 734
Draw time: 347067
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

%determine all the slopes and intercepts for each pair of mV values
for i=1:length(mV)-1
    param=polyfit([log10(CuTplus(i)) log10(CuTplus(i+1))],[mV(i) mV(i+1)],1);
    val=polyval(param,[log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2]);
    plot([log10(CuTplus(i))-0.2 log10(CuTplus(i+1))+0.2],val,'k-')
    m(i)=param(1); Eo(i)=param(2); 
    %two ways to define what logCu is for the Eo and m values. need to pick the approach that consistently works best
    %logCuT(i)=mean([log10(CuTplus(i)) log10(CuTplus(i+1))]); % calib Cu is the midpoint
    logCuT(i)=[log10(CuTplus(i))]; % calib Cu is the starting point 
end
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 323662
Encode time: 16846
Send time: 762
Draw time: 354592
Executing: %plot and fit the s and Eo curves to a logit function.

subplot(221); plot(logCuT,Eo,'ko'); subplot(222); plot(logCuT,m,'ko');

%use logisticmodel
%define function
logisticfunction = @(p,logx) (p(1)+(p(2)-p(1))./(1+10.^(p(3)-logx)*p(4)));
errfunction=@(p,logx,meas) (log10(sum((meas-logisticfunction(p,logx)).^2)));

%fit Eo to meta calibration
ptst=[min(Eo) max(Eo) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,Eo);
subplot(221); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestEo=fminsearch(@(p) errfunction(p,logCuT,Eo),ptst,options);
model=logisticfunction(pbestEo,logx);
plot(logx,model,'k--')

%fit m to meta calibration
ptst=[min(m) max(m) logCuT(1)+((logCuT(end)-logCuT(1))/2) 1];
logx=-6:0.1:-3; model=logisticfunction(ptst,logx);
err=errfunction(ptst,logCuT,m);
subplot(222); hold on
plot(logx,model,'k-')
% now best fit
options = optimset('Display','off','TolFun',1e-4,'TolX',1e-4);
pbestm=fminsearch(@(p) errfunction(p,logCuT,m),ptst,options);
model=logisticfunction(pbestm,logx);
plot(logx,model,'k--')

%plot the original data and the metacalibration fit
subplot(223)
plot(log10(CuTplus),mV,'ko'); hold on
logCuTplot=-9:0.1:-3; 
for i=1:length(logCuTplot)
    Eocalc=logisticfunction(pbestEo,logCuTplot(i));
    mcalc=logisticfunction(pbestm,logCuTplot(i));
    mVcalc(i)=Eocalc+mcalc*logCuTplot(i);
end
plot(logCuTplot,mVcalc,'k-')

subplot(221); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Eo (mV)')
    
subplot(222); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('m (mV/decade)')

subplot(223); set(gca,'fontsize',12); set(gca,'linewidth',1);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')
Device pixel ratio: 1
Render time: 392401
Encode time: 17615
Send time: 1045
Draw time: 424977
Executing: % then use this metacalibration to determine original sample logCu2+

Eooriginal=logisticfunction(pbestEo,log10(CuT))
moriginal=logisticfunction(pbestm,log10(CuT))

logCuoriginal=(mVoriginal-Eooriginal)/moriginal

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 348342
Encode time: 14651
Send time: 509
Draw time: 378761
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); 
hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
Device pixel ratio: 1
Render time: 338647
Encode time: 14381
Send time: 446
Draw time: 365965
[I 20:13:06.621 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
[W 20:13:21.623 NotebookApp] 404 GET /api/contents/Cu_EN/CuT1e-6_EN1e-5_pH10meta.ipynb?1698178401620 (172.24.0.1): file or directory does not exist: 'Cu_EN/CuT1e-6_EN1e-5_pH10meta.ipynb'
[W 20:13:21.623 NotebookApp] file or directory does not exist: 'Cu_EN/CuT1e-6_EN1e-5_pH10meta.ipynb'
[W 20:13:21.625 NotebookApp] 404 GET /api/contents/Cu_EN/CuT1e-6_EN1e-5_pH10meta.ipynb?1698178401620 (172.24.0.1) 2.950000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
[W 20:13:21.646 NotebookApp] 404 GET /api/contents/Cu_EN/CuT1e-6_EN1e-5_pH10meta.ipynb?content=0&1698178401644 (172.24.0.1): file or directory does not exist: 'Cu_EN/CuT1e-6_EN1e-5_pH10meta.ipynb'
[W 20:13:21.647 NotebookApp] file or directory does not exist: 'Cu_EN/CuT1e-6_EN1e-5_pH10meta.ipynb'
[W 20:13:21.648 NotebookApp] 404 GET /api/contents/Cu_EN/CuT1e-6_EN1e-5_pH10meta.ipynb?content=0&1698178401644 (172.24.0.1) 3.010000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/Cu_EN/CuT1e-6_EN1e-5_pH10.ipynb
[I 20:13:21.662 NotebookApp] Uploading file to /Cu_EN/CuT1e-6_EN1e-5_pH10meta.ipynb
[W 20:13:34.420 NotebookApp] 404 GET /api/contents/Cu_EN/CuT1e-6_EN1e-5_pH10linear.ipynb?1698178414416 (172.24.0.1): file or directory does not exist: 'Cu_EN/CuT1e-6_EN1e-5_pH10linear.ipynb'
[W 20:13:34.421 NotebookApp] file or directory does not exist: 'Cu_EN/CuT1e-6_EN1e-5_pH10linear.ipynb'
[W 20:13:34.421 NotebookApp] 404 GET /api/contents/Cu_EN/CuT1e-6_EN1e-5_pH10linear.ipynb?1698178414416 (172.24.0.1) 2.990000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/Cu_EN/CuT1e-6_EN1e-5_pH10meta.ipynb
[W 20:13:34.438 NotebookApp] 404 GET /api/contents/Cu_EN/CuT1e-6_EN1e-5_pH10linear.ipynb?content=0&1698178414435 (172.24.0.1): file or directory does not exist: 'Cu_EN/CuT1e-6_EN1e-5_pH10linear.ipynb'
[W 20:13:34.438 NotebookApp] file or directory does not exist: 'Cu_EN/CuT1e-6_EN1e-5_pH10linear.ipynb'
[W 20:13:34.439 NotebookApp] 404 GET /api/contents/Cu_EN/CuT1e-6_EN1e-5_pH10linear.ipynb?content=0&1698178414435 (172.24.0.1) 2.270000ms referer=https://jupyter6.clearnasdss.synology.me/lab/tree/Cu_EN/CuT1e-6_EN1e-5_pH10meta.ipynb
[I 20:13:34.445 NotebookApp] Uploading file to /Cu_EN/CuT1e-6_EN1e-5_pH10linear.ipynb
[I 20:15:34.488 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10linear.ipynb
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit([log10(CuTplus)],[mV],1)
m=param(1); Eo=param(2); logCuplot=-9:0.1:-5;
val=polyval(param,logCuplot);
plot(logCuplot,val,'k-');
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 325656
Encode time: 15792
Send time: 682
Draw time: 355858
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit([log10(CuTplus)],[mV],1)
m=param(1); Eo=param(2); logCuplot=-9:0.1:-3;
val=polyval(param,logCuplot);
plot(logCuplot,val,'k-');
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 318478
Encode time: 17057
Send time: 684
Draw time: 349023
Executing: % then use this metacalibration to determine original sample logCu2+

logCuoriginal=(mVoriginal-Eo)/m

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuplot,val,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 342686
Encode time: 14523
Send time: 646
Draw time: 372243
[I 20:17:34.520 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10linear.ipynb
[I 20:18:22.771 NotebookApp] Kernel started: 980abff1-bfe7-49a0-a4c0-6d6c2b3f678a, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); 
hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
Device pixel ratio: 1
Render time: 340291
Encode time: 14849
Send time: 451
Draw time: 369517
Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % put in constants
VT=0.05; %total volume
stockCuconc=0.0133; %M
ENT=1e-5;
Executing: % put in data

originalsamplemVnpH=[...
%pH mV
10.063  -223.1
10.115  -223.6
10.151  -223.4
];

calibdata=[...
%volCu mV pH
0 112.4  2.101
50 114.1 2.060
100 115.3 2.029
250 118.7 2.016
500 123.5 2.005
1000 127.8 1.997
];

Executing: graphics_toolkit("notebook")
% pull out the sample data
pH=mean(originalsamplemVnpH(:,1))
mVoriginal=(originalsamplemVnpH(:,2));

%pull out the calibration data
addedCuvol=calibdata(:,1)'*1e-6; pHcalib=calibdata(:,3); mV=calibdata(:,2)'; 
CuTmeas=1e-6; % not actually known until it is measured 
CuT=CuTmeas; CuTplus=(CuTmeas*(VT)+addedCuvol*stockCuconc)./(VT+addedCuvol);

plot(log10(CuTplus),mV,'ko'); hold on

%chlorocorrecxtion
%BF1=2.49; BF2=1.14; BF3=0.9; ClT=4.9904e-4; %from Inorg. Chem. 1983. 22. 3323-3326.
%CuTplus=CuTplus./(1+BF1*ClT+BF2*ClT^2+BF3*ClT^3);

param=polyfit([log10(CuTplus)],[mV],1)
m=param(1); Eo=param(2); logCuplot=-9:0.1:-3;
val=polyval(param,logCuplot);
plot(logCuplot,val,'k-');
xlabel('log[Cu^{2+}]');  ylabel('mV');
set(gca,'fontsize',12); set(gca,'linewidth',2);
xlabel('log[Cu^{2+}]'); ylabel('Potential (mV)')

Device pixel ratio: 1
Render time: 321223
Encode time: 17001
Send time: 726
Draw time: 352450
Executing: % then use this metacalibration to determine original sample logCu2+

logCuoriginal=(mVoriginal-Eo)/m

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); hold on
plot(logCuplot,val,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)
Device pixel ratio: 1
Render time: 339322
Encode time: 14497
Send time: 463
Draw time: 366798
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); 
hold on
plot(logCuTplot,mVcalc,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
Device pixel ratio: 1
Render time: 339073
Encode time: 14083
Send time: 533
Draw time: 366516
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

CuT=CuTmeas; inorganicTOTALS=[CuT ENT];
inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
pH=pH; pe=20.75-pH; PCO2=10^-3.5;
[Cuall,CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database)

plot(log10(CuTplus),mV,'bo','markersize',8,'markerfacecolor','b'); 
hold on
plot(logCuplot,val,'k-')
plot(logCuoriginal,mVoriginal,'ko','markersize',8)

plot([log10(Cuall) log10(Cuall)],[min(mVoriginal)-0.2*min(mVoriginal) max(mV)+0.2*max(mV)],'b--')
Device pixel ratio: 1
Render time: 347690
Encode time: 14590
Send time: 481
Draw time: 376109
[I 20:19:34.556 NotebookApp] Saving file at /Cu_EN/CuT1e-6_EN1e-5_pH10linear.ipynb
[I 20:20:26.399 NotebookApp] Creating new notebook in /Cu_EN
[I 20:20:30.777 NotebookApp] Kernel started: ad2489cb-4633-43c6-aa2d-8542ee2b7641, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 20:22:26.513 NotebookApp] Saving file at /Cu_EN/Cu_EN_speciation.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

logCuT=-9:1:-3; ENT=1e-5; PCO2=10^-3.5;
pHv=2:1:12;

for i=1:length(logCuT)
    for j=1:length(pHv)
        CuT=10^logCuT(i); inorganicTOTALS=[CuT ENT];
        inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
        TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
        pH=pHv(i); pe=20.75-pH; 
        [Cu2plus(i,j),CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR(i,j)]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
    end
end

mesh(Cu2plus)

Executing: % housekeeping
% clear data and number format
clear; format short e
% turn off warnings
warning off
graphics_toolkit ("notebook"); 
%graphics_toolkit ("plotly"); 
% setup environment
% set path to equilibrium solver
txt=pwd;
n=length(txt);
rootpath=txt(1:n-5);
PHREEQCpath=[rootpath,'/runPHREEQC'];
addpath(PHREEQCpath);
JEQUILIBpath=[rootpath,'/JEQUILIB']; addpath(JEQUILIBpath);
Cumodelspath=[rootpath,'/Cutableaus']; addpath(Cumodelspath);
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

logCuT=-9:1:-3; ENT=1e-5; PCO2=10^-3.5;
pHv=2:1:12;

for i=1:length(logCuT)
    for j=1:length(pHv)
        CuT=10^logCuT(i); inorganicTOTALS=[CuT ENT];
        inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
        TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
        pH=pHv(i); pe=20.75-pH; 
        [Cu2plus(i,j),CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR(i,j)]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
    end
end

mesh(Cu2plus)

Device pixel ratio: 1
Render time: 437999
Encode time: 18177
Send time: 1241
Draw time: 478374
[I 20:24:26.545 NotebookApp] Saving file at /Cu_EN/Cu_EN_speciation.ipynb
[I 20:26:26.574 NotebookApp] Saving file at /Cu_EN/Cu_EN_speciation.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

logCuT=-9:1:-3; ENT=1e-5; PCO2=10^-3.5;
pHv=2:1:12;

for i=1:length(logCuT)
    for j=1:length(pHv)
        CuT=10^logCuT(i); inorganicTOTALS=[CuT ENT];
        inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
        TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
        pH=pHv(i); pe=20.75-pH; 
        [Cu2plus(i,j),CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR(i,j)]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
    end
end

mesh(pHv,logCuT,Cu2plus)

Device pixel ratio: 1
Render time: 430276
Encode time: 19162
Send time: 1322
Draw time: 465443
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

logCuT=-9:1:-3; ENT=1e-5; PCO2=10^-3.5;
pHv=2:1:12;

for i=1:length(logCuT)
    for j=1:length(pHv)
        CuT=10^logCuT(i); inorganicTOTALS=[CuT ENT];
        inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
        TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
        pH=pHv(j); pe=20.75-pH; 
        [Cu2plus(i,j),CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR(i,j)]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
    end
end

mesh(pHv,logCuT,log10(Cu2plus))

Device pixel ratio: 1
Render time: 430795
Encode time: 18816
Send time: 1303
Draw time: 465116
[I 20:28:26.609 NotebookApp] Saving file at /Cu_EN/Cu_EN_speciation.ipynb
Executing: % MODEL FOR COMPARISON
%graphics_toolkit("notebook")
graphics_toolkit("plotly")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

logCuT=-9:1:-3; ENT=1e-5; PCO2=10^-3.5;
pHv=2:1:12;

for i=1:length(logCuT)
    for j=1:length(pHv)
        CuT=10^logCuT(i); inorganicTOTALS=[CuT ENT];
        inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
        TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
        pH=pHv(j); pe=20.75-pH; 
        [Cu2plus(i,j),CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR(i,j)]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
    end
end

mesh(pHv,logCuT,log10(Cu2plus))

list
string: 2
list
string: 4
list
string: 6
list
string: 8
list
string: 10
list
string: 12
list
string: -9
list
string: -8
list
string: -7
list
string: -6
list
string: -5
list
string: -4
list
string: -3
list
string: -25
list
string: -20
list
string: -15
list
string: -10
list
string: -5
list
string: 0
string: 
string: 
string: 
[I 20:30:26.647 NotebookApp] Saving file at /Cu_EN/Cu_EN_speciation.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%graphics_toolkit("plotly")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

logCuT=-9:1:-3; ENT=1e-5; PCO2=10^-3.5;
pHv=2:1:12;

for i=1:length(logCuT)
    for j=1:length(pHv)
        CuT=10^logCuT(i); inorganicTOTALS=[CuT ENT];
        inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
        TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
        pH=pHv(j); pe=20.75-pH; 
        [Cu2plus(i,j),CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR(i,j)]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
    end
end

mesh(pHv,logCuT,log10(Cu2plus))

Device pixel ratio: 1
Render time: 430926
Encode time: 18481
Send time: 1427
Draw time: 464922
[I 20:32:26.687 NotebookApp] Saving file at /Cu_EN/Cu_EN_speciation.ipynb
Executing: % MODEL FOR COMPARISON
graphics_toolkit("notebook")
%graphics_toolkit("plotly")
%model with just inorganic speciation
%geochemical model
% input the constants and solution chemistry

flag1=2; %flag1 for concentration based search vector (1) or for log based search vector (2).
flag2=1; %flag2 for numerical derivatives (2) or analtyical derivatives (1)
database=[]; 
flag3=0; % flag3 1 for show warnings. 0 no warnings
flag4=0; %if=1 solve tableau one line at a time to get a good initial guess (no solids). really challenging probs only
flag5=0; %if=1 use stored initial guess for including solids

logCuT=-9:1:-3; ENT=1e-5; PCO2=10^-3.5;
pHv=2:1:12;

for i=1:length(logCuT)
    for j=1:length(pHv)
        CuT=10^logCuT(i); inorganicTOTALS=[CuT ENT];
        inorganicTOTALS(inorganicTOTALS==0)=1e-16; % get rid of zero values, b/c div by zero error
        TOTALS=[inorganicTOTALS]; %TOTALS=inorganicTOTALS;
        pH=pHv(j); pe=20.75-pH; 
        [Cu2plus(i,j),CuOH,CuOH2s,CuOs,CuCO3s,tenorite,malachite,MASSERR(i,j)]=CuOHCO2open_EN_allsolids(pH,pe,PCO2,TOTALS',flag1,flag2,flag3,flag4,flag5,database);
    end
end

mesh(pHv,logCuT,log10(Cu2plus))
xlabel('pH'); ylabel('logCuT'); zlabel('logCu^{2+}')

Device pixel ratio: 1
Render time: 430611
Encode time: 18897
Send time: 2271
Draw time: 466547
[I 20:34:26.716 NotebookApp] Saving file at /Cu_EN/Cu_EN_speciation.ipynb
[I 20:41:59.089 NotebookApp] Starting buffering for 980abff1-bfe7-49a0-a4c0-6d6c2b3f678a:9848e0c3-2767-4cd1-a7b9-0b2d80e84572
[I 20:42:00.807 NotebookApp] Starting buffering for 16e4894c-993f-4829-972c-64eb5c519df0:b1dc6a83-039c-4bf1-ae99-fb2c5e11264a
[I 20:42:02.037 NotebookApp] Starting buffering for ad2489cb-4633-43c6-aa2d-8542ee2b7641:1da5887c-fe9d-484b-ba29-80efd891bd00
[I 20:42:11.189 NotebookApp] Starting buffering for fafe1276-c970-4375-bd9f-fdf0aa69316e:0a2660f9-ee16-49ad-b05c-105a52559479
[I 20:47:03.764 NotebookApp] Starting buffering for ad2489cb-4633-43c6-aa2d-8542ee2b7641:442b118b-d3f4-4db1-8016-59f79895325f
[I 20:47:06.753 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:841e03a3-f767-4f59-a163-1fbf3a6f21c0
[I 20:47:06.763 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:e876f5d9-d82a-4b86-981f-6f5ccd49f91a
[I 20:47:07.384 NotebookApp] 301 GET /static/favicons/favicon.ico (172.24.0.1) 0.610000ms
[I 2023-10-24 20:47:10.428 LabApp] Build is up to date
[I 20:47:25.207 NotebookApp] Kernel started: e04f159a-7586-4568-91d0-2ff6c276ee1b, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 20:47:25.663 NotebookApp] Starting buffering for e04f159a-7586-4568-91d0-2ff6c276ee1b:c08736cc-190d-44f4-ad14-4f588d7ab310
[I 21:16:13.305 NotebookApp] Starting buffering for 980abff1-bfe7-49a0-a4c0-6d6c2b3f678a:7459cecb-b829-42f2-a269-dbc49b14854c
[I 21:16:15.375 NotebookApp] Starting buffering for fafe1276-c970-4375-bd9f-fdf0aa69316e:9fe662da-25f3-4bd3-9962-b1b534f24188
[I 02:41:34.154 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:892dba15-35ce-4905-85cc-7185dbf15f1d
[I 02:41:34.155 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:4a6fa248-73cf-4e57-a51b-f7187aa0b1a9
[I 02:41:34.155 NotebookApp] Starting buffering for e04f159a-7586-4568-91d0-2ff6c276ee1b:bf7277ec-1c74-4ef2-9619-cbd268034e1f
[I 02:47:14.897 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:892dba15-35ce-4905-85cc-7185dbf15f1d
[I 02:47:15.098 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:4a6fa248-73cf-4e57-a51b-f7187aa0b1a9
[I 04:37:25.217 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:4a6fa248-73cf-4e57-a51b-f7187aa0b1a9
[I 04:37:25.219 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:892dba15-35ce-4905-85cc-7185dbf15f1d
[I 04:37:25.220 NotebookApp] Starting buffering for e04f159a-7586-4568-91d0-2ff6c276ee1b:bc84c31b-05ae-4b8a-ae33-e7fcd49bab19
[I 04:37:53.272 NotebookApp] Restoring connection for 25ae63a3-0611-4543-acf3-fb0a3913e565:4a6fa248-73cf-4e57-a51b-f7187aa0b1a9
[I 04:37:53.639 NotebookApp] Restoring connection for 81697988-42bb-43e3-b58e-f465db9b1b4b:892dba15-35ce-4905-85cc-7185dbf15f1d
[I 04:37:54.413 NotebookApp] Starting buffering for e04f159a-7586-4568-91d0-2ff6c276ee1b:bf7277ec-1c74-4ef2-9619-cbd268034e1f
[I 04:37:54.418 NotebookApp] Starting buffering for 81697988-42bb-43e3-b58e-f465db9b1b4b:892dba15-35ce-4905-85cc-7185dbf15f1d
[I 04:37:54.419 NotebookApp] Starting buffering for 25ae63a3-0611-4543-acf3-fb0a3913e565:4a6fa248-73cf-4e57-a51b-f7187aa0b1a9
[I 12:16:13.792 NotebookApp] Restoring connection for e04f159a-7586-4568-91d0-2ff6c276ee1b:bf7277ec-1c74-4ef2-9619-cbd268034e1f
[I 12:16:44.993 NotebookApp] Starting buffering for e04f159a-7586-4568-91d0-2ff6c276ee1b:bf7277ec-1c74-4ef2-9619-cbd268034e1f
[I 2023-10-25 12:47:46.075 LabApp] Build is up to date
[I 12:47:54.051 NotebookApp] New terminal with automatic name: 1
